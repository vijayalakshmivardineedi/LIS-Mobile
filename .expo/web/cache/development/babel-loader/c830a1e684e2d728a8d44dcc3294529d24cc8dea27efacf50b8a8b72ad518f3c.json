{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\Day.js\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport dayjs from 'dayjs';\nimport Color from './Color';\nimport { isSameDay } from './utils';\nimport { DATE_FORMAT } from './Constant';\nimport { useChatContext } from './GiftedChatContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600'\n  }\n});\nexport function Day({\n  dateFormat = DATE_FORMAT,\n  currentMessage,\n  previousMessage,\n  containerStyle,\n  wrapperStyle,\n  textStyle\n}) {\n  const {\n    getLocale\n  } = useChatContext();\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage)) return null;\n  return _jsxDEV(View, {\n    style: [styles.container, containerStyle],\n    children: _jsxDEV(View, {\n      style: wrapperStyle,\n      children: _jsxDEV(Text, {\n        style: [styles.text, textStyle],\n        children: dayjs(currentMessage.createdAt).locale(getLocale()).format(dateFormat)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 13\n  }, this);\n}","map":{"version":3,"names":["React","StyleSheet","Text","View","dayjs","Color","isSameDay","DATE_FORMAT","useChatContext","jsxDEV","_jsxDEV","styles","create","container","alignItems","justifyContent","marginTop","marginBottom","text","backgroundColor","backgroundTransparent","color","defaultColor","fontSize","fontWeight","Day","dateFormat","currentMessage","previousMessage","containerStyle","wrapperStyle","textStyle","getLocale","style","children","createdAt","locale","format","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gifted-chat\\src\\Day.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  StyleSheet,\n  Text,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  TextProps,\n} from 'react-native'\nimport dayjs from 'dayjs'\n\nimport Color from './Color'\nimport { isSameDay } from './utils'\nimport { DATE_FORMAT } from './Constant'\nimport { IMessage } from './Models'\n\nimport { useChatContext } from './GiftedChatContext'\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 5,\n    marginBottom: 10,\n  },\n  text: {\n    backgroundColor: Color.backgroundTransparent,\n    color: Color.defaultColor,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n})\n\nexport interface DayProps<TMessage extends IMessage = IMessage> {\n  currentMessage: TMessage\n  nextMessage?: TMessage\n  previousMessage?: TMessage\n  containerStyle?: StyleProp<ViewStyle>\n  wrapperStyle?: StyleProp<ViewStyle>\n  textStyle?: StyleProp<TextStyle>\n  textProps?: TextProps\n  dateFormat?: string\n  inverted?: boolean\n}\n\nexport function Day<TMessage extends IMessage = IMessage> ({\n  dateFormat = DATE_FORMAT,\n  currentMessage,\n  previousMessage,\n  containerStyle,\n  wrapperStyle,\n  textStyle,\n}: DayProps<TMessage>) {\n  const { getLocale } = useChatContext()\n\n  if (currentMessage == null || isSameDay(currentMessage, previousMessage))\n    return null\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      <View style={wrapperStyle}>\n        <Text style={[styles.text, textStyle]}>\n          {dayjs(currentMessage.createdAt)\n            .locale(getLocale())\n            .format(dateFormat)}\n        </Text>\n      </View>\n    </View>\n  )\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAU9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,SAAS,QAAQ,SAAS;AACnC,SAASC,WAAW,QAAQ,YAAY;AAGxC,SAASC,cAAc,QAAQ,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,MAAM,GAAGV,UAAU,CAACW,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE;GACf;EACDC,IAAI,EAAE;IACJC,eAAe,EAAEd,KAAK,CAACe,qBAAqB;IAC5CC,KAAK,EAAEhB,KAAK,CAACiB,YAAY;IACzBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;;CAEf,CAAC;AAcF,OAAM,SAAUC,GAAGA,CAAwC;EACzDC,UAAU,GAAGnB,WAAW;EACxBoB,cAAc;EACdC,eAAe;EACfC,cAAc;EACdC,YAAY;EACZC;AAAS,CACU;EACnB,MAAM;IAAEC;EAAS,CAAE,GAAGxB,cAAc,EAAE;EAEtC,IAAImB,cAAc,IAAI,IAAI,IAAIrB,SAAS,CAACqB,cAAc,EAAEC,eAAe,CAAC,EACtE,OAAO,IAAI;EAEb,OACElB,OAAA,CAACP,IAAI;IAAC8B,KAAK,EAAE,CAACtB,MAAM,CAACE,SAAS,EAAEgB,cAAc,CAAE;IAAAK,QAAA,EAC9CxB,OAAA,CAACP,IAAI;MAAC8B,KAAK,EAAEH,YAAa;MAAAI,QAAA,EACxBxB,OAAA,CAACR,IAAI;QAAC+B,KAAK,EAAE,CAACtB,MAAM,CAACO,IAAI,EAAEa,SAAS,CAAE;QAAAG,QAAA,EACnC9B,KAAK,CAACuB,cAAc,CAACQ,SAAS,CAAC,CAC7BC,MAAM,CAACJ,SAAS,EAAE,CAAC,CACnBK,MAAM,CAACX,UAAU;MAAC;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}