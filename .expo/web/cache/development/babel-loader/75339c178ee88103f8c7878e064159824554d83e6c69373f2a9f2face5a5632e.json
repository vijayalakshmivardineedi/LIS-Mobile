{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\Composer.js\";\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from './Constant';\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Composer({\n  composerHeight = MIN_COMPOSER_HEIGHT,\n  disableComposer = false,\n  keyboardAppearance = 'default',\n  multiline = true,\n  onInputSizeChanged,\n  onTextChanged,\n  placeholder = DEFAULT_PLACEHOLDER,\n  placeholderTextColor = Color.defaultColor,\n  text = '',\n  textInputAutoFocus = false,\n  textInputProps,\n  textInputStyle\n}) {\n  const dimensionsRef = useRef();\n  const determineInputSizeChange = useCallback(dimensions => {\n    if (!dimensions) return;\n    if (!dimensionsRef.current || dimensionsRef.current && (dimensionsRef.current.width !== dimensions.width || dimensionsRef.current.height !== dimensions.height)) {\n      dimensionsRef.current = dimensions;\n      onInputSizeChanged?.(dimensions);\n    }\n  }, [onInputSizeChanged]);\n  const handleContentSizeChange = useCallback(({\n    nativeEvent: {\n      contentSize\n    }\n  }) => determineInputSizeChange(contentSize), [determineInputSizeChange]);\n  return _jsxDEV(TextInput, Object.assign({\n    testID: placeholder,\n    accessible: true,\n    accessibilityLabel: placeholder,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    multiline: multiline,\n    editable: !disableComposer,\n    onContentSizeChange: handleContentSizeChange,\n    onChangeText: onTextChanged,\n    style: [styles.textInput, textInputStyle, Object.assign({\n      height: composerHeight\n    }, Platform.select({\n      web: {\n        outlineWidth: 0,\n        outlineColor: 'transparent',\n        outlineOffset: 0\n      }\n    }))],\n    autoFocus: textInputAutoFocus,\n    value: text,\n    enablesReturnKeyAutomatically: true,\n    underlineColorAndroid: \"transparent\",\n    keyboardAppearance: keyboardAppearance\n  }, textInputProps), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 13\n  }, this);\n}\nComposer.propTypes = {\n  composerHeight: PropTypes.number,\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  textInputProps: PropTypes.object,\n  onTextChanged: PropTypes.func,\n  onInputSizeChanged: PropTypes.func,\n  multiline: PropTypes.bool,\n  disableComposer: PropTypes.bool,\n  textInputStyle: StylePropType,\n  textInputAutoFocus: PropTypes.bool,\n  keyboardAppearance: PropTypes.string\n};\nconst styles = StyleSheet.create({\n  textInput: Object.assign({\n    flex: 1,\n    marginLeft: 10,\n    fontSize: 16,\n    lineHeight: 22\n  }, Platform.select({\n    web: {\n      paddingTop: 6,\n      paddingLeft: 4\n    }\n  }), {\n    marginTop: Platform.select({\n      ios: 6,\n      android: 0,\n      web: 6\n    }),\n    marginBottom: Platform.select({\n      ios: 5,\n      android: 3,\n      web: 4\n    })\n  })\n});","map":{"version":3,"names":["React","useCallback","useRef","PropTypes","Platform","StyleSheet","TextInput","MIN_COMPOSER_HEIGHT","DEFAULT_PLACEHOLDER","Color","StylePropType","jsxDEV","_jsxDEV","Composer","composerHeight","disableComposer","keyboardAppearance","multiline","onInputSizeChanged","onTextChanged","placeholder","placeholderTextColor","defaultColor","text","textInputAutoFocus","textInputProps","textInputStyle","dimensionsRef","determineInputSizeChange","dimensions","current","width","height","handleContentSizeChange","nativeEvent","contentSize","Object","assign","testID","accessible","accessibilityLabel","editable","onContentSizeChange","onChangeText","style","styles","textInput","select","web","outlineWidth","outlineColor","outlineOffset","autoFocus","value","enablesReturnKeyAutomatically","underlineColorAndroid","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","number","string","object","func","bool","create","flex","marginLeft","fontSize","lineHeight","paddingTop","paddingLeft","marginTop","ios","android","marginBottom"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gifted-chat\\src\\Composer.tsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Platform,\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  NativeSyntheticEvent,\n  TextInputContentSizeChangeEventData,\n} from 'react-native'\nimport { MIN_COMPOSER_HEIGHT, DEFAULT_PLACEHOLDER } from './Constant'\nimport Color from './Color'\nimport { StylePropType } from './utils'\n\nexport interface ComposerProps {\n  composerHeight?: number\n  text?: string\n  placeholder?: string\n  placeholderTextColor?: string\n  textInputProps?: Partial<TextInputProps>\n  textInputStyle?: TextInputProps['style']\n  textInputAutoFocus?: boolean\n  keyboardAppearance?: TextInputProps['keyboardAppearance']\n  multiline?: boolean\n  disableComposer?: boolean\n  onTextChanged?(text: string): void\n  onInputSizeChanged?(layout: { width: number, height: number }): void\n}\n\nexport function Composer ({\n  composerHeight = MIN_COMPOSER_HEIGHT,\n  disableComposer = false,\n  keyboardAppearance = 'default',\n  multiline = true,\n  onInputSizeChanged,\n  onTextChanged,\n  placeholder = DEFAULT_PLACEHOLDER,\n  placeholderTextColor = Color.defaultColor,\n  text = '',\n  textInputAutoFocus = false,\n  textInputProps,\n  textInputStyle,\n}: ComposerProps): React.ReactElement {\n  const dimensionsRef = useRef<{ width: number, height: number }>()\n\n  const determineInputSizeChange = useCallback(\n    (dimensions: { width: number, height: number }) => {\n      // Support earlier versions of React Native on Android.\n      if (!dimensions)\n        return\n\n      if (\n        !dimensionsRef.current ||\n        (dimensionsRef.current &&\n          (dimensionsRef.current.width !== dimensions.width ||\n            dimensionsRef.current.height !== dimensions.height))\n      ) {\n        dimensionsRef.current = dimensions\n        onInputSizeChanged?.(dimensions)\n      }\n    },\n    [onInputSizeChanged]\n  )\n\n  const handleContentSizeChange = useCallback(\n    ({\n      nativeEvent: { contentSize },\n    }: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) =>\n      determineInputSizeChange(contentSize),\n    [determineInputSizeChange]\n  )\n\n  return (\n    <TextInput\n      testID={placeholder}\n      accessible\n      accessibilityLabel={placeholder}\n      placeholder={placeholder}\n      placeholderTextColor={placeholderTextColor}\n      multiline={multiline}\n      editable={!disableComposer}\n      onContentSizeChange={handleContentSizeChange}\n      onChangeText={onTextChanged}\n      style={[\n        styles.textInput,\n        textInputStyle,\n        {\n          height: composerHeight,\n          ...Platform.select({\n            web: {\n              outlineWidth: 0,\n              outlineColor: 'transparent',\n              outlineOffset: 0,\n            },\n          }),\n        },\n      ]}\n      autoFocus={textInputAutoFocus}\n      value={text}\n      enablesReturnKeyAutomatically\n      underlineColorAndroid='transparent'\n      keyboardAppearance={keyboardAppearance}\n      {...textInputProps}\n    />\n  )\n}\n\nComposer.propTypes = {\n  composerHeight: PropTypes.number,\n  text: PropTypes.string,\n  placeholder: PropTypes.string,\n  placeholderTextColor: PropTypes.string,\n  textInputProps: PropTypes.object,\n  onTextChanged: PropTypes.func,\n  onInputSizeChanged: PropTypes.func,\n  multiline: PropTypes.bool,\n  disableComposer: PropTypes.bool,\n  textInputStyle: StylePropType,\n  textInputAutoFocus: PropTypes.bool,\n  keyboardAppearance: PropTypes.string,\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    flex: 1,\n    marginLeft: 10,\n    fontSize: 16,\n    lineHeight: 22,\n    ...Platform.select({\n      web: {\n        paddingTop: 6,\n        paddingLeft: 4,\n      },\n    }),\n    marginTop: Platform.select({\n      ios: 6,\n      android: 0,\n      web: 6,\n    }),\n    marginBottom: Platform.select({\n      ios: 5,\n      android: 3,\n      web: 4,\n    }),\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}