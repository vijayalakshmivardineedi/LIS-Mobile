{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axiosInstance from '../../../../Security/helpers/axios';\nexport const fetchGuard = createAsyncThunk(\"settings/fetchGuard\", async ({\n  societyId,\n  sequrityId\n}, {\n  rejectWithValue\n}) => {\n  try {\n    response = await axiosInstance.get(`/sequrity/getGuardBySocietyIdAndId/${societyId}/${sequrityId}`);\n    return response.data.sequrity;\n  } catch (error) {\n    return rejectWithValue(error.response ? error.response.data : error.message);\n  }\n});\nconst settingsSlice = createSlice({\n  name: \"settings\",\n  initialState: {\n    settings: [],\n    status: \"idle\",\n    error: null,\n    successMessage: null\n  },\n  reducers: {\n    resetState: state => {\n      state.loading = false;\n      state.error = null;\n      state.success = false;\n      state.successMessage = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchGuard.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchGuard.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.settings = action.payload;\n      state.successMessage = action.payload.message;\n    }).addCase(fetchGuard.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload.message;\n    });\n  }\n});\nexport const {\n  resetState\n} = settingsSlice.actions;\nexport default settingsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","fetchGuard","societyId","sequrityId","rejectWithValue","response","get","data","sequrity","error","message","settingsSlice","name","initialState","settings","status","successMessage","reducers","resetState","state","loading","success","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/src/panel/User/Redux/Slice/Security_Panel/SettingsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axiosInstance from '../../../../Security/helpers/axios';\r\n\r\n// /sequrity/getGuardBySocietyIdAndId/:societyId/:sequrityId\r\n\r\nexport const fetchGuard = createAsyncThunk(\r\n    \"settings/fetchGuard\",\r\n    async ({societyId, sequrityId}, { rejectWithValue }) => {\r\n        try {\r\n            response = await axiosInstance.get(`/sequrity/getGuardBySocietyIdAndId/${societyId}/${sequrityId}`\r\n        );\r\n        return response.data.sequrity;\r\n        } catch (error) {\r\n            return rejectWithValue(error.response ? error.response.data : error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nconst settingsSlice = createSlice({\r\n    name: \"settings\",\r\n    initialState: {\r\n        settings: [],\r\n        status: \"idle\",\r\n        error: null,\r\n        successMessage: null,\r\n\r\n    },\r\n    reducers: {\r\n        resetState: (state) => {\r\n            state.loading = false;\r\n            state.error = null;\r\n            state.success = false;\r\n            state.successMessage = null;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchGuard.pending, (state) => {\r\n                state.status = \"loading\";\r\n            })\r\n            .addCase(fetchGuard.fulfilled, (state, action) => {\r\n                state.status = \"succeeded\";\r\n                state.settings = action.payload;\r\n                state.successMessage = action.payload.message;\r\n            })\r\n            .addCase(fetchGuard.rejected, (state, action) => {\r\n                state.status = \"failed\";\r\n                state.error = action.payload.message;\r\n            });\r\n    },\r\n});\r\n\r\nexport const { resetState } = settingsSlice.actions;\r\nexport default settingsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,aAAa,MAAM,oCAAoC;AAI9D,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CACtC,qBAAqB,EACrB,OAAO;EAACG,SAAS;EAAEC;AAAU,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACpD,IAAI;IACAC,QAAQ,GAAG,MAAML,aAAa,CAACM,GAAG,CAAC,sCAAsCJ,SAAS,IAAIC,UAAU,EACpG,CAAC;IACD,OAAOE,QAAQ,CAACE,IAAI,CAACC,QAAQ;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAOL,eAAe,CAACK,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACE,IAAI,GAAGE,KAAK,CAACC,OAAO,CAAC;EAChF;AACJ,CACJ,CAAC;AAGD,MAAMC,aAAa,GAAGb,WAAW,CAAC;EAC9Bc,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,MAAM;IACdN,KAAK,EAAE,IAAI;IACXO,cAAc,EAAE;EAEpB,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACC,OAAO,GAAG,KAAK;MACrBD,KAAK,CAACV,KAAK,GAAG,IAAI;MAClBU,KAAK,CAACE,OAAO,GAAG,KAAK;MACrBF,KAAK,CAACH,cAAc,GAAG,IAAI;IAC/B;EACJ,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACvB,UAAU,CAACwB,OAAO,EAAGN,KAAK,IAAK;MACpCA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC5B,CAAC,CAAC,CACDS,OAAO,CAACvB,UAAU,CAACyB,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MAC9CR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,QAAQ,GAAGa,MAAM,CAACC,OAAO;MAC/BT,KAAK,CAACH,cAAc,GAAGW,MAAM,CAACC,OAAO,CAAClB,OAAO;IACjD,CAAC,CAAC,CACDc,OAAO,CAACvB,UAAU,CAAC4B,QAAQ,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MAC7CR,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACV,KAAK,GAAGkB,MAAM,CAACC,OAAO,CAAClB,OAAO;IACxC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ;AAAW,CAAC,GAAGP,aAAa,CAACmB,OAAO;AACnD,eAAenB,aAAa,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}