{"ast":null,"code":"'use strict';\n\nimport { useEvent } from './useEvent';\nimport { useHandler } from './useHandler';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nconst _worklet_10072825819171_init_data = {\n  code: \"function useComposedEventHandlerJs1(event){const{workletsMap}=this.__closure;if(workletsMap[event.eventName]){workletsMap[event.eventName].forEach(function(worklet){return worklet(event);});}}\",\n  location: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useComposedEventHandler.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"useComposedEventHandlerJs1\\\",\\\"event\\\",\\\"workletsMap\\\",\\\"__closure\\\",\\\"eventName\\\",\\\"forEach\\\",\\\"worklet\\\"],\\\"sources\\\":[\\\"C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-reanimated/lib/module/hook/useComposedEventHandler.js\\\"],\\\"mappings\\\":\\\"AA2CkB,SAAAA,0BAASA,CAAAC,KAAA,QAAAC,WAAA,OAAAC,SAAA,CAGvB,GAAID,WAAW,CAACD,KAAK,CAACG,SAAS,CAAC,CAAE,CAChCF,WAAW,CAACD,KAAK,CAACG,SAAS,CAAC,CAACC,OAAO,CAAC,SAAAC,OAAO,QAAI,CAAAA,OAAO,CAACL,KAAK,CAAC,GAAC,CACjE,CACF\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.15.1\"\n};\nexport function useComposedEventHandler(handlers) {\n  const workletsRecord = {};\n  const composedEventNames = new Set();\n  const workletsMap = {};\n  handlers.filter(h => h !== null).forEach(handler => {\n    const {\n      workletEventHandler\n    } = handler;\n    if (workletEventHandler instanceof WorkletEventHandler) {\n      workletEventHandler.eventNames.forEach(eventName => {\n        composedEventNames.add(eventName);\n        if (workletsMap[eventName]) {\n          workletsMap[eventName].push(workletEventHandler.worklet);\n        } else {\n          workletsMap[eventName] = [workletEventHandler.worklet];\n        }\n        const handlerName = eventName + `${workletsMap[eventName].length}`;\n        workletsRecord[handlerName] = workletEventHandler.worklet;\n      });\n    }\n  });\n  const {\n    doDependenciesDiffer\n  } = useHandler(workletsRecord);\n  return useEvent(function () {\n    const _e = [new global.Error(), -2, -27];\n    const useComposedEventHandlerJs1 = function (event) {\n      if (workletsMap[event.eventName]) {\n        workletsMap[event.eventName].forEach(worklet => worklet(event));\n      }\n    };\n    useComposedEventHandlerJs1.__closure = {\n      workletsMap\n    };\n    useComposedEventHandlerJs1.__workletHash = 10072825819171;\n    useComposedEventHandlerJs1.__initData = _worklet_10072825819171_init_data;\n    useComposedEventHandlerJs1.__stackDetails = _e;\n    return useComposedEventHandlerJs1;\n  }(), Array.from(composedEventNames), doDependenciesDiffer);\n}","map":{"version":3,"names":["useEvent","useHandler","WorkletEventHandler","_worklet_10072825819171_init_data","code","location","sourceMap","version","useComposedEventHandler","handlers","workletsRecord","composedEventNames","Set","workletsMap","filter","h","forEach","handler","workletEventHandler","eventNames","eventName","add","push","worklet","handlerName","length","doDependenciesDiffer","_e","global","Error","useComposedEventHandlerJs1","event","__closure","__workletHash","__initData","__stackDetails","Array","from"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-reanimated\\lib\\module\\hook\\useComposedEventHandler.ts"],"sourcesContent":["'use strict';\nimport { useEvent } from './useEvent';\nimport { useHandler } from './useHandler';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type { ReanimatedEvent } from './commonTypes';\nimport type { WorkletFunction } from '../commonTypes';\nimport type { EventHandlerProcessed, EventHandlerInternal } from './useEvent';\n\ntype ComposedHandlerProcessed<\n  Event extends object,\n  Context extends Record<string, unknown> = Record<string, unknown>\n> = EventHandlerProcessed<Event, Context>;\n\ntype ComposedHandlerInternal<Event extends object> =\n  EventHandlerInternal<Event>;\n\n/**\n * Lets you compose multiple event handlers based on [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent) hook.\n *\n * @param handlers - An array of event handlers created using [useEvent](https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent) hook.\n * @returns An object you need to pass to a coresponding \"onEvent\" prop on an `Animated` component (for example handlers responsible for `onScroll` event go to `onScroll` prop).\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useComposedEventHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(\n  handlers: (EventHandlerProcessed<Event, Context> | null)[]\n): ComposedHandlerProcessed<Event, Context>;\n\nexport function useComposedEventHandler<\n  Event extends object,\n  Context extends Record<string, unknown>\n>(handlers: (EventHandlerProcessed<Event, Context> | null)[]) {\n  // Record of handlers' worklets to calculate deps diffs. We use the record type to match the useHandler API requirements\n  const workletsRecord: Record<string, WorkletFunction> = {};\n  // Summed event names for registration\n  const composedEventNames = new Set<string>();\n  // Map that holds worklets for specific handled events\n  const workletsMap: {\n    [key: string]: ((event: ReanimatedEvent<Event>) => void)[];\n  } = {};\n\n  handlers\n    .filter((h) => h !== null)\n    .forEach((handler) => {\n      // EventHandlerProcessed is the return type of useEvent and has to be force casted to EventHandlerInternal, because we need WorkletEventHandler object\n      const { workletEventHandler } =\n        handler as unknown as EventHandlerInternal<Context>;\n      if (workletEventHandler instanceof WorkletEventHandler) {\n        workletEventHandler.eventNames.forEach((eventName) => {\n          composedEventNames.add(eventName);\n\n          if (workletsMap[eventName]) {\n            workletsMap[eventName].push(workletEventHandler.worklet);\n          } else {\n            workletsMap[eventName] = [workletEventHandler.worklet];\n          }\n\n          const handlerName = eventName + `${workletsMap[eventName].length}`;\n          workletsRecord[handlerName] =\n            workletEventHandler.worklet as WorkletFunction;\n        });\n      }\n    });\n\n  const { doDependenciesDiffer } = useHandler(workletsRecord);\n\n  return useEvent<Event, Context>(\n    (event) => {\n      'worklet';\n      if (workletsMap[event.eventName]) {\n        workletsMap[event.eventName].forEach((worklet) => worklet(event));\n      }\n    },\n    Array.from(composedEventNames),\n    doDependenciesDiffer\n  ) as unknown as ComposedHandlerInternal<Event>;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,mBAAmB,QAAQ,wBAAwB;AAAA,MAAAC,iCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AA4B5D,OAAO,SAASC,uBAAuBA,CAGrCC,QAA0D,EAAE;EAE5D,MAAMC,cAA+C,GAAG,CAAC,CAAC;EAE1D,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAS,CAAC;EAE5C,MAAMC,WAEL,GAAG,CAAC,CAAC;EAENJ,QAAQ,CACLK,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,IAAI,CAAC,CACzBC,OAAO,CAAEC,OAAO,IAAK;IAEpB,MAAM;MAAEC;IAAoB,CAAC,GAC3BD,OAAmD;IACrD,IAAIC,mBAAmB,YAAYhB,mBAAmB,EAAE;MACtDgB,mBAAmB,CAACC,UAAU,CAACH,OAAO,CAAEI,SAAS,IAAK;QACpDT,kBAAkB,CAACU,GAAG,CAACD,SAAS,CAAC;QAEjC,IAAIP,WAAW,CAACO,SAAS,CAAC,EAAE;UAC1BP,WAAW,CAACO,SAAS,CAAC,CAACE,IAAI,CAACJ,mBAAmB,CAACK,OAAO,CAAC;QAC1D,CAAC,MAAM;UACLV,WAAW,CAACO,SAAS,CAAC,GAAG,CAACF,mBAAmB,CAACK,OAAO,CAAC;QACxD;QAEA,MAAMC,WAAW,GAAGJ,SAAS,GAAI,GAAEP,WAAW,CAACO,SAAS,CAAC,CAACK,MAAO,EAAC;QAClEf,cAAc,CAACc,WAAW,CAAC,GACzBN,mBAAmB,CAACK,OAA0B;MAClD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEJ,MAAM;IAAEG;EAAqB,CAAC,GAAGzB,UAAU,CAACS,cAAc,CAAC;EAE3D,OAAOV,QAAQ,CACZ;IAAA,MAAA2B,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,MAAAC,0BAAA,YAAAA,CAAAC,KAAK,EAAK;MAET,IAAIlB,WAAW,CAACkB,KAAK,CAACX,SAAS,CAAC,EAAE;QAChCP,WAAW,CAACkB,KAAK,CAACX,SAAS,CAAC,CAACJ,OAAO,CAAEO,OAAO,IAAKA,OAAO,CAACQ,KAAK,CAAC,CAAC;MACnE;IACF,CAAC;IAAAD,0BAAA,CAAAE,SAAA;MAAAnB;IAAA;IAAAiB,0BAAA,CAAAG,aAAA;IAAAH,0BAAA,CAAAI,UAAA,GAAA/B,iCAAA;IAAA2B,0BAAA,CAAAK,cAAA,GAAAR,EAAA;IAAA,OAAAG,0BAAA;EAAA,CALA,IAMDM,KAAK,CAACC,IAAI,CAAC1B,kBAAkB,CAAC,EAC9Be,oBACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}