{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const updatePassword = createAsyncThunk('updatePassword/updatePassword', async ({\n  email,\n  newPassword\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('http://192.168.29.226:2000/api/user/updatePassword', {\n      email,\n      newPassword\n    });\n    return response.data.message;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message || error.message);\n  }\n});\nconst initialState = {\n  loading: false,\n  error: null,\n  successMessage: ''\n};\nconst updatePasswordSlice = createSlice({\n  name: 'updatePassword',\n  initialState,\n  reducers: {\n    clearStatus: state => {\n      state.loading = false;\n      state.error = null;\n      state.successMessage = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updatePassword.pending, state => {\n      state.loading = true;\n      state.error = null;\n      state.successMessage = '';\n    }).addCase(updatePassword.fulfilled, (state, action) => {\n      state.loading = false;\n      state.successMessage = action.payload;\n      state.error = null;\n    }).addCase(updatePassword.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n      state.successMessage = '';\n    });\n  }\n});\nexport const {\n  clearStatus\n} = updatePasswordSlice.actions;\nexport default updatePasswordSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","updatePassword","email","newPassword","rejectWithValue","response","post","data","message","error","initialState","loading","successMessage","updatePasswordSlice","name","reducers","clearStatus","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/src/panel/User/Redux/Slice/AuthSlice/Forgot/resetPasswordSlice.js"],"sourcesContent":["// updatePasswordSlice.js\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Async thunk to update user's password\r\nexport const updatePassword = createAsyncThunk(\r\n  'updatePassword/updatePassword',\r\n  async ({ email, newPassword }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post('http://192.168.29.226:2000/api/user/updatePassword', {\r\n        email,\r\n        newPassword,\r\n      });\r\n      return response.data.message; // Assuming your backend sends a message upon success\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data.message || error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: null,\r\n  successMessage: '',\r\n};\r\n\r\nconst updatePasswordSlice = createSlice({\r\n  name: 'updatePassword',\r\n  initialState,\r\n  reducers: {\r\n    clearStatus: (state) => {\r\n      state.loading = false;\r\n      state.error = null;\r\n      state.successMessage = '';\r\n    },\r\n    // Add additional reducers as needed\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(updatePassword.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n        state.successMessage = '';\r\n      })\r\n      .addCase(updatePassword.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.successMessage = action.payload; // Store success message from backend\r\n        state.error = null;\r\n      })\r\n      .addCase(updatePassword.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n        state.successMessage = '';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearStatus } = updatePasswordSlice.actions;\r\n\r\nexport default updatePasswordSlice.reducer;\r\n"],"mappings":"AAEA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAC5C,+BAA+B,EAC/B,OAAO;EAAEG,KAAK;EAAEC;AAAY,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,oDAAoD,EAAE;MACtFJ,KAAK;MACLC;IACF,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI,CAACC,OAAO;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOL,eAAe,CAACK,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACC,OAAO,IAAIC,KAAK,CAACD,OAAO,CAAC;EACtE;AACF,CACF,CAAC;AAED,MAAME,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdF,KAAK,EAAE,IAAI;EACXG,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,mBAAmB,GAAGf,WAAW,CAAC;EACtCgB,IAAI,EAAE,gBAAgB;EACtBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,WAAW,EAAGC,KAAK,IAAK;MACtBA,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACR,KAAK,GAAG,IAAI;MAClBQ,KAAK,CAACL,cAAc,GAAG,EAAE;IAC3B;EAEF,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACnB,cAAc,CAACoB,OAAO,EAAGJ,KAAK,IAAK;MAC1CA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACR,KAAK,GAAG,IAAI;MAClBQ,KAAK,CAACL,cAAc,GAAG,EAAE;IAC3B,CAAC,CAAC,CACDQ,OAAO,CAACnB,cAAc,CAACqB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACpDN,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,cAAc,GAAGW,MAAM,CAACC,OAAO;MACrCP,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDW,OAAO,CAACnB,cAAc,CAACwB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACR,KAAK,GAAGc,MAAM,CAACC,OAAO;MAC5BP,KAAK,CAACL,cAAc,GAAG,EAAE;IAC3B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI;AAAY,CAAC,GAAGH,mBAAmB,CAACa,OAAO;AAE1D,eAAeb,mBAAmB,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}