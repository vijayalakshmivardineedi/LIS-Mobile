{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { State } from '../../State';\nimport { TouchEventType, EventTypes } from '../interfaces';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerTracker from '../tools/PointerTracker';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { PointerType } from '../../PointerType';\nexport default class GestureHandler {\n  constructor(delegate) {\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"currentState\", State.UNDETERMINED);\n    _defineProperty(this, \"shouldCancelWhenOutside\", false);\n    _defineProperty(this, \"hasCustomActivationCriteria\", false);\n    _defineProperty(this, \"enabled\", false);\n    _defineProperty(this, \"viewRef\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"config\", {\n      enabled: false\n    });\n    _defineProperty(this, \"tracker\", new PointerTracker());\n    _defineProperty(this, \"activationIndex\", 0);\n    _defineProperty(this, \"awaiting\", false);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"shouldResetProgress\", false);\n    _defineProperty(this, \"pointerType\", PointerType.MOUSE);\n    _defineProperty(this, \"delegate\", void 0);\n    _defineProperty(this, \"sendEvent\", (newState, oldState) => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const resultEvent = this.transformEventData(newState, oldState);\n      if (this.lastSentState !== newState) {\n        this.lastSentState = newState;\n        invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n      }\n      if (this.currentState === State.ACTIVE) {\n        resultEvent.nativeEvent.oldState = undefined;\n        invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n      }\n    });\n    this.delegate = delegate;\n  }\n  init(viewRef, propsRef) {\n    this.propsRef = propsRef;\n    this.viewRef = viewRef;\n    this.currentState = State.UNDETERMINED;\n    this.delegate.init(viewRef, this);\n  }\n  attachEventManager(manager) {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerLeave(this.onPointerLeave.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setOnPointerMoveOver(this.onPointerMoveOver.bind(this));\n    manager.setOnPointerMoveOut(this.onPointerMoveOut.bind(this));\n    manager.registerListeners();\n  }\n  onCancel() {}\n  onReset() {}\n  resetProgress() {}\n  reset() {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.delegate.reset();\n    this.currentState = State.UNDETERMINED;\n  }\n  moveToState(newState, sendIfDisabled) {\n    if (this.currentState === newState) {\n      return;\n    }\n    const oldState = this.currentState;\n    this.currentState = newState;\n    if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n      this.cancelTouches();\n    }\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n    this.onStateChange(newState, oldState);\n    if (!this.enabled && this.isFinished()) {\n      this.currentState = State.UNDETERMINED;\n    }\n  }\n  onStateChange(_newState, _oldState) {}\n  begin() {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n  fail(sendIfDisabled) {\n    if (this.currentState === State.ACTIVE || this.currentState === State.BEGAN) {\n      this.delegate.onFail();\n      this.moveToState(State.FAILED, sendIfDisabled);\n    }\n    this.resetProgress();\n  }\n  cancel(sendIfDisabled) {\n    if (this.currentState === State.ACTIVE || this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN) {\n      this.onCancel();\n      this.delegate.onCancel();\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n    }\n  }\n  activate(force = false) {\n    if ((this.config.manualActivation !== true || force) && (this.currentState === State.UNDETERMINED || this.currentState === State.BEGAN)) {\n      this.delegate.onActivate();\n      this.moveToState(State.ACTIVE);\n    }\n  }\n  end() {\n    if (this.currentState === State.BEGAN || this.currentState === State.ACTIVE) {\n      this.delegate.onEnd();\n      this.moveToState(State.END);\n    }\n    this.resetProgress();\n  }\n  isAwaiting() {\n    return this.awaiting;\n  }\n  setAwaiting(value) {\n    this.awaiting = value;\n  }\n  isActive() {\n    return this.active;\n  }\n  setActive(value) {\n    this.active = value;\n  }\n  getShouldResetProgress() {\n    return this.shouldResetProgress;\n  }\n  setShouldResetProgress(value) {\n    this.shouldResetProgress = value;\n  }\n  getActivationIndex() {\n    return this.activationIndex;\n  }\n  setActivationIndex(value) {\n    this.activationIndex = value;\n  }\n  shouldWaitForHandlerFailure(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(this, handler);\n  }\n  shouldRequireToWaitForFailure(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n  }\n  shouldRecognizeSimultaneously(handler) {\n    if (handler === this) {\n      return true;\n    }\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(this, handler);\n  }\n  shouldBeCancelledByOther(handler) {\n    if (handler === this) {\n      return false;\n    }\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(this, handler);\n  }\n  onPointerDown(event) {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n  }\n  onPointerAdd(event) {\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerUp(event) {\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerRemove(event) {\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerMove(event) {\n    this.tryToSendMoveEvent(false, event);\n  }\n  onPointerLeave(event) {\n    if (this.shouldCancelWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerEnter(event) {\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerCancel(event) {\n    this.tryToSendTouchEvent(event);\n    this.cancel();\n    this.reset();\n  }\n  onPointerOutOfBounds(event) {\n    this.tryToSendMoveEvent(true, event);\n  }\n  onPointerMoveOver(_event) {}\n  onPointerMoveOut(_event) {}\n  tryToSendMoveEvent(out, event) {\n    if (out && this.shouldCancelWhenOutside || !this.enabled) {\n      return;\n    }\n    if (this.active) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n    this.tryToSendTouchEvent(event);\n  }\n  tryToSendTouchEvent(event) {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n  sendTouchEvent(event) {\n    if (!this.enabled) {\n      return;\n    }\n    const {\n      onGestureHandlerEvent\n    } = this.propsRef.current;\n    const touchEvent = this.transformTouchEvent(event);\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n  transformEventData(newState, oldState) {\n    return {\n      nativeEvent: Object.assign({\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: this.delegate.isPointerInBounds(this.tracker.getAbsoluteCoordsAverage())\n      }, this.transformNativeEvent(), {\n        handlerTag: this.handlerTag,\n        target: this.viewRef,\n        oldState: newState !== oldState ? oldState : undefined,\n        pointerType: this.pointerType\n      }),\n      timeStamp: Date.now()\n    };\n  }\n  transformTouchEvent(event) {\n    var _event$touchEventType;\n    const rect = this.delegate.measureView();\n    const all = [];\n    const changed = [];\n    const trackerData = this.tracker.getData();\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n    trackerData.forEach((element, key) => {\n      const id = this.tracker.getMappedTouchEventId(key);\n      all.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y\n      });\n    });\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.pageX,\n        y: event.y - rect.pageY,\n        absoluteX: event.x,\n        absoluteY: event.y\n      });\n    } else {\n      trackerData.forEach((element, key) => {\n        const id = this.tracker.getMappedTouchEventId(key);\n        changed.push({\n          id: id,\n          x: element.abosoluteCoords.x - rect.pageX,\n          y: element.abosoluteCoords.y - rect.pageY,\n          absoluteX: element.abosoluteCoords.x,\n          absoluteY: element.abosoluteCoords.y\n        });\n      });\n    }\n    let eventType = TouchEventType.UNDETERMINED;\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n    let numberOfTouches = all.length;\n    if (event.eventType === EventTypes.UP || event.eventType === EventTypes.ADDITIONAL_POINTER_UP) {\n      --numberOfTouches;\n    }\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n        pointerType: this.pointerType\n      },\n      timeStamp: Date.now()\n    };\n  }\n  cancelTouches() {\n    const rect = this.delegate.measureView();\n    const all = [];\n    const changed = [];\n    const trackerData = this.tracker.getData();\n    if (trackerData.size === 0) {\n      return;\n    }\n    trackerData.forEach((element, key) => {\n      const id = this.tracker.getMappedTouchEventId(key);\n      all.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y\n      });\n      changed.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y\n      });\n    });\n    const cancelEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n        pointerType: this.pointerType\n      },\n      timeStamp: Date.now()\n    };\n    const {\n      onGestureHandlerEvent\n    } = this.propsRef.current;\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n  transformNativeEvent() {\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    const lastRelativeCoords = this.tracker.getRelativeCoordsAverage();\n    return {\n      x: lastRelativeCoords.x,\n      y: lastRelativeCoords.y,\n      absoluteX: lastCoords.x,\n      absoluteY: lastCoords.y\n    };\n  }\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    this.config = Object.assign({\n      enabled: enabled\n    }, props);\n    this.enabled = enabled;\n    this.delegate.onEnabledChange(enabled);\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n    this.validateHitSlops();\n    if (this.enabled) {\n      return;\n    }\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(this);\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n  checkCustomActivationCriteria(criterias) {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n  validateHitSlops() {\n    if (!this.config.hitSlop) {\n      return;\n    }\n    if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n      throw new Error('HitSlop Error: Cannot define left, right and width at the same time');\n    }\n    if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n      throw new Error('HitSlop Error: When width is defined, either left or right has to be defined');\n    }\n    if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n      throw new Error('HitSlop Error: Cannot define top, bottom and height at the same time');\n    }\n    if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n      throw new Error('HitSlop Error: When height is defined, either top or bottom has to be defined');\n    }\n  }\n  checkHitSlop() {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n    const {\n      width,\n      height\n    } = this.delegate.measureView();\n    let left = 0;\n    let top = 0;\n    let right = width;\n    let bottom = height;\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n    const rect = this.delegate.measureView();\n    const {\n      x,\n      y\n    } = this.tracker.getLastAbsoluteCoords();\n    const offsetX = x - rect.pageX;\n    const offsetY = y - rect.pageY;\n    return offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom;\n  }\n  isButtonInConfig(mouseButton) {\n    return !mouseButton || !this.config.mouseButton && mouseButton === MouseButton.LEFT || this.config.mouseButton && mouseButton & this.config.mouseButton;\n  }\n  resetConfig() {}\n  onDestroy() {\n    this.delegate.destroy(this.config);\n  }\n  getTag() {\n    return this.handlerTag;\n  }\n  setTag(tag) {\n    this.handlerTag = tag;\n  }\n  getConfig() {\n    return this.config;\n  }\n  getDelegate() {\n    return this.delegate;\n  }\n  getTracker() {\n    return this.tracker;\n  }\n  getTrackedPointersID() {\n    return this.tracker.getTrackedPointersID();\n  }\n  getState() {\n    return this.currentState;\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  isFinished() {\n    return this.currentState === State.END || this.currentState === State.FAILED || this.currentState === State.CANCELLED;\n  }\n  setShouldCancelWhenOutside(shouldCancel) {\n    this.shouldCancelWhenOutside = shouldCancel;\n  }\n  getShouldCancelWhenOutside() {\n    return this.shouldCancelWhenOutside;\n  }\n  getPointerType() {\n    return this.pointerType;\n  }\n}\nfunction invokeNullableMethod(method, event) {\n  if (!method) {\n    return;\n  }\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n  const {\n    argMapping\n  } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n    const nativeValue = event.nativeEvent[key];\n    if (value !== null && value !== void 0 && value.setValue) {\n      value.setValue(nativeValue);\n    } else {\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n  return;\n}","map":{"version":3,"names":["State","TouchEventType","EventTypes","GestureHandlerOrchestrator","InteractionManager","PointerTracker","MouseButton","PointerType","GestureHandler","constructor","delegate","_defineProperty","UNDETERMINED","enabled","MOUSE","newState","oldState","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","resultEvent","transformEventData","lastSentState","invokeNullableMethod","currentState","ACTIVE","nativeEvent","undefined","init","viewRef","attachEventManager","manager","setOnPointerDown","onPointerDown","bind","setOnPointerAdd","onPointerAdd","setOnPointerUp","onPointerUp","setOnPointerRemove","onPointerRemove","setOnPointerMove","onPointerMove","setOnPointerEnter","onPointerEnter","setOnPointerLeave","onPointerLeave","setOnPointerCancel","onPointerCancel","setOnPointerOutOfBounds","onPointerOutOfBounds","setOnPointerMoveOver","onPointerMoveOver","setOnPointerMoveOut","onPointerMoveOut","registerListeners","onCancel","onReset","resetProgress","reset","tracker","resetTracker","moveToState","sendIfDisabled","getTrackedPointersCount","config","needsPointerData","isFinished","cancelTouches","getInstance","onHandlerStateChange","onStateChange","_newState","_oldState","begin","checkHitSlop","BEGAN","fail","onFail","FAILED","cancel","CANCELLED","activate","force","manualActivation","onActivate","end","onEnd","END","isAwaiting","awaiting","setAwaiting","value","isActive","active","setActive","getShouldResetProgress","shouldResetProgress","setShouldResetProgress","getActivationIndex","activationIndex","setActivationIndex","shouldWaitForHandlerFailure","handler","shouldRequireToWaitForFailure","shouldRequireHandlerToWaitForFailure","shouldRecognizeSimultaneously","shouldBeCancelledByOther","shouldHandlerBeCancelledBy","event","recordHandlerIfNotPresent","pointerType","TOUCH","cancelMouseAndPenGestures","tryToSendTouchEvent","tryToSendMoveEvent","shouldCancelWhenOutside","_event","out","sendEvent","sendTouchEvent","touchEvent","transformTouchEvent","Object","assign","numberOfPointers","state","pointerInside","isPointerInBounds","getAbsoluteCoordsAverage","transformNativeEvent","handlerTag","target","timeStamp","Date","now","_event$touchEventType","rect","measureView","all","changed","trackerData","getData","size","has","pointerId","forEach","element","key","id","getMappedTouchEventId","push","x","abosoluteCoords","pageX","y","pageY","absoluteX","absoluteY","eventType","CANCEL","DOWN","ADDITIONAL_POINTER_DOWN","UP","ADDITIONAL_POINTER_UP","MOVE","numberOfTouches","length","touchEventType","changedTouches","allTouches","cancelEvent","lastCoords","lastRelativeCoords","getRelativeCoordsAverage","updateGestureConfig","_ref","props","_objectWithoutPropertiesLoose","_excluded","onEnabledChange","setShouldCancelWhenOutside","validateHitSlops","removeHandlerFromOrchestrator","checkCustomActivationCriteria","criterias","indexOf","hasCustomActivationCriteria","hitSlop","left","right","width","Error","height","top","bottom","horizontal","vertical","getLastAbsoluteCoords","offsetX","offsetY","isButtonInConfig","mouseButton","LEFT","resetConfig","onDestroy","destroy","getTag","setTag","tag","getConfig","getDelegate","getTracker","getTrackedPointersID","getState","isEnabled","shouldCancel","getShouldCancelWhenOutside","getPointerType","method","__getHandler","argMapping","__nodeConfig","Array","isArray","index","entries","nativeValue","setValue"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\handlers\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { State } from '../../State';\nimport {\n  Config,\n  AdaptedEvent,\n  PropsRef,\n  ResultEvent,\n  PointerData,\n  ResultTouchEvent,\n  TouchEventType,\n  EventTypes,\n} from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport GestureHandlerOrchestrator from '../tools/GestureHandlerOrchestrator';\nimport InteractionManager from '../tools/InteractionManager';\nimport PointerTracker, { TrackerElement } from '../tools/PointerTracker';\nimport IGestureHandler from './IGestureHandler';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { PointerType } from '../../PointerType';\nimport { GestureHandlerDelegate } from '../tools/GestureHandlerDelegate';\n\nexport default abstract class GestureHandler implements IGestureHandler {\n  private lastSentState: State | null = null;\n  protected currentState: State = State.UNDETERMINED;\n\n  protected shouldCancelWhenOutside = false;\n  protected hasCustomActivationCriteria = false;\n  protected enabled = false;\n\n  private viewRef!: number;\n  private propsRef!: React.RefObject<unknown>;\n  private handlerTag!: number;\n  protected config: Config = { enabled: false };\n\n  protected tracker: PointerTracker = new PointerTracker();\n\n  // Orchestrator properties\n  protected activationIndex = 0;\n  protected awaiting = false;\n  protected active = false;\n  protected shouldResetProgress = false;\n  protected pointerType: PointerType = PointerType.MOUSE;\n\n  protected delegate: GestureHandlerDelegate<unknown, IGestureHandler>;\n\n  public constructor(\n    delegate: GestureHandlerDelegate<unknown, IGestureHandler>\n  ) {\n    this.delegate = delegate;\n  }\n\n  //\n  // Initializing handler\n  //\n\n  protected init(viewRef: number, propsRef: React.RefObject<unknown>) {\n    this.propsRef = propsRef;\n    this.viewRef = viewRef;\n\n    this.currentState = State.UNDETERMINED;\n\n    this.delegate.init(viewRef, this);\n  }\n\n  public attachEventManager(manager: EventManager<unknown>): void {\n    manager.setOnPointerDown(this.onPointerDown.bind(this));\n    manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n    manager.setOnPointerUp(this.onPointerUp.bind(this));\n    manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n    manager.setOnPointerMove(this.onPointerMove.bind(this));\n    manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n    manager.setOnPointerLeave(this.onPointerLeave.bind(this));\n    manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n    manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n    manager.setOnPointerMoveOver(this.onPointerMoveOver.bind(this));\n    manager.setOnPointerMoveOut(this.onPointerMoveOut.bind(this));\n\n    manager.registerListeners();\n  }\n\n  //\n  // Resetting handler\n  //\n\n  protected onCancel(): void {}\n  protected onReset(): void {}\n  protected resetProgress(): void {}\n\n  public reset(): void {\n    this.tracker.resetTracker();\n    this.onReset();\n    this.resetProgress();\n    this.delegate.reset();\n    this.currentState = State.UNDETERMINED;\n  }\n\n  //\n  // State logic\n  //\n\n  public moveToState(newState: State, sendIfDisabled?: boolean) {\n    if (this.currentState === newState) {\n      return;\n    }\n\n    const oldState = this.currentState;\n    this.currentState = newState;\n\n    if (\n      this.tracker.getTrackedPointersCount() > 0 &&\n      this.config.needsPointerData &&\n      this.isFinished()\n    ) {\n      this.cancelTouches();\n    }\n\n    GestureHandlerOrchestrator.getInstance().onHandlerStateChange(\n      this,\n      newState,\n      oldState,\n      sendIfDisabled\n    );\n\n    this.onStateChange(newState, oldState);\n\n    if (!this.enabled && this.isFinished()) {\n      this.currentState = State.UNDETERMINED;\n    }\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {}\n\n  public begin(): void {\n    if (!this.checkHitSlop()) {\n      return;\n    }\n\n    if (this.currentState === State.UNDETERMINED) {\n      this.moveToState(State.BEGAN);\n    }\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */\n  public fail(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.BEGAN\n    ) {\n      // Here the order of calling the delegate and moveToState is important.\n      // At this point we can use currentState as previuos state, because immediately after changing cursor we call moveToState method.\n      this.delegate.onFail();\n\n      this.moveToState(State.FAILED, sendIfDisabled);\n    }\n\n    this.resetProgress();\n  }\n\n  /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */\n  public cancel(sendIfDisabled?: boolean): void {\n    if (\n      this.currentState === State.ACTIVE ||\n      this.currentState === State.UNDETERMINED ||\n      this.currentState === State.BEGAN\n    ) {\n      this.onCancel();\n\n      // Same as above - order matters\n      this.delegate.onCancel();\n\n      this.moveToState(State.CANCELLED, sendIfDisabled);\n    }\n  }\n\n  public activate(force = false) {\n    if (\n      (this.config.manualActivation !== true || force) &&\n      (this.currentState === State.UNDETERMINED ||\n        this.currentState === State.BEGAN)\n    ) {\n      this.delegate.onActivate();\n      this.moveToState(State.ACTIVE);\n    }\n  }\n\n  public end() {\n    if (\n      this.currentState === State.BEGAN ||\n      this.currentState === State.ACTIVE\n    ) {\n      // Same as above - order matters\n      this.delegate.onEnd();\n\n      this.moveToState(State.END);\n    }\n\n    this.resetProgress();\n  }\n\n  //\n  // Methods for orchestrator\n  //\n\n  public isAwaiting(): boolean {\n    return this.awaiting;\n  }\n  public setAwaiting(value: boolean): void {\n    this.awaiting = value;\n  }\n\n  public isActive(): boolean {\n    return this.active;\n  }\n  public setActive(value: boolean): void {\n    this.active = value;\n  }\n\n  public getShouldResetProgress(): boolean {\n    return this.shouldResetProgress;\n  }\n  public setShouldResetProgress(value: boolean): void {\n    this.shouldResetProgress = value;\n  }\n\n  public getActivationIndex(): number {\n    return this.activationIndex;\n  }\n  public setActivationIndex(value: number): void {\n    this.activationIndex = value;\n  }\n\n  public shouldWaitForHandlerFailure(handler: IGestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldWaitForHandlerFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRequireToWaitForFailure(handler: IGestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldRequireHandlerToWaitForFailure(\n      this,\n      handler\n    );\n  }\n\n  public shouldRecognizeSimultaneously(handler: IGestureHandler): boolean {\n    if (handler === this) {\n      return true;\n    }\n\n    return InteractionManager.getInstance().shouldRecognizeSimultaneously(\n      this,\n      handler\n    );\n  }\n\n  public shouldBeCancelledByOther(handler: IGestureHandler): boolean {\n    if (handler === this) {\n      return false;\n    }\n\n    return InteractionManager.getInstance().shouldHandlerBeCancelledBy(\n      this,\n      handler\n    );\n  }\n\n  //\n  // Event actions\n  //\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    GestureHandlerOrchestrator.getInstance().recordHandlerIfNotPresent(this);\n    this.pointerType = event.pointerType;\n\n    if (this.pointerType === PointerType.TOUCH) {\n      GestureHandlerOrchestrator.getInstance().cancelMouseAndPenGestures(this);\n    }\n\n    // TODO: Bring back touch events along with introducing `handleDown` method that will handle handler specific stuff\n  }\n  // Adding another pointer to existing ones\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerUp(event: AdaptedEvent): void {\n    this.tryToSendTouchEvent(event);\n  }\n  // Removing pointer, when there is more than one pointers\n  protected onPointerRemove(event: AdaptedEvent): void {\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(false, event);\n  }\n  protected onPointerLeave(event: AdaptedEvent): void {\n    if (this.shouldCancelWhenOutside) {\n      switch (this.currentState) {\n        case State.ACTIVE:\n          this.cancel();\n          break;\n        case State.BEGAN:\n          this.fail();\n          break;\n      }\n      return;\n    }\n\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerEnter(event: AdaptedEvent): void {\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerCancel(event: AdaptedEvent): void {\n    this.tryToSendTouchEvent(event);\n\n    this.cancel();\n    this.reset();\n  }\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    this.tryToSendMoveEvent(true, event);\n  }\n  protected onPointerMoveOver(_event: AdaptedEvent): void {\n    // Used only by hover gesture handler atm\n  }\n  protected onPointerMoveOut(_event: AdaptedEvent): void {\n    // Used only by hover gesture handler atm\n  }\n  private tryToSendMoveEvent(out: boolean, event: AdaptedEvent): void {\n    if ((out && this.shouldCancelWhenOutside) || !this.enabled) {\n      return;\n    }\n\n    if (this.active) {\n      this.sendEvent(this.currentState, this.currentState);\n    }\n\n    this.tryToSendTouchEvent(event);\n  }\n\n  protected tryToSendTouchEvent(event: AdaptedEvent): void {\n    if (this.config.needsPointerData) {\n      this.sendTouchEvent(event);\n    }\n  }\n\n  public sendTouchEvent(event: AdaptedEvent): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    const touchEvent: ResultTouchEvent | undefined =\n      this.transformTouchEvent(event);\n\n    if (touchEvent) {\n      invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n    }\n  }\n\n  //\n  // Events Sending\n  //\n\n  public sendEvent = (newState: State, oldState: State): void => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange }: PropsRef =\n      this.propsRef.current as PropsRef;\n\n    const resultEvent: ResultEvent = this.transformEventData(\n      newState,\n      oldState\n    );\n\n    // In the new API oldState field has to be undefined, unless we send event state changed\n    // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n    // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n    // However, this may cause trouble in the future (but for now we don't know that)\n\n    if (this.lastSentState !== newState) {\n      this.lastSentState = newState;\n      invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n    }\n    if (this.currentState === State.ACTIVE) {\n      resultEvent.nativeEvent.oldState = undefined;\n      invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n    }\n  };\n\n  private transformEventData(newState: State, oldState: State): ResultEvent {\n    return {\n      nativeEvent: {\n        numberOfPointers: this.tracker.getTrackedPointersCount(),\n        state: newState,\n        pointerInside: this.delegate.isPointerInBounds(\n          this.tracker.getAbsoluteCoordsAverage()\n        ),\n        ...this.transformNativeEvent(),\n        handlerTag: this.handlerTag,\n        target: this.viewRef,\n        oldState: newState !== oldState ? oldState : undefined,\n        pointerType: this.pointerType,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private transformTouchEvent(\n    event: AdaptedEvent\n  ): ResultTouchEvent | undefined {\n    const rect = this.delegate.measureView();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    // This if handles edge case where all pointers have been cancelled\n    // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n    // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n    // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n    if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y,\n      });\n    });\n\n    // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n    // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n    if (event.eventType !== EventTypes.CANCEL) {\n      changed.push({\n        id: this.tracker.getMappedTouchEventId(event.pointerId),\n        x: event.x - rect.pageX,\n        y: event.y - rect.pageY,\n        absoluteX: event.x,\n        absoluteY: event.y,\n      });\n    } else {\n      trackerData.forEach((element: TrackerElement, key: number): void => {\n        const id: number = this.tracker.getMappedTouchEventId(key);\n\n        changed.push({\n          id: id,\n          x: element.abosoluteCoords.x - rect.pageX,\n          y: element.abosoluteCoords.y - rect.pageY,\n          absoluteX: element.abosoluteCoords.x,\n          absoluteY: element.abosoluteCoords.y,\n        });\n      });\n    }\n\n    let eventType: TouchEventType = TouchEventType.UNDETERMINED;\n\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        eventType = TouchEventType.DOWN;\n        break;\n      case EventTypes.UP:\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        eventType = TouchEventType.UP;\n        break;\n      case EventTypes.MOVE:\n        eventType = TouchEventType.MOVE;\n        break;\n      case EventTypes.CANCEL:\n        eventType = TouchEventType.CANCELLED;\n        break;\n    }\n\n    // Here, when we receive up event, we want to decrease number of touches\n    // That's because we want handler to send information that there's one pointer less\n    // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n    let numberOfTouches: number = all.length;\n\n    if (\n      event.eventType === EventTypes.UP ||\n      event.eventType === EventTypes.ADDITIONAL_POINTER_UP\n    ) {\n      --numberOfTouches;\n    }\n\n    return {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: event.touchEventType ?? eventType,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: numberOfTouches,\n        pointerType: this.pointerType,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  private cancelTouches(): void {\n    const rect = this.delegate.measureView();\n\n    const all: PointerData[] = [];\n    const changed: PointerData[] = [];\n\n    const trackerData = this.tracker.getData();\n\n    if (trackerData.size === 0) {\n      return;\n    }\n\n    trackerData.forEach((element: TrackerElement, key: number): void => {\n      const id: number = this.tracker.getMappedTouchEventId(key);\n\n      all.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y,\n      });\n\n      changed.push({\n        id: id,\n        x: element.abosoluteCoords.x - rect.pageX,\n        y: element.abosoluteCoords.y - rect.pageY,\n        absoluteX: element.abosoluteCoords.x,\n        absoluteY: element.abosoluteCoords.y,\n      });\n    });\n\n    const cancelEvent: ResultTouchEvent = {\n      nativeEvent: {\n        handlerTag: this.handlerTag,\n        state: this.currentState,\n        eventType: TouchEventType.CANCELLED,\n        changedTouches: changed,\n        allTouches: all,\n        numberOfTouches: all.length,\n        pointerType: this.pointerType,\n      },\n      timeStamp: Date.now(),\n    };\n\n    const { onGestureHandlerEvent }: PropsRef = this.propsRef\n      .current as PropsRef;\n\n    invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n  }\n\n  protected transformNativeEvent(): Record<string, unknown> {\n    // Those properties are shared by most handlers and if not this method will be overriden\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    const lastRelativeCoords = this.tracker.getRelativeCoordsAverage();\n\n    return {\n      x: lastRelativeCoords.x,\n      y: lastRelativeCoords.y,\n      absoluteX: lastCoords.x,\n      absoluteY: lastCoords.y,\n    };\n  }\n\n  //\n  // Handling config\n  //\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    this.config = { enabled: enabled, ...props };\n    this.enabled = enabled;\n\n    this.delegate.onEnabledChange(enabled);\n\n    if (this.config.shouldCancelWhenOutside !== undefined) {\n      this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n    }\n\n    this.validateHitSlops();\n\n    if (this.enabled) {\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.ACTIVE:\n        this.fail(true);\n        break;\n      case State.UNDETERMINED:\n        GestureHandlerOrchestrator.getInstance().removeHandlerFromOrchestrator(\n          this\n        );\n        break;\n      default:\n        this.cancel(true);\n        break;\n    }\n  }\n\n  protected checkCustomActivationCriteria(criterias: string[]): void {\n    for (const key in this.config) {\n      if (criterias.indexOf(key) >= 0) {\n        this.hasCustomActivationCriteria = true;\n      }\n    }\n  }\n\n  private validateHitSlops(): void {\n    if (!this.config.hitSlop) {\n      return;\n    }\n\n    if (\n      this.config.hitSlop.left !== undefined &&\n      this.config.hitSlop.right !== undefined &&\n      this.config.hitSlop.width !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define left, right and width at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.width !== undefined &&\n      this.config.hitSlop.left === undefined &&\n      this.config.hitSlop.right === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When width is defined, either left or right has to be defined'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top !== undefined &&\n      this.config.hitSlop.bottom !== undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: Cannot define top, bottom and height at the same time'\n      );\n    }\n\n    if (\n      this.config.hitSlop.height !== undefined &&\n      this.config.hitSlop.top === undefined &&\n      this.config.hitSlop.bottom === undefined\n    ) {\n      throw new Error(\n        'HitSlop Error: When height is defined, either top or bottom has to be defined'\n      );\n    }\n  }\n\n  private checkHitSlop(): boolean {\n    if (!this.config.hitSlop) {\n      return true;\n    }\n\n    const { width, height } = this.delegate.measureView();\n\n    let left = 0;\n    let top = 0;\n    let right: number = width;\n    let bottom: number = height;\n\n    if (this.config.hitSlop.horizontal !== undefined) {\n      left -= this.config.hitSlop.horizontal;\n      right += this.config.hitSlop.horizontal;\n    }\n\n    if (this.config.hitSlop.vertical !== undefined) {\n      top -= this.config.hitSlop.vertical;\n      bottom += this.config.hitSlop.vertical;\n    }\n\n    if (this.config.hitSlop.left !== undefined) {\n      left = -this.config.hitSlop.left;\n    }\n\n    if (this.config.hitSlop.right !== undefined) {\n      right = width + this.config.hitSlop.right;\n    }\n\n    if (this.config.hitSlop.top !== undefined) {\n      top = -this.config.hitSlop.top;\n    }\n\n    if (this.config.hitSlop.bottom !== undefined) {\n      bottom = width + this.config.hitSlop.bottom;\n    }\n    if (this.config.hitSlop.width !== undefined) {\n      if (this.config.hitSlop.left !== undefined) {\n        right = left + this.config.hitSlop.width;\n      } else if (this.config.hitSlop.right !== undefined) {\n        left = right - this.config.hitSlop.width;\n      }\n    }\n\n    if (this.config.hitSlop.height !== undefined) {\n      if (this.config.hitSlop.top !== undefined) {\n        bottom = top + this.config.hitSlop.height;\n      } else if (this.config.hitSlop.bottom !== undefined) {\n        top = bottom - this.config.hitSlop.height;\n      }\n    }\n\n    const rect = this.delegate.measureView();\n    const { x, y } = this.tracker.getLastAbsoluteCoords();\n    const offsetX: number = x - rect.pageX;\n    const offsetY: number = y - rect.pageY;\n\n    return (\n      offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom\n    );\n  }\n\n  public isButtonInConfig(mouseButton: MouseButton | undefined) {\n    return (\n      !mouseButton ||\n      (!this.config.mouseButton && mouseButton === MouseButton.LEFT) ||\n      (this.config.mouseButton && mouseButton & this.config.mouseButton)\n    );\n  }\n\n  protected resetConfig(): void {}\n\n  public onDestroy(): void {\n    this.delegate.destroy(this.config);\n  }\n\n  //\n  // Getters and setters\n  //\n\n  public getTag(): number {\n    return this.handlerTag;\n  }\n\n  public setTag(tag: number): void {\n    this.handlerTag = tag;\n  }\n\n  public getConfig() {\n    return this.config;\n  }\n\n  public getDelegate(): GestureHandlerDelegate<unknown, IGestureHandler> {\n    return this.delegate;\n  }\n\n  public getTracker(): PointerTracker {\n    return this.tracker;\n  }\n\n  public getTrackedPointersID(): number[] {\n    return this.tracker.getTrackedPointersID();\n  }\n\n  public getState(): State {\n    return this.currentState;\n  }\n\n  public isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  private isFinished(): boolean {\n    return (\n      this.currentState === State.END ||\n      this.currentState === State.FAILED ||\n      this.currentState === State.CANCELLED\n    );\n  }\n\n  protected setShouldCancelWhenOutside(shouldCancel: boolean) {\n    this.shouldCancelWhenOutside = shouldCancel;\n  }\n\n  protected getShouldCancelWhenOutside(): boolean {\n    return this.shouldCancelWhenOutside;\n  }\n\n  public getPointerType(): PointerType {\n    return this.pointerType;\n  }\n}\n\nfunction invokeNullableMethod(\n  method:\n    | ((event: ResultEvent | ResultTouchEvent) => void)\n    | { __getHandler: () => (event: ResultEvent | ResultTouchEvent) => void }\n    | { __nodeConfig: { argMapping: unknown[] } },\n  event: ResultEvent | ResultTouchEvent\n): void {\n  if (!method) {\n    return;\n  }\n\n  if (typeof method === 'function') {\n    method(event);\n    return;\n  }\n\n  if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n    const handler = method.__getHandler();\n    invokeNullableMethod(handler, event);\n    return;\n  }\n\n  if (!('__nodeConfig' in method)) {\n    return;\n  }\n\n  const { argMapping }: { argMapping: unknown } = method.__nodeConfig;\n  if (!Array.isArray(argMapping)) {\n    return;\n  }\n\n  for (const [index, [key, value]] of argMapping.entries()) {\n    if (!(key in event.nativeEvent)) {\n      continue;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const nativeValue = event.nativeEvent[key];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (value?.setValue) {\n      // Reanimated API\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      value.setValue(nativeValue);\n    } else {\n      // RN Animated API\n      method.__nodeConfig.argMapping[index] = [key, nativeValue];\n    }\n  }\n\n  return;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}