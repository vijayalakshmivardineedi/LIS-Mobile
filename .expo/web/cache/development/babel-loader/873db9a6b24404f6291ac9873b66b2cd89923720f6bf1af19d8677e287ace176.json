{"ast":null,"code":"'use strict';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport '../layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { RNRenderer } from '../platform-specific/RNRenderer';\nimport { enableLayoutAnimations } from '../core';\nimport { SharedTransition, LayoutAnimationType } from '../layoutReanimation';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { removeFromPropsRegistry } from '../PropsRegistry';\nimport { getReduceMotionFromConfig } from '../animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport { SkipEnteringContext } from '../component/LayoutAnimationConfig';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport { flattenArray } from './utils';\nimport setAndForwardRef from './setAndForwardRef';\nimport { isFabric, isJest, isWeb, shouldBeUseWeb } from '../PlatformChecker';\nimport { InlinePropManager } from './InlinePropManager';\nimport { PropsFilter } from './PropsFilter';\nimport { startWebLayoutAnimation, tryActivateLayoutTransition, configureWebLayoutAnimations, getReducedMotionFromConfig, saveSnapshot } from '../layoutReanimation/web';\nimport { updateLayoutAnimations } from '../UpdateLayoutAnimations';\nimport { addHTMLMutationObserver } from '../layoutReanimation/web/domUtils';\nimport { getViewInfo } from './getViewInfo';\nimport { NativeEventsManager } from './NativeEventsManager';\nconst IS_WEB = isWeb();\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(style => style === null || style === void 0 ? void 0 : style.viewDescriptors);\n}\nlet id = 0;\nexport function createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`);\n  class AnimatedComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      _defineProperty(this, \"_styles\", null);\n      _defineProperty(this, \"_animatedProps\", void 0);\n      _defineProperty(this, \"_componentViewTag\", -1);\n      _defineProperty(this, \"_isFirstRender\", true);\n      _defineProperty(this, \"jestAnimatedStyle\", {\n        value: {}\n      });\n      _defineProperty(this, \"_component\", null);\n      _defineProperty(this, \"_sharedElementTransition\", null);\n      _defineProperty(this, \"_jsPropsUpdater\", new JSPropsUpdater());\n      _defineProperty(this, \"_InlinePropManager\", new InlinePropManager());\n      _defineProperty(this, \"_PropsFilter\", new PropsFilter());\n      _defineProperty(this, \"_NativeEventsManager\", void 0);\n      _defineProperty(this, \"_viewInfo\", void 0);\n      _defineProperty(this, \"context\", void 0);\n      _defineProperty(this, \"reanimatedID\", id++);\n      _defineProperty(this, \"_setComponentRef\", setAndForwardRef({\n        getForwardedRef: () => this.props.forwardedRef,\n        setLocalRef: ref => {\n          const tag = IS_WEB ? ref : findNodeHandle(ref);\n          this._componentViewTag = tag;\n          const {\n            layout,\n            entering,\n            exiting,\n            sharedTransitionTag\n          } = this.props;\n          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {\n            var _this$context;\n            if (!shouldBeUseWeb()) {\n              enableLayoutAnimations(true, false);\n            }\n            if (sharedTransitionTag) {\n              this._configureSharedTransition();\n            }\n            if (exiting && isFabric()) {\n              const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n              if (!reduceMotionInExiting) {\n                var _this$props;\n                updateLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting, (_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.style, AnimatedComponent.displayName));\n              }\n            }\n            const skipEntering = (_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.current;\n            if (entering && !skipEntering && !IS_WEB) {\n              var _this$props2;\n              updateLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering, (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.style, AnimatedComponent.displayName));\n            }\n          }\n          if (ref !== this._component) {\n            this._component = ref;\n          }\n        }\n      }));\n      if (isJest()) {\n        this.jestAnimatedStyle = {\n          value: {}\n        };\n      }\n      const _entering = this.props.entering;\n      if (_entering && isFabric()) {\n        var _this$props3;\n        updateLayoutAnimations(this.reanimatedID, LayoutAnimationType.ENTERING, maybeBuild(_entering, (_this$props3 = this.props) === null || _this$props3 === void 0 ? void 0 : _this$props3.style, AnimatedComponent.displayName));\n      }\n    }\n    componentDidMount() {\n      var _this$_NativeEventsMa;\n      this._componentViewTag = this._getComponentViewTag();\n      if (!IS_WEB) {\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      (_this$_NativeEventsMa = this._NativeEventsManager) === null || _this$_NativeEventsMa === void 0 || _this$_NativeEventsMa.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n      if (IS_WEB) {\n        if (this.props.exiting) {\n          saveSnapshot(this._component);\n        }\n        if (!this.props.entering || getReducedMotionFromConfig(this.props.entering)) {\n          this._isFirstRender = false;\n          return;\n        }\n        startWebLayoutAnimation(this.props, this._component, LayoutAnimationType.ENTERING);\n      }\n      this._isFirstRender = false;\n    }\n    componentWillUnmount() {\n      var _this$_NativeEventsMa2, _this$_sharedElementT;\n      (_this$_NativeEventsMa2 = this._NativeEventsManager) === null || _this$_NativeEventsMa2 === void 0 || _this$_NativeEventsMa2.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      (_this$_sharedElementT = this._sharedElementTransition) === null || _this$_sharedElementT === void 0 || _this$_sharedElementT.unregisterTransition(this._componentViewTag, true);\n      const exiting = this.props.exiting;\n      if (IS_WEB && this._component && exiting && !getReducedMotionFromConfig(exiting)) {\n        addHTMLMutationObserver();\n        startWebLayoutAnimation(this.props, this._component, LayoutAnimationType.EXITING);\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          var _this$props4;\n          updateLayoutAnimations(this._componentViewTag, LayoutAnimationType.EXITING, maybeBuild(exiting, (_this$props4 = this.props) === null || _this$props4 === void 0 ? void 0 : _this$props4.style, AnimatedComponent.displayName));\n        }\n      }\n    }\n    _getComponentViewTag() {\n      return this._getViewInfo().viewTag;\n    }\n    _detachStyles() {\n      if (this._componentViewTag !== -1 && this._styles !== null) {\n        var _this$props$animatedP;\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(this._componentViewTag);\n        }\n        if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(this._componentViewTag);\n        }\n        if (isFabric()) {\n          removeFromPropsRegistry(this._componentViewTag);\n        }\n      }\n    }\n    _updateFromNative(props) {\n      if (options !== null && options !== void 0 && options.setNativeProps) {\n        options.setNativeProps(this._component, props);\n      } else {\n        var _this$_component, _this$_component$setN;\n        (_this$_component = this._component) === null || _this$_component === void 0 || (_this$_component$setN = _this$_component.setNativeProps) === null || _this$_component$setN === void 0 || _this$_component$setN.call(_this$_component, props);\n      }\n    }\n    _getViewInfo() {\n      var _this$_component2, _getAnimatableRef, _ref;\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n      let viewTag;\n      let viewName;\n      let shadowNodeWrapper = null;\n      let viewConfig;\n      const component = (_this$_component2 = this._component) !== null && _this$_component2 !== void 0 && _this$_component2.getAnimatableRef ? (_getAnimatableRef = (_ref = this._component).getAnimatableRef) === null || _getAnimatableRef === void 0 ? void 0 : _getAnimatableRef.call(_ref) : this;\n      if (IS_WEB) {\n        viewTag = this._component;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n        if (!hostInstance) {\n          throw new Error('[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?');\n        }\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric() ? getShadowNodeWrapperFromRef(this) : null;\n      }\n      this._viewInfo = {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      };\n      return this._viewInfo;\n    }\n    _attachAnimatedStyles() {\n      var _this$props$animatedP2, _this$props$animatedP3;\n      const styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n      const {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      } = this._getViewInfo();\n      const hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n      this._componentViewTag = viewTag;\n      if (prevStyles) {\n        const hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && styles[0] === prevStyles[0];\n        if (!hasOneSameStyle) {\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some(style => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n      styles.forEach(style => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper\n        });\n        if (isJest()) {\n          this.jestAnimatedStyle.value = Object.assign({}, this.jestAnimatedStyle.value, style.initial.value);\n          style.jestAnimatedStyle.current = this.jestAnimatedStyle;\n        }\n      });\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors.remove(viewTag);\n      }\n      if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper: shadowNodeWrapper\n        });\n      }\n    }\n    componentDidUpdate(prevProps, _prevState, snapshot) {\n      var _this$_NativeEventsMa3;\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (this.props.sharedTransitionTag !== undefined || prevProps.sharedTransitionTag !== undefined) {\n        this._configureSharedTransition();\n      }\n      (_this$_NativeEventsMa3 = this._NativeEventsManager) === null || _this$_NativeEventsMa3 === void 0 || _this$_NativeEventsMa3.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      if (IS_WEB && this.props.exiting) {\n        saveSnapshot(this._component);\n      }\n      if (IS_WEB && snapshot !== null && this.props.layout && !getReducedMotionFromConfig(this.props.layout)) {\n        tryActivateLayoutTransition(this.props, this._component, snapshot);\n      }\n    }\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n      const layout = this.props.layout ? maybeBuild(this.props.layout, undefined, AnimatedComponent.displayName) : undefined;\n      updateLayoutAnimations(this._componentViewTag, LayoutAnimationType.LAYOUT, layout);\n    }\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n      const {\n        sharedTransitionTag\n      } = this.props;\n      if (!sharedTransitionTag) {\n        var _this$_sharedElementT2;\n        (_this$_sharedElementT2 = this._sharedElementTransition) === null || _this$_sharedElementT2 === void 0 || _this$_sharedElementT2.unregisterTransition(this._componentViewTag, isUnmounting);\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition = this.props.sharedTransitionStyle ?? this._sharedElementTransition ?? new SharedTransition();\n      sharedElementTransition.registerTransition(this._componentViewTag, sharedTransitionTag, isUnmounting);\n      this._sharedElementTransition = sharedElementTransition;\n    }\n    getSnapshotBeforeUpdate() {\n      var _this$_component3;\n      if (IS_WEB && ((_this$_component3 = this._component) === null || _this$_component3 === void 0 ? void 0 : _this$_component3.getBoundingClientRect) !== undefined) {\n        return this._component.getBoundingClientRect();\n      }\n      return null;\n    }\n    render() {\n      var _this$context2;\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n      if (isJest()) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n      }\n      if (this._isFirstRender && IS_WEB && filteredProps.entering && !getReducedMotionFromConfig(filteredProps.entering)) {\n        filteredProps.style = Object.assign({}, filteredProps.style ?? {}, {\n          visibility: 'hidden'\n        });\n      }\n      const platformProps = Platform.select({\n        web: {},\n        default: {\n          collapsable: false\n        }\n      });\n      const skipEntering = (_this$context2 = this.context) === null || _this$context2 === void 0 ? void 0 : _this$context2.current;\n      const nativeID = skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n      return React.createElement(Component, _extends({\n        nativeID: nativeID\n      }, filteredProps, {\n        ref: this._setComponentRef\n      }, platformProps));\n    }\n  }\n  _defineProperty(AnimatedComponent, \"displayName\", void 0);\n  _defineProperty(AnimatedComponent, \"contextType\", SkipEnteringContext);\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;\n  return React.forwardRef((props, ref) => {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperty","obj","value","_toPropertyKey","defineProperty","enumerable","configurable","writable","t","_toPrimitive","r","e","Symbol","toPrimitive","TypeError","String","Number","React","findNodeHandle","Platform","invariant","adaptViewConfig","RNRenderer","enableLayoutAnimations","SharedTransition","LayoutAnimationType","getShadowNodeWrapperFromRef","removeFromPropsRegistry","getReduceMotionFromConfig","maybeBuild","SkipEnteringContext","JSPropsUpdater","flattenArray","setAndForwardRef","isFabric","isJest","isWeb","shouldBeUseWeb","InlinePropManager","PropsFilter","startWebLayoutAnimation","tryActivateLayoutTransition","configureWebLayoutAnimations","getReducedMotionFromConfig","saveSnapshot","updateLayoutAnimations","addHTMLMutationObserver","getViewInfo","NativeEventsManager","IS_WEB","onlyAnimatedStyles","styles","filter","style","viewDescriptors","id","createAnimatedComponent","Component","options","isReactComponent","name","AnimatedComponent","constructor","props","getForwardedRef","forwardedRef","setLocalRef","ref","tag","_componentViewTag","layout","entering","exiting","sharedTransitionTag","_this$context","_configureSharedTransition","reduceMotionInExiting","getReduceMotion","_this$props","EXITING","displayName","skipEntering","context","current","_this$props2","ENTERING","_component","jestAnimatedStyle","_entering","_this$props3","reanimatedID","componentDidMount","_this$_NativeEventsMa","_getComponentViewTag","_NativeEventsManager","attachEvents","_jsPropsUpdater","addOnJSPropsChangeListener","_attachAnimatedStyles","_InlinePropManager","attachInlineProps","_getViewInfo","_configureLayoutTransition","_isFirstRender","componentWillUnmount","_this$_NativeEventsMa2","_this$_sharedElementT","detachEvents","removeOnJSPropsChangeListener","_detachStyles","detachInlineProps","_sharedElementTransition","unregisterTransition","_this$props4","viewTag","_styles","_this$props$animatedP","remove","animatedProps","_updateFromNative","setNativeProps","_this$_component","_this$_component$setN","_this$_component2","_getAnimatableRef","_ref","_viewInfo","undefined","viewName","shadowNodeWrapper","viewConfig","component","getAnimatableRef","hostInstance","findHostInstance_DEPRECATED","Error","viewInfo","_this$props$animatedP2","_this$props$animatedP3","prevStyles","prevAnimatedProps","_animatedProps","hasReanimated2Props","hasOneSameStyle","prevStyle","isPresent","some","forEach","add","initial","componentDidUpdate","prevProps","_prevState","snapshot","_this$_NativeEventsMa3","oldLayout","updateEvents","LAYOUT","isUnmounting","_this$_sharedElementT2","sharedElementTransition","sharedTransitionStyle","registerTransition","getSnapshotBeforeUpdate","_this$_component3","getBoundingClientRect","render","_this$context2","filteredProps","_PropsFilter","filterNonAnimatedProps","visibility","platformProps","select","web","default","collapsable","nativeID","createElement","_setComponentRef","forwardRef"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-reanimated\\lib\\module\\createAnimatedComponent\\createAnimatedComponent.tsx"],"sourcesContent":["'use strict';\nimport type {\n  Component,\n  ComponentClass,\n  ComponentType,\n  FunctionComponent,\n  MutableRefObject,\n} from 'react';\nimport React from 'react';\nimport { findNodeHandle, Platform } from 'react-native';\nimport '../layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { RNRenderer } from '../platform-specific/RNRenderer';\nimport { enableLayoutAnimations } from '../core';\nimport { SharedTransition, LayoutAnimationType } from '../layoutReanimation';\nimport type { StyleProps, ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { removeFromPropsRegistry } from '../PropsRegistry';\nimport { getReduceMotionFromConfig } from '../animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport { SkipEnteringContext } from '../component/LayoutAnimationConfig';\nimport type { AnimateProps } from '../helperTypes';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport type {\n  AnimatedComponentProps,\n  AnimatedProps,\n  InitialComponentProps,\n  AnimatedComponentRef,\n  IAnimatedComponentInternal,\n  ViewInfo,\n  INativeEventsManager,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport setAndForwardRef from './setAndForwardRef';\nimport { isFabric, isJest, isWeb, shouldBeUseWeb } from '../PlatformChecker';\nimport { InlinePropManager } from './InlinePropManager';\nimport { PropsFilter } from './PropsFilter';\nimport {\n  startWebLayoutAnimation,\n  tryActivateLayoutTransition,\n  configureWebLayoutAnimations,\n  getReducedMotionFromConfig,\n  saveSnapshot,\n} from '../layoutReanimation/web';\nimport { updateLayoutAnimations } from '../UpdateLayoutAnimations';\nimport type { CustomConfig } from '../layoutReanimation/web/config';\nimport type { FlatList, FlatListProps } from 'react-native';\nimport { addHTMLMutationObserver } from '../layoutReanimation/web/domUtils';\nimport { getViewInfo } from './getViewInfo';\nimport { NativeEventsManager } from './NativeEventsManager';\nimport type { ReanimatedHTMLElement } from '../js-reanimated';\n\nconst IS_WEB = isWeb();\n\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\n\nfunction onlyAnimatedStyles(styles: StyleProps[]): StyleProps[] {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\ntype Options<P> = {\n  setNativeProps: (ref: AnimatedComponentRef, props: P) => void;\n};\n\n/**\n * Lets you create an Animated version of any React Native component.\n *\n * @param component - The component you want to make animatable.\n * @returns A component that Reanimated is capable of animating.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent\n */\n\n// Don't change the order of overloads, since such a change breaks current behavior\nexport function createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>,\n  options?: Options<P>\n): ComponentClass<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  // Actually ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P> but we need this overload too\n  // since some external components (like FastImage) are typed just as ComponentType\n  component: ComponentType<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>> | ComponentClass<AnimateProps<P>>;\n\n/**\n * @deprecated Please use `Animated.FlatList` component instead of calling `Animated.createAnimatedComponent(FlatList)` manually.\n */\n// @ts-ignore This is required to create this overload, since type of createAnimatedComponent is incorrect and doesn't include typeof FlatList\nexport function createAnimatedComponent(\n  component: typeof FlatList<unknown>,\n  options?: Options<any>\n): ComponentClass<AnimateProps<FlatListProps<unknown>>>;\n\nlet id = 0;\n\nexport function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): any {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`\n  );\n\n  class AnimatedComponent\n    extends React.Component<AnimatedComponentProps<InitialComponentProps>>\n    implements IAnimatedComponentInternal\n  {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _componentViewTag = -1;\n    _isFirstRender = true;\n    jestAnimatedStyle: { value: StyleProps } = { value: {} };\n    _component: AnimatedComponentRef | HTMLElement | null = null;\n    _sharedElementTransition: SharedTransition | null = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    _NativeEventsManager?: INativeEventsManager;\n    _viewInfo?: ViewInfo;\n    static displayName: string;\n    static contextType = SkipEnteringContext;\n    context!: React.ContextType<typeof SkipEnteringContext>;\n    reanimatedID = id++;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (isJest()) {\n        this.jestAnimatedStyle = { value: {} };\n      }\n      const entering = this.props.entering;\n      if (entering && isFabric()) {\n        updateLayoutAnimations(\n          this.reanimatedID,\n          LayoutAnimationType.ENTERING,\n          maybeBuild(entering, this.props?.style, AnimatedComponent.displayName)\n        );\n      }\n    }\n\n    componentDidMount() {\n      this._componentViewTag = this._getComponentViewTag();\n      if (!IS_WEB) {\n        // It exists only on native platforms. We initialize it here because the ref to the animated component is available only post-mount\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      this._NativeEventsManager?.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n\n      if (IS_WEB) {\n        if (this.props.exiting) {\n          saveSnapshot(this._component as HTMLElement);\n        }\n\n        if (\n          !this.props.entering ||\n          getReducedMotionFromConfig(this.props.entering as CustomConfig)\n        ) {\n          this._isFirstRender = false;\n          return;\n        }\n\n        startWebLayoutAnimation(\n          this.props,\n          this._component as ReanimatedHTMLElement,\n          LayoutAnimationType.ENTERING\n        );\n      }\n\n      this._isFirstRender = false;\n    }\n\n    componentWillUnmount() {\n      this._NativeEventsManager?.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      this._sharedElementTransition?.unregisterTransition(\n        this._componentViewTag,\n        true\n      );\n\n      const exiting = this.props.exiting;\n\n      if (\n        IS_WEB &&\n        this._component &&\n        exiting &&\n        !getReducedMotionFromConfig(exiting as CustomConfig)\n      ) {\n        addHTMLMutationObserver();\n\n        startWebLayoutAnimation(\n          this.props,\n          this._component as ReanimatedHTMLElement,\n          LayoutAnimationType.EXITING\n        );\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting =\n          'getReduceMotion' in exiting &&\n          typeof exiting.getReduceMotion === 'function'\n            ? getReduceMotionFromConfig(exiting.getReduceMotion())\n            : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          updateLayoutAnimations(\n            this._componentViewTag,\n            LayoutAnimationType.EXITING,\n            maybeBuild(\n              exiting,\n              this.props?.style,\n              AnimatedComponent.displayName\n            )\n          );\n        }\n      }\n    }\n\n    _getComponentViewTag() {\n      return this._getViewInfo().viewTag as number;\n    }\n\n    _detachStyles() {\n      if (this._componentViewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(this._componentViewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(\n            this._componentViewTag\n          );\n        }\n        if (isFabric()) {\n          removeFromPropsRegistry(this._componentViewTag);\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        options.setNativeProps(this._component as AnimatedComponentRef, props);\n      } else {\n        (this._component as AnimatedComponentRef)?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo(): ViewInfo {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n\n      let viewTag: number | HTMLElement | null;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n      // Component can specify ref which should be animated when animated version of the component is created.\n      // Otherwise, we animate the component itself.\n      const component = (this._component as AnimatedComponentRef)\n        ?.getAnimatableRef\n        ? (this._component as AnimatedComponentRef).getAnimatableRef?.()\n        : this;\n\n      if (IS_WEB) {\n        // At this point I assume that `_setComponentRef` was already called and `_component` is set.\n        // `this._component` on web represents HTMLElement of our component, that's why we use casting\n        viewTag = this._component as HTMLElement;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(component);\n        if (!hostInstance) {\n          throw new Error(\n            '[Reanimated] Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric()\n          ? getShadowNodeWrapperFromRef(this)\n          : null;\n      }\n      this._viewInfo = { viewTag, viewName, shadowNodeWrapper, viewConfig };\n      return this._viewInfo;\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      this._componentViewTag = viewTag as number;\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          styles[0] === prevStyles[0];\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (isJest()) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just props object\n           * with the updateProps() function where we update the properties of the component.\n           * We can't update props object directly because TestObject contains a copy of props - look at render function:\n           * const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.jestAnimatedStyle.value = {\n            ...this.jestAnimatedStyle.value,\n            ...style.initial.value,\n          };\n          style.jestAnimatedStyle.current = this.jestAnimatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>,\n      _prevState: Readonly<unknown>,\n      // This type comes straight from React\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      snapshot: DOMRect | null\n    ) {\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (\n        this.props.sharedTransitionTag !== undefined ||\n        prevProps.sharedTransitionTag !== undefined\n      ) {\n        this._configureSharedTransition();\n      }\n      this._NativeEventsManager?.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      if (IS_WEB && this.props.exiting) {\n        saveSnapshot(this._component as HTMLElement);\n      }\n\n      // Snapshot won't be undefined because it comes from getSnapshotBeforeUpdate method\n      if (\n        IS_WEB &&\n        snapshot !== null &&\n        this.props.layout &&\n        !getReducedMotionFromConfig(this.props.layout as CustomConfig)\n      ) {\n        tryActivateLayoutTransition(\n          this.props,\n          this._component as ReanimatedHTMLElement,\n          snapshot\n        );\n      }\n    }\n\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n\n      const layout = this.props.layout\n        ? maybeBuild(\n            this.props.layout,\n            undefined /* We don't have to warn user if style has common properties with animation for LAYOUT */,\n            AnimatedComponent.displayName\n          )\n        : undefined;\n      updateLayoutAnimations(\n        this._componentViewTag,\n        LayoutAnimationType.LAYOUT,\n        layout\n      );\n    }\n\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n\n      const { sharedTransitionTag } = this.props;\n      if (!sharedTransitionTag) {\n        this._sharedElementTransition?.unregisterTransition(\n          this._componentViewTag,\n          isUnmounting\n        );\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition =\n        this.props.sharedTransitionStyle ??\n        this._sharedElementTransition ??\n        new SharedTransition();\n      sharedElementTransition.registerTransition(\n        this._componentViewTag,\n        sharedTransitionTag,\n        isUnmounting\n      );\n      this._sharedElementTransition = sharedElementTransition;\n    }\n\n    _setComponentRef = setAndForwardRef<Component | HTMLElement>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as MutableRefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        // TODO update config\n\n        const tag = IS_WEB\n          ? (ref as HTMLElement)\n          : findNodeHandle(ref as Component);\n\n        this._componentViewTag = tag as number;\n\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (\n          (layout || entering || exiting || sharedTransitionTag) &&\n          tag != null\n        ) {\n          if (!shouldBeUseWeb()) {\n            enableLayoutAnimations(true, false);\n          }\n\n          if (sharedTransitionTag) {\n            this._configureSharedTransition();\n          }\n          if (exiting && isFabric()) {\n            const reduceMotionInExiting =\n              'getReduceMotion' in exiting &&\n              typeof exiting.getReduceMotion === 'function'\n                ? getReduceMotionFromConfig(exiting.getReduceMotion())\n                : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              updateLayoutAnimations(\n                tag as number,\n                LayoutAnimationType.EXITING,\n                maybeBuild(\n                  exiting,\n                  this.props?.style,\n                  AnimatedComponent.displayName\n                )\n              );\n            }\n          }\n\n          const skipEntering = this.context?.current;\n          if (entering && !skipEntering && !IS_WEB) {\n            updateLayoutAnimations(\n              tag as number,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(\n                entering,\n                this.props?.style,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n        }\n\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n      },\n    });\n\n    // This is a component lifecycle method from React, therefore we are not calling it directly.\n    // It is called before the component gets rerendered. This way we can access components' position before it changed\n    // and later on, in componentDidUpdate, calculate translation for layout transition.\n    getSnapshotBeforeUpdate() {\n      if (\n        IS_WEB &&\n        (this._component as HTMLElement)?.getBoundingClientRect !== undefined\n      ) {\n        return (this._component as HTMLElement).getBoundingClientRect();\n      }\n\n      return null;\n    }\n\n    render() {\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n\n      if (isJest()) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n      }\n\n      // Layout animations on web are set inside `componentDidMount` method, which is called after first render.\n      // Because of that we can encounter a situation in which component is visible for a short amount of time, and later on animation triggers.\n      // I've tested that on various browsers and devices and it did not happen to me. To be sure that it won't happen to someone else,\n      // I've decided to hide component at first render. Its visibility is reset in `componentDidMount`.\n      if (\n        this._isFirstRender &&\n        IS_WEB &&\n        filteredProps.entering &&\n        !getReducedMotionFromConfig(filteredProps.entering as CustomConfig)\n      ) {\n        filteredProps.style = {\n          ...(filteredProps.style ?? {}),\n          visibility: 'hidden', // Hide component until `componentDidMount` triggers\n        };\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n\n      const skipEntering = this.context?.current;\n      const nativeID =\n        skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n\n      return (\n        <Component\n          nativeID={nativeID}\n          {...filteredProps}\n          // Casting is used here, because ref can be null - in that case it cannot be assigned to HTMLElement.\n          // After spending some time trying to figure out what to do with this problem, we decided to leave it this way\n          ref={this._setComponentRef as (ref: Component) => void}\n          {...platformProps}\n        />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef<Component>((props, ref) => {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}