{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"tabBar\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { CommonActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport MaterialTopTabBar from './MaterialTopTabBar';\nexport default function MaterialTopTabView(_ref) {\n  let {\n      tabBar = props => React.createElement(MaterialTopTabBar, props),\n      state,\n      navigation,\n      descriptors,\n      sceneContainerStyle\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const {\n    colors\n  } = useTheme();\n  const renderTabBar = props => {\n    return tabBar(Object.assign({}, props, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n  return React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: index => navigation.dispatch(Object.assign({}, CommonActions.navigate({\n      name: state.routes[index].name,\n      merge: true\n    }), {\n      target: state.key\n    })),\n    renderScene: _ref2 => {\n      let {\n        route\n      } = _ref2;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderLazyPlaceholder: _ref3 => {\n      var _descriptors$route$ke, _descriptors$route$ke2;\n      let {\n        route\n      } = _ref3;\n      return ((_descriptors$route$ke = (_descriptors$route$ke2 = descriptors[route.key].options).lazyPlaceholder) === null || _descriptors$route$ke === void 0 ? void 0 : _descriptors$route$ke.call(_descriptors$route$ke2)) ?? null;\n    },\n    lazy: _ref4 => {\n      let {\n        route\n      } = _ref4;\n      return descriptors[route.key].options.lazy === true;\n    },\n    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,\n    swipeEnabled: focusedOptions.swipeEnabled,\n    animationEnabled: focusedOptions.animationEnabled,\n    onSwipeStart: () => navigation.emit({\n      type: 'swipeStart'\n    }),\n    onSwipeEnd: () => navigation.emit({\n      type: 'swipeEnd'\n    }),\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  }));\n}","map":{"version":3,"names":["CommonActions","useTheme","React","TabView","MaterialTopTabBar","MaterialTopTabView","_ref","tabBar","props","createElement","state","navigation","descriptors","sceneContainerStyle","rest","_objectWithoutPropertiesLoose","_excluded","colors","renderTabBar","Object","assign","focusedOptions","routes","index","key","options","_extends","onIndexChange","dispatch","navigate","name","merge","target","renderScene","_ref2","route","render","navigationState","renderLazyPlaceholder","_ref3","_descriptors$route$ke","_descriptors$route$ke2","lazyPlaceholder","call","lazy","_ref4","lazyPreloadDistance","swipeEnabled","animationEnabled","onSwipeStart","emit","type","onSwipeEnd","backgroundColor","background"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\@react-navigation\\material-top-tabs\\src\\views\\MaterialTopTabView.tsx"],"sourcesContent":["import {\n  CommonActions,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\n\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  return (\n    <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      lazyPreloadDistance={focusedOptions.lazyPreloadDistance}\n      swipeEnabled={focusedOptions.swipeEnabled}\n      animationEnabled={focusedOptions.animationEnabled}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SACEA,aAAa,EAIbC,QAAQ,QACH,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAA6BC,OAAO,QAAQ,uBAAuB;AAQnE,OAAOC,iBAAiB,MAAM,qBAAqB;AAQnD,eAAe,SAASC,kBAAkBA,CAAAC,IAAA,EAOhC;EAAA,IAPiC;MACzCC,MAAM,GAAIC,KAA6B,IAAKN,KAAA,CAAAO,aAAA,CAACL,iBAAiB,EAAKI,KAAK,CAAI;MAC5EE,KAAK;MACLC,UAAU;MACVC,WAAW;MACXC;IAEK,CAAC,GAAAP,IAAA;IADHQ,IAAA,GAAAC,6BAAA,CACGT,IAAA,EAAAU,SAAA;EACN,MAAM;IAAEC;EAAO,CAAC,GAAGhB,QAAQ,EAAE;EAE7B,MAAMiB,YAAY,GAAIV,KAAyB,IAAK;IAClD,OAAOD,MAAM,CAAAY,MAAA,CAAAC,MAAA,KACRZ,KAAK;MACRE,KAAK,EAAEA,KAAK;MACZC,UAAU,EAAEA,UAAU;MACtBC,WAAW,EAAEA;IAAA,EACd,CAAC;EACJ,CAAC;EAED,MAAMS,cAAc,GAAGT,WAAW,CAACF,KAAK,CAACY,MAAM,CAACZ,KAAK,CAACa,KAAK,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO;EAEzE,OACEvB,KAAA,CAAAO,aAAA,CAACN,OAAO,EAAAuB,QAAA,KACFZ,IAAI;IACRa,aAAa,EAAGJ,KAAK,IACnBZ,UAAU,CAACiB,QAAQ,CAAAT,MAAA,CAAAC,MAAA,KACdpB,aAAa,CAAC6B,QAAQ,CAAC;MACxBC,IAAI,EAAEpB,KAAK,CAACY,MAAM,CAACC,KAAK,CAAC,CAACO,IAAI;MAC9BC,KAAK,EAAE;IACT,CAAC,CAAC;MACFC,MAAM,EAAEtB,KAAK,CAACc;IAAA,EACf,CACF;IACDS,WAAW,EAAEC,KAAA;MAAA,IAAC;QAAEC;MAAM,CAAC,GAAAD,KAAA;MAAA,OAAKtB,WAAW,CAACuB,KAAK,CAACX,GAAG,CAAC,CAACY,MAAM,EAAE;IAAA,CAAC;IAC5DC,eAAe,EAAE3B,KAAM;IACvBQ,YAAY,EAAEA,YAAa;IAC3BoB,qBAAqB,EAAEC,KAAA;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAAA,IAAC;QAAEN;MAAM,CAAC,GAAAI,KAAA;MAAA,OAC/B,EAAAC,qBAAA,IAAAC,sBAAA,GAAA7B,WAAW,CAACuB,KAAK,CAACX,GAAG,CAAC,CAACC,OAAO,EAACiB,eAAe,cAAAF,qBAAA,uBAA9CA,qBAAA,CAAAG,IAAA,CAAAF,sBAAA,CAAkD,KAAI,IAAI;IAAA,CAC3D;IACDG,IAAI,EAAEC,KAAA;MAAA,IAAC;QAAEV;MAAM,CAAC,GAAAU,KAAA;MAAA,OAAKjC,WAAW,CAACuB,KAAK,CAACX,GAAG,CAAC,CAACC,OAAO,CAACmB,IAAI,KAAK,IAAI;IAAA,CAAC;IAClEE,mBAAmB,EAAEzB,cAAc,CAACyB,mBAAoB;IACxDC,YAAY,EAAE1B,cAAc,CAAC0B,YAAa;IAC1CC,gBAAgB,EAAE3B,cAAc,CAAC2B,gBAAiB;IAClDC,YAAY,EAAEA,CAAA,KAAMtC,UAAU,CAACuC,IAAI,CAAC;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAE;IAC5DC,UAAU,EAAEA,CAAA,KAAMzC,UAAU,CAACuC,IAAI,CAAC;MAAEC,IAAI,EAAE;IAAW,CAAC,CAAE;IACxDtC,mBAAmB,EAAE,CACnB;MAAEwC,eAAe,EAAEpC,MAAM,CAACqC;IAAW,CAAC,EACtCzC,mBAAmB;EACnB,GACF;AAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}