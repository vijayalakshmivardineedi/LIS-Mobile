{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"messagesContainerStyle\"];\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\GiftedChat.js\";\nimport React, { createRef, useEffect, useMemo, useRef, useState, useCallback } from 'react';\nimport { ActionSheetProvider } from '@expo/react-native-action-sheet';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { Actions } from './Actions';\nimport { Avatar } from './Avatar';\nimport Bubble from './Bubble';\nimport { Composer } from './Composer';\nimport { MAX_COMPOSER_HEIGHT, MIN_COMPOSER_HEIGHT, TEST_ID } from './Constant';\nimport { Day } from './Day';\nimport GiftedAvatar from './GiftedAvatar';\nimport { GiftedChatContext } from './GiftedChatContext';\nimport { InputToolbar } from './InputToolbar';\nimport { LoadEarlier } from './LoadEarlier';\nimport Message from './Message';\nimport MessageContainer from './MessageContainer';\nimport { MessageImage } from './MessageImage';\nimport { MessageText } from './MessageText';\nimport { Send } from './Send';\nimport { SystemMessage } from './SystemMessage';\nimport { Time } from './Time';\nimport * as utils from './utils';\nimport Animated, { useAnimatedKeyboard, useAnimatedStyle, useAnimatedReaction, useSharedValue, withTiming, runOnJS } from 'react-native-reanimated';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndayjs.extend(localizedFormat);\nconst _worklet_8032004415178_init_data = {\n  code: \"function GiftedChatJs1(){const{keyboard,keyboardOffsetBottom}=this.__closure;return{transform:[{translateY:-keyboard.height.value+keyboardOffsetBottom.value}]};}\",\n  location: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\GiftedChat.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"GiftedChatJs1\\\",\\\"keyboard\\\",\\\"keyboardOffsetBottom\\\",\\\"__closure\\\",\\\"transform\\\",\\\"translateY\\\",\\\"height\\\",\\\"value\\\"],\\\"sources\\\":[\\\"C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-gifted-chat/lib/GiftedChat.js\\\"],\\\"mappings\\\":\\\"AA8C8C,SAAAA,cAAA,QAAAC,QAAA,CAAAC,oBAAA,OAAAC,SAAA,OAAO,CAC7CC,SAAS,CAAE,CACP,CAAEC,UAAU,CAAE,CAACJ,QAAQ,CAACK,MAAM,CAACC,KAAK,CAAGL,oBAAoB,CAACK,KAAM,CAAC,CAE3E,CAAC\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.15.1\"\n};\nconst _worklet_3596830648403_init_data = {\n  code: \"function GiftedChatJs2(){const{keyboard}=this.__closure;return keyboard.height.value;}\",\n  location: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\GiftedChat.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"GiftedChatJs2\\\",\\\"keyboard\\\",\\\"__closure\\\",\\\"height\\\",\\\"value\\\"],\\\"sources\\\":[\\\"C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-gifted-chat/lib/GiftedChat.js\\\"],\\\"mappings\\\":\\\"AAuOwB,SAAAA,cAAA,QAAAC,QAAA,OAAAC,SAAA,OAAM,CAAAD,QAAS,CAAAE,MAAO,CAAAC,KAAA\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.15.1\"\n};\nconst _worklet_5636965432625_init_data = {\n  code: \"function GiftedChatJs3(value,prevValue){const{trackingKeyboardMovement,keyboardOffsetBottom,withTiming,insets,runOnJS,handleTextInputFocusWhenKeyboardShow,handleTextInputFocusWhenKeyboardHide,enableTyping,disableTyping,debounceEnableTyping}=this.__closure;if(prevValue&&value!==prevValue){const isKeyboardMovingUp=value>prevValue;if(isKeyboardMovingUp!==trackingKeyboardMovement.value){trackingKeyboardMovement.value=isKeyboardMovingUp;keyboardOffsetBottom.value=withTiming(isKeyboardMovingUp?insets.bottom:0,{duration:400});if(isKeyboardMovingUp)runOnJS(handleTextInputFocusWhenKeyboardShow)();else runOnJS(handleTextInputFocusWhenKeyboardHide)();if(value===0){runOnJS(enableTyping)();}else{runOnJS(disableTyping)();runOnJS(debounceEnableTyping)();}}}}\",\n  location: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\GiftedChat.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"GiftedChatJs3\\\",\\\"value\\\",\\\"prevValue\\\",\\\"trackingKeyboardMovement\\\",\\\"keyboardOffsetBottom\\\",\\\"withTiming\\\",\\\"insets\\\",\\\"runOnJS\\\",\\\"handleTextInputFocusWhenKeyboardShow\\\",\\\"handleTextInputFocusWhenKeyboardHide\\\",\\\"enableTyping\\\",\\\"disableTyping\\\",\\\"debounceEnableTyping\\\",\\\"__closure\\\",\\\"isKeyboardMovingUp\\\",\\\"bottom\\\",\\\"duration\\\"],\\\"sources\\\":[\\\"C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-gifted-chat/lib/GiftedChat.js\\\"],\\\"mappings\\\":\\\"AAuOqD,QAAC,CAAAA,aAAOA,CAAAC,KAAS,CAAKC,SAAA,QAAAC,wBAAA,CAAAC,oBAAA,CAAAC,UAAA,CAAAC,MAAA,CAAAC,OAAA,CAAAC,oCAAA,CAAAC,oCAAA,CAAAC,YAAA,CAAAC,aAAA,CAAAC,oBAAA,OAAAC,SAAA,CACnE,GAAIX,SAAS,EAAID,KAAK,GAAKC,SAAS,CAAE,CAClC,KAAM,CAAAY,kBAAkB,CAAGb,KAAK,CAAGC,SAAS,CAC5C,GAAIY,kBAAkB,GAAKX,wBAAwB,CAACF,KAAK,CAAE,CACvDE,wBAAwB,CAACF,KAAK,CAAGa,kBAAkB,CACnDV,oBAAoB,CAACH,KAAK,CAAGI,UAAU,CAACS,kBAAkB,CAAGR,MAAM,CAACS,MAAM,CAAG,CAAC,CAAE,CAC5EC,QAAQ,CAAE,GACd,CAAC,CAAC,CACF,GAAIF,kBAAkB,CAClBP,OAAO,CAACC,oCAAoC,CAAC,CAAC,CAAC,CAAC,IAEhD,CAAAD,OAAO,CAACE,oCAAoC,CAAC,CAAC,CAAC,CACnD,GAAIR,KAAK,GAAK,CAAC,CAAE,CACbM,OAAO,CAACG,YAAY,CAAC,CAAC,CAAC,CAC3B,CAAC,IACI,CACDH,OAAO,CAACI,aAAa,CAAC,CAAC,CAAC,CACxBJ,OAAO,CAACK,oBAAoB,CAAC,CAAC,CAAC,CACnC,CACJ,CACJ,CACJ\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.15.1\"\n};\nfunction GiftedChat(props) {\n  const {\n    messages = [],\n    initialText = '',\n    isTyping,\n    messageIdGenerator = () => uuidv4(),\n    user = {},\n    onSend,\n    locale = 'en',\n    renderLoading,\n    actionSheet = null,\n    textInputProps,\n    renderChatFooter = null,\n    renderInputToolbar = null,\n    keyboardShouldPersistTaps = Platform.select({\n      ios: 'never',\n      android: 'always',\n      default: 'never'\n    }),\n    onInputTextChanged = null,\n    maxInputLength = null,\n    inverted = true,\n    minComposerHeight = MIN_COMPOSER_HEIGHT,\n    maxComposerHeight = MAX_COMPOSER_HEIGHT\n  } = props;\n  const actionSheetRef = useRef(null);\n  const messageContainerRef = useMemo(() => props.messageContainerRef || createRef(), [props.messageContainerRef]);\n  const textInputRef = useMemo(() => props.textInputRef || createRef(), [props.textInputRef]);\n  const isTextInputWasFocused = useRef(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [composerHeight, setComposerHeight] = useState(minComposerHeight);\n  const [text, setText] = useState(() => props.text || '');\n  const [isTypingDisabled, setIsTypingDisabled] = useState(false);\n  const keyboard = useAnimatedKeyboard();\n  const trackingKeyboardMovement = useSharedValue(false);\n  const debounceEnableTypingTimeoutId = useRef();\n  const insets = useSafeAreaInsets();\n  const keyboardOffsetBottom = useSharedValue(0);\n  const contentStyleAnim = useAnimatedStyle(function () {\n    const _e = [new global.Error(), -3, -27];\n    const GiftedChatJs1 = () => ({\n      transform: [{\n        translateY: -keyboard.height.value + keyboardOffsetBottom.value\n      }]\n    });\n    GiftedChatJs1.__closure = {\n      keyboard,\n      keyboardOffsetBottom\n    };\n    GiftedChatJs1.__workletHash = 8032004415178;\n    GiftedChatJs1.__initData = _worklet_8032004415178_init_data;\n    GiftedChatJs1.__stackDetails = _e;\n    return GiftedChatJs1;\n  }(), [keyboard, keyboardOffsetBottom]);\n  const getTextFromProp = useCallback(fallback => {\n    if (props.text === undefined) return fallback;\n    return props.text;\n  }, [props.text]);\n  const handleTextInputFocusWhenKeyboardHide = useCallback(() => {\n    if (!isTextInputWasFocused.current) isTextInputWasFocused.current = textInputRef.current?.isFocused() || false;\n  }, [textInputRef]);\n  const handleTextInputFocusWhenKeyboardShow = useCallback(() => {\n    if (textInputRef.current && isTextInputWasFocused && !textInputRef.current.isFocused()) textInputRef.current.focus();\n    isTextInputWasFocused.current = false;\n  }, [textInputRef]);\n  const disableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current);\n    setIsTypingDisabled(true);\n  }, []);\n  const enableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current);\n    setIsTypingDisabled(false);\n  }, []);\n  const debounceEnableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current);\n    debounceEnableTypingTimeoutId.current = setTimeout(() => {\n      enableTyping();\n    }, 50);\n  }, [enableTyping]);\n  const scrollToBottom = useCallback((isAnimated = true) => {\n    if (!messageContainerRef?.current) return;\n    if (inverted) {\n      messageContainerRef.current.scrollToOffset({\n        offset: 0,\n        animated: isAnimated\n      });\n      return;\n    }\n    messageContainerRef.current.scrollToEnd({\n      animated: isAnimated\n    });\n  }, [inverted, messageContainerRef]);\n  const renderMessages = useMemo(() => {\n    if (!isInitialized) return null;\n    const {\n        messagesContainerStyle\n      } = props,\n      messagesContainerProps = _objectWithoutPropertiesLoose(props, _excluded);\n    const fragment = _jsxDEV(View, {\n      style: [styles.fill, messagesContainerStyle],\n      children: [_jsxDEV(MessageContainer, Object.assign({}, messagesContainerProps, {\n        invertibleScrollViewProps: {\n          inverted,\n          keyboardShouldPersistTaps\n        },\n        messages: messages,\n        forwardRef: messageContainerRef,\n        isTyping: isTyping\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), renderChatFooter?.()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 27\n    }, this);\n    return fragment;\n  }, [isInitialized, isTyping, messages, props, inverted, keyboardShouldPersistTaps, messageContainerRef, renderChatFooter]);\n  const notifyInputTextReset = useCallback(() => {\n    onInputTextChanged?.('');\n  }, [onInputTextChanged]);\n  const resetInputToolbar = useCallback(() => {\n    textInputRef.current?.clear();\n    notifyInputTextReset();\n    setComposerHeight(minComposerHeight);\n    setText(getTextFromProp(''));\n    enableTyping();\n  }, [minComposerHeight, getTextFromProp, textInputRef, notifyInputTextReset, enableTyping]);\n  const _onSend = useCallback((messages = [], shouldResetInputToolbar = false) => {\n    if (!Array.isArray(messages)) messages = [messages];\n    const newMessages = messages.map(message => {\n      return Object.assign({}, message, {\n        user: user,\n        createdAt: new Date(),\n        _id: messageIdGenerator?.()\n      });\n    });\n    if (shouldResetInputToolbar === true) {\n      disableTyping();\n      resetInputToolbar();\n    }\n    onSend?.(newMessages);\n  }, [messageIdGenerator, onSend, user, resetInputToolbar, disableTyping]);\n  const onInputSizeChanged = useCallback(size => {\n    const newComposerHeight = Math.max(minComposerHeight, Math.min(maxComposerHeight, size.height));\n    setComposerHeight(newComposerHeight);\n  }, [maxComposerHeight, minComposerHeight]);\n  const _onInputTextChanged = useCallback(_text => {\n    if (isTypingDisabled) return;\n    onInputTextChanged?.(_text);\n    if (props.text === undefined) setText(_text);\n  }, [onInputTextChanged, isTypingDisabled, props.text]);\n  const onInitialLayoutViewLayout = useCallback(e => {\n    const {\n      layout\n    } = e.nativeEvent;\n    if (layout.height <= 0) return;\n    notifyInputTextReset();\n    setIsInitialized(true);\n    setComposerHeight(minComposerHeight);\n    setText(getTextFromProp(initialText));\n  }, [initialText, minComposerHeight, notifyInputTextReset, getTextFromProp]);\n  const inputToolbarFragment = useMemo(() => {\n    if (!isInitialized) return null;\n    const inputToolbarProps = Object.assign({}, props, {\n      text: getTextFromProp(text),\n      composerHeight: Math.max(minComposerHeight, composerHeight),\n      onSend: _onSend,\n      onInputSizeChanged,\n      onTextChanged: _onInputTextChanged,\n      textInputProps: Object.assign({}, textInputProps, {\n        ref: textInputRef,\n        maxLength: isTypingDisabled ? 0 : maxInputLength\n      })\n    });\n    if (renderInputToolbar) return renderInputToolbar(inputToolbarProps);\n    return _jsxDEV(InputToolbar, Object.assign({}, inputToolbarProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 16\n    }, this);\n  }, [isInitialized, _onSend, getTextFromProp, maxInputLength, minComposerHeight, onInputSizeChanged, props, text, renderInputToolbar, composerHeight, isTypingDisabled, textInputRef, textInputProps, _onInputTextChanged]);\n  const contextValues = useMemo(() => ({\n    actionSheet: actionSheet || (() => ({\n      showActionSheetWithOptions: actionSheetRef.current.showActionSheetWithOptions\n    })),\n    getLocale: () => locale\n  }), [actionSheet, locale]);\n  useEffect(() => {\n    if (props.text != null) setText(props.text);\n  }, [props.text]);\n  useEffect(() => {\n    if (!inverted && messages?.length) setTimeout(() => scrollToBottom(false), 200);\n  }, [messages?.length, inverted, scrollToBottom]);\n  useAnimatedReaction(function () {\n    const _e = [new global.Error(), -2, -27];\n    const GiftedChatJs2 = () => keyboard.height.value;\n    GiftedChatJs2.__closure = {\n      keyboard\n    };\n    GiftedChatJs2.__workletHash = 3596830648403;\n    GiftedChatJs2.__initData = _worklet_3596830648403_init_data;\n    GiftedChatJs2.__stackDetails = _e;\n    return GiftedChatJs2;\n  }(), function () {\n    const _e = [new global.Error(), -11, -27];\n    const GiftedChatJs3 = function (value, prevValue) {\n      if (prevValue && value !== prevValue) {\n        const isKeyboardMovingUp = value > prevValue;\n        if (isKeyboardMovingUp !== trackingKeyboardMovement.value) {\n          trackingKeyboardMovement.value = isKeyboardMovingUp;\n          keyboardOffsetBottom.value = withTiming(isKeyboardMovingUp ? insets.bottom : 0, {\n            duration: 400\n          });\n          if (isKeyboardMovingUp) runOnJS(handleTextInputFocusWhenKeyboardShow)();else runOnJS(handleTextInputFocusWhenKeyboardHide)();\n          if (value === 0) {\n            runOnJS(enableTyping)();\n          } else {\n            runOnJS(disableTyping)();\n            runOnJS(debounceEnableTyping)();\n          }\n        }\n      }\n    };\n    GiftedChatJs3.__closure = {\n      trackingKeyboardMovement,\n      keyboardOffsetBottom,\n      withTiming,\n      insets,\n      runOnJS,\n      handleTextInputFocusWhenKeyboardShow,\n      handleTextInputFocusWhenKeyboardHide,\n      enableTyping,\n      disableTyping,\n      debounceEnableTyping\n    };\n    GiftedChatJs3.__workletHash = 5636965432625;\n    GiftedChatJs3.__initData = _worklet_5636965432625_init_data;\n    GiftedChatJs3.__stackDetails = _e;\n    return GiftedChatJs3;\n  }(), [keyboard, trackingKeyboardMovement, insets, handleTextInputFocusWhenKeyboardHide, handleTextInputFocusWhenKeyboardShow, enableTyping, disableTyping, debounceEnableTyping]);\n  return _jsxDEV(GiftedChatContext.Provider, {\n    value: contextValues,\n    children: _jsxDEV(ActionSheetProvider, {\n      ref: actionSheetRef,\n      children: _jsxDEV(View, {\n        testID: TEST_ID.WRAPPER,\n        style: [styles.fill, styles.contentContainer],\n        onLayout: onInitialLayoutViewLayout,\n        children: isInitialized ? _jsxDEV(Animated.View, {\n          style: [styles.fill, contentStyleAnim],\n          children: [renderMessages, inputToolbarFragment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 16\n        }, this) : renderLoading?.()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 13\n  }, this);\n}\nGiftedChat.append = (currentMessages = [], messages, inverted = true) => {\n  if (!Array.isArray(messages)) messages = [messages];\n  return inverted ? messages.concat(currentMessages) : currentMessages.concat(messages);\n};\nGiftedChat.prepend = (currentMessages = [], messages, inverted = true) => {\n  if (!Array.isArray(messages)) messages = [messages];\n  return inverted ? currentMessages.concat(messages) : messages.concat(currentMessages);\n};\nconst styles = StyleSheet.create({\n  fill: {\n    flex: 1\n  },\n  contentContainer: {\n    overflow: 'hidden'\n  }\n});\nexport * from './Models';\nexport { GiftedChat, Actions, Avatar, Bubble, SystemMessage, MessageImage, MessageText, Composer, Day, InputToolbar, LoadEarlier, Message, MessageContainer, Send, Time, GiftedAvatar, utils };","map":{"version":3,"names":["React","createRef","useEffect","useMemo","useRef","useState","useCallback","ActionSheetProvider","dayjs","localizedFormat","Platform","StyleSheet","View","v4","uuidv4","Actions","Avatar","Bubble","Composer","MAX_COMPOSER_HEIGHT","MIN_COMPOSER_HEIGHT","TEST_ID","Day","GiftedAvatar","GiftedChatContext","InputToolbar","LoadEarlier","Message","MessageContainer","MessageImage","MessageText","Send","SystemMessage","Time","utils","Animated","useAnimatedKeyboard","useAnimatedStyle","useAnimatedReaction","useSharedValue","withTiming","runOnJS","useSafeAreaInsets","jsxDEV","_jsxDEV","extend","_worklet_8032004415178_init_data","code","location","sourceMap","version","_worklet_3596830648403_init_data","_worklet_5636965432625_init_data","GiftedChat","props","messages","initialText","isTyping","messageIdGenerator","user","onSend","locale","renderLoading","actionSheet","textInputProps","renderChatFooter","renderInputToolbar","keyboardShouldPersistTaps","select","ios","android","default","onInputTextChanged","maxInputLength","inverted","minComposerHeight","maxComposerHeight","actionSheetRef","messageContainerRef","textInputRef","isTextInputWasFocused","isInitialized","setIsInitialized","composerHeight","setComposerHeight","text","setText","isTypingDisabled","setIsTypingDisabled","keyboard","trackingKeyboardMovement","debounceEnableTypingTimeoutId","insets","keyboardOffsetBottom","contentStyleAnim","_e","global","Error","GiftedChatJs1","transform","translateY","height","value","__closure","__workletHash","__initData","__stackDetails","getTextFromProp","fallback","undefined","handleTextInputFocusWhenKeyboardHide","current","isFocused","handleTextInputFocusWhenKeyboardShow","focus","disableTyping","clearTimeout","enableTyping","debounceEnableTyping","setTimeout","scrollToBottom","isAnimated","scrollToOffset","offset","animated","scrollToEnd","renderMessages","messagesContainerStyle","messagesContainerProps","_objectWithoutPropertiesLoose","_excluded","fragment","style","styles","fill","children","Object","assign","invertibleScrollViewProps","forwardRef","fileName","_jsxFileName","lineNumber","columnNumber","notifyInputTextReset","resetInputToolbar","clear","_onSend","shouldResetInputToolbar","Array","isArray","newMessages","map","message","createdAt","Date","_id","onInputSizeChanged","size","newComposerHeight","Math","max","min","_onInputTextChanged","_text","onInitialLayoutViewLayout","e","layout","nativeEvent","inputToolbarFragment","inputToolbarProps","onTextChanged","ref","maxLength","contextValues","showActionSheetWithOptions","getLocale","length","GiftedChatJs2","GiftedChatJs3","prevValue","isKeyboardMovingUp","bottom","duration","Provider","testID","WRAPPER","contentContainer","onLayout","append","currentMessages","concat","prepend","create","flex","overflow"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gifted-chat\\src\\GiftedChat.tsx"],"sourcesContent":["import React, {\n  createRef,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useCallback,\n  MutableRefObject,\n} from 'react'\nimport {\n  ActionSheetOptions,\n  ActionSheetProvider,\n  ActionSheetProviderRef,\n} from '@expo/react-native-action-sheet'\nimport dayjs from 'dayjs'\nimport localizedFormat from 'dayjs/plugin/localizedFormat'\nimport {\n  FlatList,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native'\nimport { LightboxProps } from 'react-native-lightbox-v2'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Actions, ActionsProps } from './Actions'\nimport { Avatar, AvatarProps } from './Avatar'\nimport Bubble from './Bubble'\nimport { Composer, ComposerProps } from './Composer'\nimport { MAX_COMPOSER_HEIGHT, MIN_COMPOSER_HEIGHT, TEST_ID } from './Constant'\nimport { Day, DayProps } from './Day'\nimport GiftedAvatar from './GiftedAvatar'\nimport { GiftedChatContext } from './GiftedChatContext'\nimport { InputToolbar, InputToolbarProps } from './InputToolbar'\nimport { LoadEarlier, LoadEarlierProps } from './LoadEarlier'\nimport Message from './Message'\nimport MessageContainer from './MessageContainer'\nimport { MessageImage, MessageImageProps } from './MessageImage'\nimport { MessageText, MessageTextProps } from './MessageText'\nimport {\n  IMessage,\n  LeftRightStyle,\n  MessageAudioProps,\n  MessageVideoProps,\n  Reply,\n  User,\n} from './Models'\nimport { QuickRepliesProps } from './QuickReplies'\nimport { Send, SendProps } from './Send'\nimport { SystemMessage, SystemMessageProps } from './SystemMessage'\nimport { Time, TimeProps } from './Time'\nimport * as utils from './utils'\nimport Animated, {\n  useAnimatedKeyboard,\n  useAnimatedStyle,\n  useAnimatedReaction,\n  useSharedValue,\n  withTiming,\n  runOnJS,\n} from 'react-native-reanimated'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\ndayjs.extend(localizedFormat)\n\nexport interface GiftedChatProps<TMessage extends IMessage = IMessage> {\n  /* Message container ref */\n  messageContainerRef?: React.RefObject<FlatList<IMessage>>\n  /* text input ref */\n  textInputRef?: React.RefObject<TextInput>\n  /* Messages to display */\n  messages?: TMessage[]\n  /* Typing Indicator state */\n  isTyping?: boolean\n  /* Messages container style */\n  messagesContainerStyle?: StyleProp<ViewStyle>\n  /* Input text; default is undefined, but if specified, it will override GiftedChat's internal state */\n  text?: string\n  /* Controls whether or not the message bubbles appear at the top of the chat */\n  alignTop?: boolean\n  /* enables the scrollToBottom Component */\n  scrollToBottom?: boolean\n  /* Scroll to bottom wrapper style */\n  scrollToBottomStyle?: StyleProp<ViewStyle>\n  initialText?: string\n  /* Placeholder when text is empty; default is 'Type a message...' */\n  placeholder?: string\n  /* Makes the composer not editable */\n  disableComposer?: boolean\n  /* User sending the messages: { _id, name, avatar } */\n  user?: User\n  /*  Locale to localize the dates */\n  locale?: string\n  /* Format to use for rendering times; default is 'LT' */\n  timeFormat?: string\n  /* Format to use for rendering dates; default is 'll' */\n  dateFormat?: string\n  /* Enables the \"Load earlier messages\" button */\n  loadEarlier?: boolean\n  /* Display an ActivityIndicator when loading earlier messages */\n  isLoadingEarlier?: boolean\n  /* Whether to render an avatar for the current user; default is false, only show avatars for other users */\n  showUserAvatar?: boolean\n  /* When false, avatars will only be displayed when a consecutive message is from the same user on the same day; default is false */\n  showAvatarForEveryMessage?: boolean\n  /* Render the message avatar at the top of consecutive messages, rather than the bottom; default is false */\n  renderAvatarOnTop?: boolean\n  inverted?: boolean\n  /* Extra props to be passed to the <Image> component created by the default renderMessageImage */\n  imageProps?: Message<TMessage>['props']\n  /* Extra props to be passed to the MessageImage's Lightbox */\n  lightboxProps?: LightboxProps\n  /* Minimum height of the input toolbar; default is 44 */\n  minInputToolbarHeight?: number\n  /* Extra props to be passed to the messages <ListView>; some props can't be overridden, see the code in MessageContainer.render() for details */\n  listViewProps?: object\n  /*  Extra props to be passed to the <TextInput> */\n  textInputProps?: object\n  /* Determines whether the keyboard should stay visible after a tap; see <ScrollView> docs */\n  keyboardShouldPersistTaps?: 'always' | 'never' | 'handled'\n  /* Max message composer TextInput length */\n  maxInputLength?: number\n  /* Force send button */\n  alwaysShowSend?: boolean\n  /* Image style */\n  imageStyle?: StyleProp<ViewStyle>\n  /* This can be used to pass unknown data which needs to be re-rendered */\n  extraData?: object\n  /* composer min Height */\n  minComposerHeight?: number\n  /* composer min Height */\n  maxComposerHeight?: number\n  options?: { [key: string]: () => void }\n  optionTintColor?: string\n  quickReplyStyle?: StyleProp<ViewStyle>\n  quickReplyTextStyle?: StyleProp<TextStyle>\n  quickReplyContainerStyle?: StyleProp<ViewStyle>\n  /* optional prop used to place customView below text, image and video views; default is false */\n  isCustomViewBottom?: boolean\n  /* infinite scroll up when reach the top of messages container, automatically call onLoadEarlier function if exist */\n  infiniteScroll?: boolean\n  timeTextStyle?: LeftRightStyle<TextStyle>\n  /* Custom action sheet */\n  actionSheet?(): {\n    showActionSheetWithOptions: (\n      options: ActionSheetOptions,\n      callback: (buttonIndex: number) => void | Promise<void>,\n    ) => void\n  }\n  /* Callback when a message avatar is tapped */\n  onPressAvatar?(user: User): void\n  /* Callback when a message avatar is tapped */\n  onLongPressAvatar?(user: User): void\n  /* Generate an id for new messages. Defaults to UUID v4, generated by uuid */\n  messageIdGenerator?(message?: TMessage): string\n  /* Callback when sending a message */\n  onSend?(messages: TMessage[]): void\n  /* Callback when loading earlier messages */\n  onLoadEarlier?(): void\n  /*  Render a loading view when initializing */\n  renderLoading?(): React.ReactNode\n  /* Custom \"Load earlier messages\" button */\n  renderLoadEarlier?(props: LoadEarlierProps): React.ReactNode\n  /* Custom message avatar; set to null to not render any avatar for the message */\n  renderAvatar?: null | ((props: AvatarProps<TMessage>) => React.ReactNode)\n  /* Custom message bubble */\n  renderBubble?(props: Bubble<TMessage>['props']): React.ReactNode\n  /* Custom system message */\n  renderSystemMessage?(props: SystemMessageProps<TMessage>): React.ReactNode\n  /* Callback when a message bubble is pressed; default is to do nothing */\n  onPress?(context: unknown, message: TMessage): void\n  /* Callback when a message bubble is long-pressed; default is to show an ActionSheet with \"Copy Text\" (see example using showActionSheetWithOptions()) */\n  onLongPress?(context: unknown, message: TMessage): void\n  /* Custom Username container */\n  renderUsername?(user: User): React.ReactNode\n  /* Reverses display order of messages; default is true */\n  /* Custom message container */\n  renderMessage?(message: Message<TMessage>['props']): React.ReactElement\n  /* Custom message text */\n  renderMessageText?(messageText: MessageTextProps<TMessage>): React.ReactNode\n  /* Custom message image */\n  renderMessageImage?(props: MessageImageProps<TMessage>): React.ReactNode\n  /* Custom message video */\n  renderMessageVideo?(props: MessageVideoProps<TMessage>): React.ReactNode\n  /* Custom message video */\n  renderMessageAudio?(props: MessageAudioProps<TMessage>): React.ReactNode\n  /* Custom view inside the bubble */\n  renderCustomView?(props: Bubble<TMessage>['props']): React.ReactNode\n  /* Custom day above a message */\n  renderDay?(props: DayProps<TMessage>): React.ReactNode\n  /* Custom time inside a message */\n  renderTime?(props: TimeProps<TMessage>): React.ReactNode\n  /* Custom footer component on the ListView, e.g. 'User is typing...' */\n  renderFooter?(): React.ReactNode\n  /* Custom component to render in the ListView when messages are empty */\n  renderChatEmpty?(): React.ReactNode\n  /* Custom component to render below the MessageContainer (separate from the ListView) */\n  renderChatFooter?(): React.ReactNode\n  /* Custom message composer container */\n  renderInputToolbar?(props: InputToolbarProps<TMessage>): React.ReactNode\n  /*  Custom text input message composer */\n  renderComposer?(props: ComposerProps): React.ReactNode\n  /* Custom action button on the left of the message composer */\n  renderActions?(props: ActionsProps): React.ReactNode\n  /* Custom send button; you can pass children to the original Send component quite easily, for example to use a custom icon (example) */\n  renderSend?(props: SendProps<TMessage>): React.ReactNode\n  /* Custom second line of actions below the message composer */\n  renderAccessory?(props: InputToolbarProps<TMessage>): React.ReactNode\n  /* Callback when the Action button is pressed (if set, the default actionSheet will not be used) */\n  onPressActionButton?(): void\n  /* Callback when the input text changes */\n  onInputTextChanged?(text: string): void\n  /* Custom parse patterns for react-native-parsed-text used to linking message content (like URLs and phone numbers) */\n  parsePatterns?: (linkStyle?: TextStyle) => { type?: string, pattern?: RegExp, style?: StyleProp<TextStyle> | object, onPress?: unknown, renderText?: unknown }[]\n  onQuickReply?(replies: Reply[]): void\n  renderQuickReplies?(\n    quickReplies: QuickRepliesProps<TMessage>,\n  ): React.ReactNode\n  renderQuickReplySend?(): React.ReactNode\n  /* Scroll to bottom custom component */\n  scrollToBottomComponent?(): React.ReactNode\n  shouldUpdateMessage?(\n    props: Message<TMessage>['props'],\n    nextProps: Message<TMessage>['props'],\n  ): boolean\n}\n\nfunction GiftedChat<TMessage extends IMessage = IMessage> (\n  props: GiftedChatProps\n) {\n  const {\n    messages = [],\n    initialText = '',\n    isTyping,\n    messageIdGenerator = () => uuidv4(),\n    user = {},\n    onSend,\n    locale = 'en',\n    renderLoading,\n    actionSheet = null,\n    textInputProps,\n    renderChatFooter = null,\n    renderInputToolbar = null,\n    keyboardShouldPersistTaps = Platform.select({\n      ios: 'never',\n      android: 'always',\n      default: 'never',\n    }),\n    onInputTextChanged = null,\n    maxInputLength = null,\n    inverted = true,\n    minComposerHeight = MIN_COMPOSER_HEIGHT,\n    maxComposerHeight = MAX_COMPOSER_HEIGHT,\n  } = props\n\n  const actionSheetRef = useRef<ActionSheetProviderRef>(null)\n\n  const messageContainerRef = useMemo(\n    () => props.messageContainerRef || createRef<FlatList<IMessage>>(),\n    [props.messageContainerRef]\n  )\n\n  const textInputRef = useMemo(\n    () => props.textInputRef || createRef<TextInput>(),\n    [props.textInputRef]\n  )\n\n  const isTextInputWasFocused: MutableRefObject<boolean> = useRef(false)\n\n  const [isInitialized, setIsInitialized] = useState<boolean>(false)\n  const [composerHeight, setComposerHeight] = useState<number>(\n    minComposerHeight!\n  )\n  const [text, setText] = useState<string | undefined>(() => props.text || '')\n  const [isTypingDisabled, setIsTypingDisabled] = useState<boolean>(false)\n\n  const keyboard = useAnimatedKeyboard()\n  const trackingKeyboardMovement = useSharedValue(false)\n  const debounceEnableTypingTimeoutId = useRef<ReturnType<typeof setTimeout>>()\n  const insets = useSafeAreaInsets()\n  const keyboardOffsetBottom = useSharedValue(0)\n\n  const contentStyleAnim = useAnimatedStyle(\n    () => ({\n      transform: [\n        { translateY: -keyboard.height.value + keyboardOffsetBottom.value },\n      ],\n    }),\n    [keyboard, keyboardOffsetBottom]\n  )\n\n  const getTextFromProp = useCallback(\n    (fallback: string) => {\n      if (props.text === undefined)\n        return fallback\n\n      return props.text\n    },\n    [props.text]\n  )\n\n  /**\n   * Store text input focus status when keyboard hide to retrieve\n   * it afterwards if needed.\n   * `onKeyboardWillHide` may be called twice in sequence so we\n   * make a guard condition (eg. showing image picker)\n   */\n  const handleTextInputFocusWhenKeyboardHide = useCallback(() => {\n    if (!isTextInputWasFocused.current)\n      isTextInputWasFocused.current =\n        textInputRef.current?.isFocused() || false\n  }, [textInputRef])\n\n  /**\n   * Refocus the text input only if it was focused before showing keyboard.\n   * This is needed in some cases (eg. showing image picker).\n   */\n  const handleTextInputFocusWhenKeyboardShow = useCallback(() => {\n    if (\n      textInputRef.current &&\n      isTextInputWasFocused &&\n      !textInputRef.current.isFocused()\n    )\n      textInputRef.current.focus()\n\n    // Reset the indicator since the keyboard is shown\n    isTextInputWasFocused.current = false\n  }, [textInputRef])\n\n  const disableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current)\n    setIsTypingDisabled(true)\n  }, [])\n\n  const enableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current)\n    setIsTypingDisabled(false)\n  }, [])\n\n  const debounceEnableTyping = useCallback(() => {\n    clearTimeout(debounceEnableTypingTimeoutId.current)\n    debounceEnableTypingTimeoutId.current = setTimeout(() => {\n      enableTyping()\n    }, 50)\n  }, [enableTyping])\n\n  const scrollToBottom = useCallback(\n    (isAnimated = true) => {\n      if (!messageContainerRef?.current)\n        return\n\n      if (inverted) {\n        messageContainerRef.current.scrollToOffset({\n          offset: 0,\n          animated: isAnimated,\n        })\n        return\n      }\n\n      messageContainerRef.current.scrollToEnd({ animated: isAnimated })\n    },\n    [inverted, messageContainerRef]\n  )\n\n  const renderMessages = useMemo(() => {\n    if (!isInitialized)\n      return null\n\n    const { messagesContainerStyle, ...messagesContainerProps } = props\n\n    const fragment = (\n      <View style={[styles.fill, messagesContainerStyle]}>\n        <MessageContainer\n          {...messagesContainerProps}\n          invertibleScrollViewProps={{\n            inverted,\n            keyboardShouldPersistTaps,\n          }}\n          messages={messages}\n          forwardRef={messageContainerRef}\n          isTyping={isTyping}\n        />\n        {renderChatFooter?.()}\n      </View>\n    )\n\n    return fragment\n  }, [\n    isInitialized,\n    isTyping,\n    messages,\n    props,\n    inverted,\n    keyboardShouldPersistTaps,\n    messageContainerRef,\n    renderChatFooter,\n  ])\n\n  const notifyInputTextReset = useCallback(() => {\n    onInputTextChanged?.('')\n  }, [onInputTextChanged])\n\n  const resetInputToolbar = useCallback(() => {\n    textInputRef.current?.clear()\n\n    notifyInputTextReset()\n\n    setComposerHeight(minComposerHeight!)\n    setText(getTextFromProp(''))\n    enableTyping()\n  }, [\n    minComposerHeight,\n    getTextFromProp,\n    textInputRef,\n    notifyInputTextReset,\n    enableTyping,\n  ])\n\n  const _onSend = useCallback(\n    (messages: TMessage[] = [], shouldResetInputToolbar = false) => {\n      if (!Array.isArray(messages))\n        messages = [messages]\n\n      const newMessages: TMessage[] = messages.map(message => {\n        return {\n          ...message,\n          user: user!,\n          createdAt: new Date(),\n          _id: messageIdGenerator?.(),\n        }\n      })\n\n      if (shouldResetInputToolbar === true) {\n        disableTyping()\n\n        resetInputToolbar()\n      }\n\n      onSend?.(newMessages)\n    },\n    [messageIdGenerator, onSend, user, resetInputToolbar, disableTyping]\n  )\n\n  const onInputSizeChanged = useCallback(\n    (size: { height: number }) => {\n      const newComposerHeight = Math.max(\n        minComposerHeight!,\n        Math.min(maxComposerHeight!, size.height)\n      )\n\n      setComposerHeight(newComposerHeight)\n    },\n    [maxComposerHeight, minComposerHeight]\n  )\n\n  const _onInputTextChanged = useCallback(\n    (_text: string) => {\n      if (isTypingDisabled)\n        return\n\n      onInputTextChanged?.(_text)\n\n      // Only set state if it's not being overridden by a prop.\n      if (props.text === undefined)\n        setText(_text)\n    },\n    [onInputTextChanged, isTypingDisabled, props.text]\n  )\n\n  const onInitialLayoutViewLayout = useCallback(\n    (e: LayoutChangeEvent) => {\n      const { layout } = e.nativeEvent\n\n      if (layout.height <= 0)\n        return\n\n      notifyInputTextReset()\n\n      setIsInitialized(true)\n      setComposerHeight(minComposerHeight!)\n      setText(getTextFromProp(initialText))\n    },\n    [initialText, minComposerHeight, notifyInputTextReset, getTextFromProp]\n  )\n\n  const inputToolbarFragment = useMemo(() => {\n    if (!isInitialized)\n      return null\n\n    const inputToolbarProps = {\n      ...props,\n      text: getTextFromProp(text!),\n      composerHeight: Math.max(minComposerHeight!, composerHeight),\n      onSend: _onSend,\n      onInputSizeChanged,\n      onTextChanged: _onInputTextChanged,\n      textInputProps: {\n        ...textInputProps,\n        ref: textInputRef,\n        maxLength: isTypingDisabled ? 0 : maxInputLength,\n      },\n    }\n\n    if (renderInputToolbar)\n      return renderInputToolbar(inputToolbarProps)\n\n    return <InputToolbar {...inputToolbarProps} />\n  }, [\n    isInitialized,\n    _onSend,\n    getTextFromProp,\n    maxInputLength,\n    minComposerHeight,\n    onInputSizeChanged,\n    props,\n    text,\n    renderInputToolbar,\n    composerHeight,\n    isTypingDisabled,\n    textInputRef,\n    textInputProps,\n    _onInputTextChanged,\n  ])\n\n  const contextValues = useMemo(\n    () => ({\n      actionSheet:\n        actionSheet ||\n        (() => ({\n          showActionSheetWithOptions:\n            actionSheetRef.current!.showActionSheetWithOptions,\n        })),\n      getLocale: () => locale,\n    }),\n    [actionSheet, locale]\n  )\n\n  useEffect(() => {\n    if (props.text != null)\n      setText(props.text)\n  }, [props.text])\n\n  useEffect(() => {\n    if (!inverted && messages?.length)\n      setTimeout(() => scrollToBottom(false), 200)\n  }, [messages?.length, inverted, scrollToBottom])\n\n  useAnimatedReaction(\n    () => keyboard.height.value,\n    (value, prevValue) => {\n      if (prevValue && value !== prevValue) {\n        const isKeyboardMovingUp = value > prevValue\n        if (isKeyboardMovingUp !== trackingKeyboardMovement.value) {\n          trackingKeyboardMovement.value = isKeyboardMovingUp\n          keyboardOffsetBottom.value = withTiming(\n            isKeyboardMovingUp ? insets.bottom : 0,\n            {\n              duration: 400,\n            }\n          )\n\n          if (isKeyboardMovingUp)\n            runOnJS(handleTextInputFocusWhenKeyboardShow)()\n          else\n            runOnJS(handleTextInputFocusWhenKeyboardHide)()\n\n          if (value === 0) {\n            runOnJS(enableTyping)()\n          } else {\n            runOnJS(disableTyping)()\n            runOnJS(debounceEnableTyping)()\n          }\n        }\n      }\n    },\n    [\n      keyboard,\n      trackingKeyboardMovement,\n      insets,\n      handleTextInputFocusWhenKeyboardHide,\n      handleTextInputFocusWhenKeyboardShow,\n      enableTyping,\n      disableTyping,\n      debounceEnableTyping,\n    ]\n  )\n\n  return (\n    <GiftedChatContext.Provider value={contextValues}>\n      <ActionSheetProvider ref={actionSheetRef}>\n        <View\n          testID={TEST_ID.WRAPPER}\n          style={[styles.fill, styles.contentContainer]}\n          onLayout={onInitialLayoutViewLayout}\n        >\n          {isInitialized\n            ? (\n              <Animated.View style={[styles.fill, contentStyleAnim]}>\n                {renderMessages}\n                {inputToolbarFragment}\n              </Animated.View>\n            )\n            : (\n              renderLoading?.()\n            )}\n        </View>\n      </ActionSheetProvider>\n    </GiftedChatContext.Provider>\n  )\n}\n\nGiftedChat.append = <TMessage extends IMessage>(\n  currentMessages: TMessage[] = [],\n  messages: TMessage[],\n  inverted = true\n) => {\n  if (!Array.isArray(messages))\n    messages = [messages]\n\n  return inverted\n    ? messages.concat(currentMessages)\n    : currentMessages.concat(messages)\n}\n\nGiftedChat.prepend = <TMessage extends IMessage>(\n  currentMessages: TMessage[] = [],\n  messages: TMessage[],\n  inverted = true\n) => {\n  if (!Array.isArray(messages))\n    messages = [messages]\n\n  return inverted\n    ? currentMessages.concat(messages)\n    : messages.concat(currentMessages)\n}\n\nconst styles = StyleSheet.create({\n  fill: {\n    flex: 1,\n  },\n  contentContainer: {\n    overflow: 'hidden',\n  },\n})\n\nexport * from './Models'\nexport {\n  GiftedChat,\n  Actions,\n  Avatar,\n  Bubble,\n  SystemMessage,\n  MessageImage,\n  MessageText,\n  Composer,\n  Day,\n  InputToolbar,\n  LoadEarlier,\n  Message,\n  MessageContainer,\n  Send,\n  Time,\n  GiftedAvatar,\n  utils\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,WAAW,QAEN,OAAO;AACd,SAEEC,mBAAmB,QAEd,iCAAiC;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,8BAA8B;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAa1D,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,OAAO,QAAsB,WAAW;AACjD,SAASC,MAAM,QAAqB,UAAU;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,QAAQ,QAAuB,YAAY;AACpD,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,OAAO,QAAQ,YAAY;AAC9E,SAASC,GAAG,QAAkB,OAAO;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,YAAY,QAA2B,gBAAgB;AAChE,SAASC,WAAW,QAA0B,eAAe;AAC7D,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,YAAY,QAA2B,gBAAgB;AAChE,SAASC,WAAW,QAA0B,eAAe;AAU7D,SAASC,IAAI,QAAmB,QAAQ;AACxC,SAASC,aAAa,QAA4B,iBAAiB;AACnE,SAASC,IAAI,QAAmB,QAAQ;AACxC,OAAO,KAAKC,KAAK,MAAM,SAAS;AAChC,OAAOC,QAAQ,IACbC,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,cAAc,EACdC,UAAU,EACVC,OAAO,QACF,yBAAyB;AAChC,SAASC,iBAAiB,QAAQ,gCAAgC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElEpC,KAAK,CAACqC,MAAM,CAACpC,eAAe,CAAC;AAAA,MAAAqC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAAA,MAAAC,gCAAA;EAAAJ,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAAA,MAAAE,gCAAA;EAAAL,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAoK7B,SAASG,UAAUA,CACjBC,KAAsB;EAEtB,MAAM;IACJC,QAAQ,GAAG,EAAE;IACbC,WAAW,GAAG,EAAE;IAChBC,QAAQ;IACRC,kBAAkB,GAAGA,CAAA,KAAM5C,MAAM,EAAE;IACnC6C,IAAI,GAAG,EAAE;IACTC,MAAM;IACNC,MAAM,GAAG,IAAI;IACbC,aAAa;IACbC,WAAW,GAAG,IAAI;IAClBC,cAAc;IACdC,gBAAgB,GAAG,IAAI;IACvBC,kBAAkB,GAAG,IAAI;IACzBC,yBAAyB,GAAGzD,QAAQ,CAAC0D,MAAM,CAAC;MAC1CC,GAAG,EAAE,OAAO;MACZC,OAAO,EAAE,QAAQ;MACjBC,OAAO,EAAE;KACV,CAAC;IACFC,kBAAkB,GAAG,IAAI;IACzBC,cAAc,GAAG,IAAI;IACrBC,QAAQ,GAAG,IAAI;IACfC,iBAAiB,GAAGvD,mBAAmB;IACvCwD,iBAAiB,GAAGzD;EAAmB,CACxC,GAAGmC,KAAK;EAET,MAAMuB,cAAc,GAAGzE,MAAM,CAAyB,IAAI,CAAC;EAE3D,MAAM0E,mBAAmB,GAAG3E,OAAO,CACjC,MAAMmD,KAAK,CAACwB,mBAAmB,IAAI7E,SAAS,EAAsB,EAClE,CAACqD,KAAK,CAACwB,mBAAmB,CAAC,CAC5B;EAED,MAAMC,YAAY,GAAG5E,OAAO,CAC1B,MAAMmD,KAAK,CAACyB,YAAY,IAAI9E,SAAS,EAAa,EAClD,CAACqD,KAAK,CAACyB,YAAY,CAAC,CACrB;EAED,MAAMC,qBAAqB,GAA8B5E,MAAM,CAAC,KAAK,CAAC;EAEtE,MAAM,CAAC6E,aAAa,EAAEC,gBAAgB,CAAC,GAAG7E,QAAQ,CAAU,KAAK,CAAC;EAClE,MAAM,CAAC8E,cAAc,EAAEC,iBAAiB,CAAC,GAAG/E,QAAQ,CAClDsE,iBAAkB,CACnB;EACD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGjF,QAAQ,CAAqB,MAAMiD,KAAK,CAAC+B,IAAI,IAAI,EAAE,CAAC;EAC5E,MAAM,CAACE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnF,QAAQ,CAAU,KAAK,CAAC;EAExE,MAAMoF,QAAQ,GAAGrD,mBAAmB,EAAE;EACtC,MAAMsD,wBAAwB,GAAGnD,cAAc,CAAC,KAAK,CAAC;EACtD,MAAMoD,6BAA6B,GAAGvF,MAAM,EAAiC;EAC7E,MAAMwF,MAAM,GAAGlD,iBAAiB,EAAE;EAClC,MAAMmD,oBAAoB,GAAGtD,cAAc,CAAC,CAAC,CAAC;EAE9C,MAAMuD,gBAAgB,GAAGzD,gBAAgB,CACvC;IAAA,MAAA0D,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,MAAAC,aAAA,GAAAA,CAAA,MAAO;MACLC,SAAS,EAAE,CACT;QAAEC,UAAU,EAAE,CAACX,QAAQ,CAACY,MAAM,CAACC,KAAK,GAAGT,oBAAoB,CAACS;MAAK,CAAE;KAEtE,CAAC;IAAAJ,aAAA,CAAAK,SAAA;MAAAd,QAAA;MAAAI;IAAA;IAAAK,aAAA,CAAAM,aAAA;IAAAN,aAAA,CAAAO,UAAA,GAAA3D,gCAAA;IAAAoD,aAAA,CAAAQ,cAAA,GAAAX,EAAA;IAAA,OAAAG,aAAA;EAAA,CAJF,IAKA,CAACT,QAAQ,EAAEI,oBAAoB,CAAC,CACjC;EAED,MAAMc,eAAe,GAAGrG,WAAW,CAChCsG,QAAgB,IAAI;IACnB,IAAItD,KAAK,CAAC+B,IAAI,KAAKwB,SAAS,EAC1B,OAAOD,QAAQ;IAEjB,OAAOtD,KAAK,CAAC+B,IAAI;EACnB,CAAC,EACD,CAAC/B,KAAK,CAAC+B,IAAI,CAAC,CACb;EAQD,MAAMyB,oCAAoC,GAAGxG,WAAW,CAAC,MAAK;IAC5D,IAAI,CAAC0E,qBAAqB,CAAC+B,OAAO,EAChC/B,qBAAqB,CAAC+B,OAAO,GAC3BhC,YAAY,CAACgC,OAAO,EAAEC,SAAS,EAAE,IAAI,KAAK;EAChD,CAAC,EAAE,CAACjC,YAAY,CAAC,CAAC;EAMlB,MAAMkC,oCAAoC,GAAG3G,WAAW,CAAC,MAAK;IAC5D,IACEyE,YAAY,CAACgC,OAAO,IACpB/B,qBAAqB,IACrB,CAACD,YAAY,CAACgC,OAAO,CAACC,SAAS,EAAE,EAEjCjC,YAAY,CAACgC,OAAO,CAACG,KAAK,EAAE;IAG9BlC,qBAAqB,CAAC+B,OAAO,GAAG,KAAK;EACvC,CAAC,EAAE,CAAChC,YAAY,CAAC,CAAC;EAElB,MAAMoC,aAAa,GAAG7G,WAAW,CAAC,MAAK;IACrC8G,YAAY,CAACzB,6BAA6B,CAACoB,OAAO,CAAC;IACnDvB,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6B,YAAY,GAAG/G,WAAW,CAAC,MAAK;IACpC8G,YAAY,CAACzB,6BAA6B,CAACoB,OAAO,CAAC;IACnDvB,mBAAmB,CAAC,KAAK,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM8B,oBAAoB,GAAGhH,WAAW,CAAC,MAAK;IAC5C8G,YAAY,CAACzB,6BAA6B,CAACoB,OAAO,CAAC;IACnDpB,6BAA6B,CAACoB,OAAO,GAAGQ,UAAU,CAAC,MAAK;MACtDF,YAAY,EAAE;IAChB,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMG,cAAc,GAAGlH,WAAW,CAChC,CAACmH,UAAU,GAAG,IAAI,KAAI;IACpB,IAAI,CAAC3C,mBAAmB,EAAEiC,OAAO,EAC/B;IAEF,IAAIrC,QAAQ,EAAE;MACZI,mBAAmB,CAACiC,OAAO,CAACW,cAAc,CAAC;QACzCC,MAAM,EAAE,CAAC;QACTC,QAAQ,EAAEH;OACX,CAAC;MACF;IACF;IAEA3C,mBAAmB,CAACiC,OAAO,CAACc,WAAW,CAAC;MAAED,QAAQ,EAAEH;IAAU,CAAE,CAAC;EACnE,CAAC,EACD,CAAC/C,QAAQ,EAAEI,mBAAmB,CAAC,CAChC;EAED,MAAMgD,cAAc,GAAG3H,OAAO,CAAC,MAAK;IAClC,IAAI,CAAC8E,aAAa,EAChB,OAAO,IAAI;IAEb,MAAM;QAAE8C;MAAiD,CAAE,GAAGzE,KAAK;MAAhC0E,sBAAsB,GAAAC,6BAAA,CAAK3E,KAAK,EAAA4E,SAAA;IAEnE,MAAMC,QAAQ,GACZvF,OAAA,CAAChC,IAAI;MAACwH,KAAK,EAAE,CAACC,MAAM,CAACC,IAAI,EAAEP,sBAAsB,CAAE;MAAAQ,QAAA,GACjD3F,OAAA,CAAChB,gBAAgB,EAAA4G,MAAA,CAAAC,MAAA,KACXT,sBAAsB;QAC1BU,yBAAyB,EAAE;UACzBhE,QAAQ;UACRP;SACA;QACFZ,QAAQ,EAAEA,QAAS;QACnBoF,UAAU,EAAE7D,mBAAoB;QAChCrB,QAAQ,EAAEA;MAAS;QAAAmF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAErB,EAAC9E,gBAAgB,GAAE,CAAE;IAAA;MAAA2E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CACP;IAED,OAAOZ,QAAQ;EACjB,CAAC,EAAE,CACDlD,aAAa,EACbxB,QAAQ,EACRF,QAAQ,EACRD,KAAK,EACLoB,QAAQ,EACRP,yBAAyB,EACzBW,mBAAmB,EACnBb,gBAAgB,CACjB,CAAC;EAEF,MAAM+E,oBAAoB,GAAG1I,WAAW,CAAC,MAAK;IAC5CkE,kBAAkB,GAAG,EAAE,CAAC;EAC1B,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,MAAMyE,iBAAiB,GAAG3I,WAAW,CAAC,MAAK;IACzCyE,YAAY,CAACgC,OAAO,EAAEmC,KAAK,EAAE;IAE7BF,oBAAoB,EAAE;IAEtB5D,iBAAiB,CAACT,iBAAkB,CAAC;IACrCW,OAAO,CAACqB,eAAe,CAAC,EAAE,CAAC,CAAC;IAC5BU,YAAY,EAAE;EAChB,CAAC,EAAE,CACD1C,iBAAiB,EACjBgC,eAAe,EACf5B,YAAY,EACZiE,oBAAoB,EACpB3B,YAAY,CACb,CAAC;EAEF,MAAM8B,OAAO,GAAG7I,WAAW,CACzB,CAACiD,QAAA,GAAuB,EAAE,EAAE6F,uBAAuB,GAAG,KAAK,KAAI;IAC7D,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC/F,QAAQ,CAAC,EAC1BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IAEvB,MAAMgG,WAAW,GAAehG,QAAQ,CAACiG,GAAG,CAACC,OAAO,IAAG;MACrD,OAAAjB,MAAA,CAAAC,MAAA,KACKgB,OAAO;QACV9F,IAAI,EAAEA,IAAK;QACX+F,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBC,GAAG,EAAElG,kBAAkB,GAAE;MAAE;IAE/B,CAAC,CAAC;IAEF,IAAI0F,uBAAuB,KAAK,IAAI,EAAE;MACpCjC,aAAa,EAAE;MAEf8B,iBAAiB,EAAE;IACrB;IAEArF,MAAM,GAAG2F,WAAW,CAAC;EACvB,CAAC,EACD,CAAC7F,kBAAkB,EAAEE,MAAM,EAAED,IAAI,EAAEsF,iBAAiB,EAAE9B,aAAa,CAAC,CACrE;EAED,MAAM0C,kBAAkB,GAAGvJ,WAAW,CACnCwJ,IAAwB,IAAI;IAC3B,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAChCtF,iBAAkB,EAClBqF,IAAI,CAACE,GAAG,CAACtF,iBAAkB,EAAEkF,IAAI,CAACzD,MAAM,CAAC,CAC1C;IAEDjB,iBAAiB,CAAC2E,iBAAiB,CAAC;EACtC,CAAC,EACD,CAACnF,iBAAiB,EAAED,iBAAiB,CAAC,CACvC;EAED,MAAMwF,mBAAmB,GAAG7J,WAAW,CACpC8J,KAAa,IAAI;IAChB,IAAI7E,gBAAgB,EAClB;IAEFf,kBAAkB,GAAG4F,KAAK,CAAC;IAG3B,IAAI9G,KAAK,CAAC+B,IAAI,KAAKwB,SAAS,EAC1BvB,OAAO,CAAC8E,KAAK,CAAC;EAClB,CAAC,EACD,CAAC5F,kBAAkB,EAAEe,gBAAgB,EAAEjC,KAAK,CAAC+B,IAAI,CAAC,CACnD;EAED,MAAMgF,yBAAyB,GAAG/J,WAAW,CAC1CgK,CAAoB,IAAI;IACvB,MAAM;MAAEC;IAAM,CAAE,GAAGD,CAAC,CAACE,WAAW;IAEhC,IAAID,MAAM,CAAClE,MAAM,IAAI,CAAC,EACpB;IAEF2C,oBAAoB,EAAE;IAEtB9D,gBAAgB,CAAC,IAAI,CAAC;IACtBE,iBAAiB,CAACT,iBAAkB,CAAC;IACrCW,OAAO,CAACqB,eAAe,CAACnD,WAAW,CAAC,CAAC;EACvC,CAAC,EACD,CAACA,WAAW,EAAEmB,iBAAiB,EAAEqE,oBAAoB,EAAErC,eAAe,CAAC,CACxE;EAED,MAAM8D,oBAAoB,GAAGtK,OAAO,CAAC,MAAK;IACxC,IAAI,CAAC8E,aAAa,EAChB,OAAO,IAAI;IAEb,MAAMyF,iBAAiB,GAAAlC,MAAA,CAAAC,MAAA,KAClBnF,KAAK;MACR+B,IAAI,EAAEsB,eAAe,CAACtB,IAAK,CAAC;MAC5BF,cAAc,EAAE6E,IAAI,CAACC,GAAG,CAACtF,iBAAkB,EAAEQ,cAAc,CAAC;MAC5DvB,MAAM,EAAEuF,OAAO;MACfU,kBAAkB;MAClBc,aAAa,EAAER,mBAAmB;MAClCnG,cAAc,EAAAwE,MAAA,CAAAC,MAAA,KACTzE,cAAc;QACjB4G,GAAG,EAAE7F,YAAY;QACjB8F,SAAS,EAAEtF,gBAAgB,GAAG,CAAC,GAAGd;MAAc;IACjD,EACF;IAED,IAAIP,kBAAkB,EACpB,OAAOA,kBAAkB,CAACwG,iBAAiB,CAAC;IAE9C,OAAO9H,OAAA,CAACnB,YAAY,EAAA+G,MAAA,CAAAC,MAAA,KAAKiC,iBAAiB;MAAA9B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAG;EAChD,CAAC,EAAE,CACD9D,aAAa,EACbkE,OAAO,EACPxC,eAAe,EACflC,cAAc,EACdE,iBAAiB,EACjBkF,kBAAkB,EAClBvG,KAAK,EACL+B,IAAI,EACJnB,kBAAkB,EAClBiB,cAAc,EACdI,gBAAgB,EAChBR,YAAY,EACZf,cAAc,EACdmG,mBAAmB,CACpB,CAAC;EAEF,MAAMW,aAAa,GAAG3K,OAAO,CAC3B,OAAO;IACL4D,WAAW,EACTA,WAAW,KACV,OAAO;MACNgH,0BAA0B,EACxBlG,cAAc,CAACkC,OAAQ,CAACgE;KAC3B,CAAC,CAAC;IACLC,SAAS,EAAEA,CAAA,KAAMnH;GAClB,CAAC,EACF,CAACE,WAAW,EAAEF,MAAM,CAAC,CACtB;EAED3D,SAAS,CAAC,MAAK;IACb,IAAIoD,KAAK,CAAC+B,IAAI,IAAI,IAAI,EACpBC,OAAO,CAAChC,KAAK,CAAC+B,IAAI,CAAC;EACvB,CAAC,EAAE,CAAC/B,KAAK,CAAC+B,IAAI,CAAC,CAAC;EAEhBnF,SAAS,CAAC,MAAK;IACb,IAAI,CAACwE,QAAQ,IAAInB,QAAQ,EAAE0H,MAAM,EAC/B1D,UAAU,CAAC,MAAMC,cAAc,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC;EAChD,CAAC,EAAE,CAACjE,QAAQ,EAAE0H,MAAM,EAAEvG,QAAQ,EAAE8C,cAAc,CAAC,CAAC;EAEhDlF,mBAAmB,CACjB;IAAA,MAAAyD,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,MAAAiF,aAAA,GAAAA,CAAA,KAAMzF,QAAQ,CAACY,MAAM,CAACC,KAAK;IAAA4E,aAAA,CAAA3E,SAAA;MAAAd;IAAA;IAAAyF,aAAA,CAAA1E,aAAA;IAAA0E,aAAA,CAAAzE,UAAA,GAAAtD,gCAAA;IAAA+H,aAAA,CAAAxE,cAAA,GAAAX,EAAA;IAAA,OAAAmF,aAAA;EAAA,CAA3B,IACA;IAAA,MAAAnF,EAAA,QAAAC,MAAA,CAAAC,KAAA;IAAA,MAAAkF,aAAA,YAAAA,CAAC7E,KAAK,EAAE8E,SAAS,EAAI;MACnB,IAAIA,SAAS,IAAI9E,KAAK,KAAK8E,SAAS,EAAE;QACpC,MAAMC,kBAAkB,GAAG/E,KAAK,GAAG8E,SAAS;QAC5C,IAAIC,kBAAkB,KAAK3F,wBAAwB,CAACY,KAAK,EAAE;UACzDZ,wBAAwB,CAACY,KAAK,GAAG+E,kBAAkB;UACnDxF,oBAAoB,CAACS,KAAK,GAAG9D,UAAU,CACrC6I,kBAAkB,GAAGzF,MAAM,CAAC0F,MAAM,GAAG,CAAC,EACtC;YACEC,QAAQ,EAAE;WACX,CACF;UAED,IAAIF,kBAAkB,EACpB5I,OAAO,CAACwE,oCAAoC,CAAC,EAAE,MAE/CxE,OAAO,CAACqE,oCAAoC,CAAC,EAAE;UAEjD,IAAIR,KAAK,KAAK,CAAC,EAAE;YACf7D,OAAO,CAAC4E,YAAY,CAAC,EAAE;UACzB,CAAC,MAAM;YACL5E,OAAO,CAAC0E,aAAa,CAAC,EAAE;YACxB1E,OAAO,CAAC6E,oBAAoB,CAAC,EAAE;UACjC;QACF;MACF;IACF,CAAC;IAAA6D,aAAA,CAAA5E,SAAA;MAAAb,wBAAA;MAAAG,oBAAA;MAAArD,UAAA;MAAAoD,MAAA;MAAAnD,OAAA;MAAAwE,oCAAA;MAAAH,oCAAA;MAAAO,YAAA;MAAAF,aAAA;MAAAG;IAAA;IAAA6D,aAAA,CAAA3E,aAAA;IAAA2E,aAAA,CAAA1E,UAAA,GAAArD,gCAAA;IAAA+H,aAAA,CAAAzE,cAAA,GAAAX,EAAA;IAAA,OAAAoF,aAAA;EAAA,CAzBD,IA0BA,CACE1F,QAAQ,EACRC,wBAAwB,EACxBE,MAAM,EACNkB,oCAAoC,EACpCG,oCAAoC,EACpCI,YAAY,EACZF,aAAa,EACbG,oBAAoB,CACrB,CACF;EAED,OACE1E,OAAA,CAACpB,iBAAiB,CAACgK,QAAQ;IAAClF,KAAK,EAAEwE,aAAc;IAAAvC,QAAA,EAC/C3F,OAAA,CAACrC,mBAAmB;MAACqK,GAAG,EAAE/F,cAAe;MAAA0D,QAAA,EACvC3F,OAAA,CAAChC,IAAI;QACH6K,MAAM,EAAEpK,OAAO,CAACqK,OAAQ;QACxBtD,KAAK,EAAE,CAACC,MAAM,CAACC,IAAI,EAAED,MAAM,CAACsD,gBAAgB,CAAE;QAC9CC,QAAQ,EAAEvB,yBAA0B;QAAA9B,QAAA,EAEnCtD,aAAa,GAEVrC,OAAA,CAACT,QAAQ,CAACvB,IAAI;UAACwH,KAAK,EAAE,CAACC,MAAM,CAACC,IAAI,EAAExC,gBAAgB,CAAE;UAAAyC,QAAA,GACnDT,cAAc,EACd2C,oBAAoB;QAAA;UAAA7B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,GAGhBjF,aAAa,GAAE;MAChB;QAAA8E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB;EACvB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA4B,CAAC;AAEjC;AAEA1F,UAAU,CAACwI,MAAM,GAAG,CAClBC,eAAA,GAA8B,EAAE,EAChCvI,QAAoB,EACpBmB,QAAQ,GAAG,IAAI,KACb;EACF,IAAI,CAAC2E,KAAK,CAACC,OAAO,CAAC/F,QAAQ,CAAC,EAC1BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;EAEvB,OAAOmB,QAAQ,GACXnB,QAAQ,CAACwI,MAAM,CAACD,eAAe,CAAC,GAChCA,eAAe,CAACC,MAAM,CAACxI,QAAQ,CAAC;AACtC,CAAC;AAEDF,UAAU,CAAC2I,OAAO,GAAG,CACnBF,eAAA,GAA8B,EAAE,EAChCvI,QAAoB,EACpBmB,QAAQ,GAAG,IAAI,KACb;EACF,IAAI,CAAC2E,KAAK,CAACC,OAAO,CAAC/F,QAAQ,CAAC,EAC1BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;EAEvB,OAAOmB,QAAQ,GACXoH,eAAe,CAACC,MAAM,CAACxI,QAAQ,CAAC,GAChCA,QAAQ,CAACwI,MAAM,CAACD,eAAe,CAAC;AACtC,CAAC;AAED,MAAMzD,MAAM,GAAG1H,UAAU,CAACsL,MAAM,CAAC;EAC/B3D,IAAI,EAAE;IACJ4D,IAAI,EAAE;GACP;EACDP,gBAAgB,EAAE;IAChBQ,QAAQ,EAAE;;CAEb,CAAC;AAEF,cAAc,UAAU;AACxB,SACE9I,UAAU,EACVtC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNe,aAAa,EACbH,YAAY,EACZC,WAAW,EACXZ,QAAQ,EACRI,GAAG,EACHG,YAAY,EACZC,WAAW,EACXC,OAAO,EACPC,gBAAgB,EAChBG,IAAI,EACJE,IAAI,EACJV,YAAY,EACZW,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}