{"ast":null,"code":"import { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ActionType } from '../../../ActionType';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { extractGestureRelations, checkGestureCallbacksForWorklets, ALLOWED_PROPS } from './utils';\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef\n}) {\n  gestureConfig.initialize();\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, extractGestureRelations(handler)));\n    }\n    scheduleFlushOperations();\n  });\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n    }\n  }\n  preparedGesture.attachedGestures = gesturesToAttach;\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = g => g.shouldUseReanimated;\n    preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map(g => g.handlers);\n  }\n}","map":{"version":3,"names":["registerHandler","RNGestureHandlerModule","filterConfig","scheduleFlushOperations","ActionType","Platform","ghQueueMicrotask","extractGestureRelations","checkGestureCallbacksForWorklets","ALLOWED_PROPS","attachHandlers","preparedGesture","gestureConfig","gesturesToAttach","viewTag","webEventHandlersRef","initialize","isMounted","prepare","handler","createGestureHandler","handlerName","handlerTag","config","testId","updateGestureHandler","gesture","actionType","shouldUseReanimated","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","OS","attachGestureHandler","JS_FUNCTION_OLD_API","attachedGestures","animatedHandlers","isAnimatedGesture","g","value","filter","map","handlers"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector\\attachHandlers.ts"],"sourcesContent":["import React from 'react';\nimport { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ActionType } from '../../../ActionType';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../../RNGestureHandlerModule.web';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState, WebEventHandler } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\n\ninterface AttachHandlersConfig {\n  preparedGesture: AttachedGestureState;\n  gestureConfig: ComposedGesture | GestureType;\n  gesturesToAttach: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  gestureConfig.initialize();\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // Ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n  }\n\n  preparedGesture.attachedGestures = gesturesToAttach;\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesturesToAttach\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAT,QAAgC,wBAAhC;AACA,OAAOC,sBAAP,MAAmC,iCAAnC;AACA,SAASC,YAAT,EAAuBC,uBAAvB,QAAsD,aAAtD;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAAA,OAAAC,QAAA;AAGA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,SACEC,uBADF,EAEEC,gCAFF,EAGEC,aAHF,QAIO,SAJP;AAcA,OAAO,SAASC,cAATA,CAAwB;EAC7BC,eAD6B;EAE7BC,aAF6B;EAG7BC,gBAH6B;EAI7BC,OAJ6B;EAK7BC;AAL6B,CAAxB,EAMkB;EACvBH,aAAa,CAACI,UAAd;EAIAV,gBAAgB,CAAC,MAAM;IACrB,IAAI,CAACK,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACDL,aAAa,CAACM,OAAd;EACD,CALe,CAAhB;EAOA,KAAK,MAAMC,OAAX,IAAsBN,gBAAtB,EAAwC;IACtCL,gCAAgC,CAACW,OAAD,CAAhC;IACAlB,sBAAsB,CAACmB,oBAAvB,CACED,OAAO,CAACE,WADV,EAEEF,OAAO,CAACG,UAFV,EAGEpB,YAAY,CAACiB,OAAO,CAACI,MAAT,EAAiBd,aAAjB,CAHd;IAMAT,eAAe,CAACmB,OAAO,CAACG,UAAT,EAAqBH,OAArB,EAA8BA,OAAO,CAACI,MAAR,CAAeC,MAA7C,CAAf;EACD;EAIDlB,gBAAgB,CAAC,MAAM;IACrB,IAAI,CAACK,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACD,KAAK,MAAME,OAAX,IAAsBN,gBAAtB,EAAwC;MACtCZ,sBAAsB,CAACwB,oBAAvB,CACEN,OAAO,CAACG,UADV,EAEEpB,YAAY,CACViB,OAAO,CAACI,MADE,EAEVd,aAFU,EAGVF,uBAAuB,CAACY,OAAD,CAHb,CAFd;IAQD;IAEDhB,uBAAuB;EACxB,CAhBe,CAAhB;EAkBA,KAAK,MAAMuB,OAAX,IAAsBb,gBAAtB,EAAwC;IACtC,MAAMc,UAAU,GAAGD,OAAO,CAACE,mBAAR,GACfxB,UAAU,CAACyB,kBADI,GAEfzB,UAAU,CAAC0B,mBAFf;IAIA,IAAIzB,QAAQ,CAAC0B,EAAT,KAAgB,KAApB,EAA2B;MAEvB9B,sBAAsB,CAAC+B,oBADzB,CAGEN,OAAO,CAACJ,UAHV,EAIER,OAJF,EAKEV,UAAU,CAAC6B,mBALb,EAMElB,mBANF;IAQD,CATD,MASO;MACLd,sBAAsB,CAAC+B,oBAAvB,CACEN,OAAO,CAACJ,UADV,EAEER,OAFF,EAGEa,UAHF;IAKD;EACF;EAEDhB,eAAe,CAACuB,gBAAhB,GAAmCrB,gBAAnC;EAEA,IAAIF,eAAe,CAACwB,gBAApB,EAAsC;IACpC,MAAMC,iBAAiB,GAAIC,CAAD,IAAoBA,CAAC,CAACT,mBAAhD;IAEAjB,eAAe,CAACwB,gBAAhB,CAAiCG,KAAjC,GAAyCzB,gBAAgB,CACtD0B,MADsC,CAC/BH,iBAD+B,EAEtCI,GAFsC,CAEjCH,CAAD,IAAOA,CAAC,CAACI,QAFyB,CAAzC;EAKD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}