{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-dropdown-picker\\\\src\\\\components\\\\RenderBadgeItem.js\";\nimport React, { memo, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { RTL_DIRECTION, RTL_STYLE } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderBadge({\n  rtl,\n  label,\n  props,\n  value,\n  textStyle,\n  badgeStyle,\n  badgeTextStyle,\n  badgeDotStyle,\n  getBadgeColor,\n  getBadgeDotColor,\n  showBadgeDot,\n  onPress,\n  THEME\n}) {\n  const __onPress = useCallback(() => onPress(value), [onPress, value]);\n  const _badgeStyle = useMemo(() => [RTL_DIRECTION(rtl, THEME.badgeStyle), ...[badgeStyle].flat(), {\n    backgroundColor: getBadgeColor(value)\n  }], [THEME, rtl, badgeStyle, getBadgeColor]);\n  const _badgeDotStyle = useMemo(() => [RTL_STYLE(rtl, THEME.badgeDotStyle), ...[badgeDotStyle].flat(), {\n    backgroundColor: getBadgeDotColor(value)\n  }], [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n  const _badgeTextStyle = useMemo(() => [...[textStyle].flat(), ...[badgeTextStyle].flat()], [textStyle, badgeTextStyle]);\n  return _jsxDEV(TouchableOpacity, Object.assign({\n    style: _badgeStyle\n  }, props, {\n    onPress: __onPress,\n    children: [showBadgeDot && _jsxDEV(View, {\n      style: _badgeDotStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 30\n    }, this), _jsxDEV(Text, {\n      style: _badgeTextStyle,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\nconst areEqual = (nextProps, prevProps) => {\n  if (nextProps.label !== prevProps.label) return false;\n  if (nextProps.value !== prevProps.value) return false;\n  if (nextProps.showBadgeDot !== prevProps.showBadgeDot) return false;\n  if (nextProps.rtl !== prevProps.rtl) return false;\n  if (nextProps.theme !== prevProps.theme) return false;\n  return true;\n};\nexport default memo(RenderBadge, areEqual);","map":{"version":3,"names":["React","memo","useCallback","useMemo","View","Text","TouchableOpacity","RTL_DIRECTION","RTL_STYLE","jsxDEV","_jsxDEV","RenderBadge","rtl","label","props","value","textStyle","badgeStyle","badgeTextStyle","badgeDotStyle","getBadgeColor","getBadgeDotColor","showBadgeDot","onPress","THEME","__onPress","_badgeStyle","flat","backgroundColor","_badgeDotStyle","_badgeTextStyle","Object","assign","style","children","fileName","_jsxFileName","lineNumber","columnNumber","areEqual","nextProps","prevProps","theme"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-dropdown-picker/src/components/RenderBadgeItem.js"],"sourcesContent":["import React, {\n    memo, useCallback, useMemo\n} from 'react';\n\nimport {\n    View,\n    Text,\n    TouchableOpacity\n} from 'react-native';\n\nimport { RTL_DIRECTION, RTL_STYLE } from '../constants';\n\nfunction RenderBadge({\n    rtl,\n    label,\n    props,\n    value,\n    textStyle,\n    badgeStyle,\n    badgeTextStyle,\n    badgeDotStyle,\n    getBadgeColor,\n    getBadgeDotColor,\n    showBadgeDot,\n    onPress,\n    THEME\n}) {\n    /**\n     * onPress.\n     */\n    const __onPress = useCallback(() => onPress(value), [onPress, value]);\n\n    /**\n     * The badge style.\n     * @returns {object}\n     */\n    const _badgeStyle = useMemo(() => ([\n        RTL_DIRECTION(rtl, THEME.badgeStyle),\n        ...[badgeStyle].flat(), {\n            backgroundColor: getBadgeColor(value)\n        }\n    ]), [THEME, rtl, badgeStyle, getBadgeColor]);\n\n    /**\n     * The badge dot style.\n     * @return {object}\n     */\n    const _badgeDotStyle = useMemo(() => ([\n        RTL_STYLE(rtl, THEME.badgeDotStyle),\n        ...[badgeDotStyle].flat(), {\n            backgroundColor: getBadgeDotColor(value)\n        }\n    ]), [THEME, rtl, badgeDotStyle, getBadgeDotColor]);\n\n    /**\n     * The badge text style.\n     * @returns {object}\n     */\n    const _badgeTextStyle = useMemo(() => ([\n        ...[textStyle].flat(),\n        ...[badgeTextStyle].flat()\n    ]), [textStyle, badgeTextStyle]);\n\n    return (\n        <TouchableOpacity style={_badgeStyle} {...props} onPress={__onPress}>\n            {showBadgeDot && <View style={_badgeDotStyle} />}\n            <Text style={_badgeTextStyle}>{label}</Text>\n        </TouchableOpacity>\n    );\n}\n\nconst areEqual = (nextProps, prevProps) => {\n    if (nextProps.label !== prevProps.label)\n        return false;\n    if (nextProps.value !== prevProps.value)\n        return false;\n    if (nextProps.showBadgeDot !== prevProps.showBadgeDot)\n        return false;\n    if (nextProps.rtl !== prevProps.rtl)\n        return false;\n    if (nextProps.theme !== prevProps.theme)\n        return false;\n\n    return true;\n}\n\nexport default memo(RenderBadge, areEqual);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}