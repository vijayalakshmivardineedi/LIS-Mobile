{"ast":null,"code":"import { useRef } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nconst now = () => +new Date();\nconst {\n  width,\n  height\n} = Dimensions.get(\"window\");\nconst INIT_POSITION = {\n  x: 0,\n  y: 0\n};\nexport const useGesture = ({\n  doubleTapGapTimer = 500,\n  doubleTapAnimationDuration = 100,\n  doubleTapZoomEnabled = true,\n  doubleTapCallback,\n  doubleTapZoomToCenter,\n  doubleTapMaxZoom = 2,\n  doubleTapInitialScale = 1,\n  doubleTapZoomStep = 0.5,\n  UNSAFE_INNER_WIDTH__cropWidth = width,\n  UNSAFE_INNER_WIDTH__cropHeight = height,\n  longPressGapTimer = 2000,\n  longPressCallback,\n  useNativeDriver\n}) => {\n  const lastTapTimer = useRef(0);\n  const longPressTimer = useRef();\n  const isDoubleTaped = useRef(false);\n  const isLongPressed = useRef(false);\n  const coordinates = useRef(INIT_POSITION);\n  const doubleTapScale = useRef(doubleTapInitialScale);\n  const animatedScale = useRef(new Animated.Value(1));\n  const animatedPositionX = useRef(new Animated.Value(INIT_POSITION.x));\n  const animatedPositionY = useRef(new Animated.Value(INIT_POSITION.y));\n  const animations = useRef();\n  const init = () => {\n    isDoubleTaped.current = false;\n    isLongPressed.current = false;\n  };\n  const release = () => {\n    if (longPressTimer.current) clearTimeout(longPressTimer.current);\n  };\n  const onDoubleTap = (e, gestureState) => {\n    if (gestureState.numberActiveTouches > 1) return;\n    const nowTapTimer = now();\n    if (nowTapTimer - lastTapTimer.current < doubleTapGapTimer) {\n      isDoubleTaped.current = true;\n      lastTapTimer.current = 0;\n      if (doubleTapCallback) doubleTapCallback(e, gestureState);\n      if (!doubleTapZoomEnabled) return;\n      longPressTimer.current && clearTimeout(longPressTimer.current);\n      doubleTapScale.current = doubleTapScale.current + doubleTapInitialScale * doubleTapZoomStep;\n      if (doubleTapScale.current > doubleTapMaxZoom) {\n        doubleTapScale.current = doubleTapInitialScale;\n      }\n      coordinates.current = {\n        x: e.nativeEvent.changedTouches[0].pageX,\n        y: e.nativeEvent.changedTouches[0].pageY\n      };\n      if (doubleTapZoomToCenter) {\n        coordinates.current = {\n          x: UNSAFE_INNER_WIDTH__cropWidth / 2,\n          y: UNSAFE_INNER_WIDTH__cropHeight / 2\n        };\n      }\n      Animated.parallel([Animated.timing(animatedScale.current, {\n        toValue: doubleTapScale.current,\n        duration: doubleTapAnimationDuration,\n        useNativeDriver\n      }), Animated.timing(animatedPositionX.current, {\n        toValue: (UNSAFE_INNER_WIDTH__cropWidth / 2 - coordinates.current.x) * (doubleTapScale.current - doubleTapInitialScale) / doubleTapScale.current,\n        duration: doubleTapAnimationDuration,\n        useNativeDriver\n      }), Animated.timing(animatedPositionY.current, {\n        toValue: (UNSAFE_INNER_WIDTH__cropHeight / 2 - coordinates.current.y) * (doubleTapScale.current - doubleTapInitialScale) / doubleTapScale.current,\n        duration: doubleTapAnimationDuration,\n        useNativeDriver\n      })]).start();\n      animations.current = {\n        transform: [{\n          scale: animatedScale.current\n        }, {\n          translateX: animatedPositionX.current\n        }, {\n          translateY: animatedPositionY.current\n        }]\n      };\n    } else {\n      lastTapTimer.current = nowTapTimer;\n    }\n  };\n  const onLongPress = (e, gestureState) => {\n    if (longPressTimer.current) {\n      clearTimeout(longPressTimer.current);\n      longPressTimer.current = null;\n    }\n    longPressTimer.current = setTimeout(() => {\n      isLongPressed.current = true;\n      if (longPressCallback) {\n        longPressCallback(e, gestureState);\n      }\n    }, longPressGapTimer);\n  };\n  const reset = () => {\n    animatedScale.current.setValue(doubleTapInitialScale);\n    animatedPositionX.current.setValue(INIT_POSITION.x);\n    animatedPositionY.current.setValue(INIT_POSITION.y);\n    animations.current = void 0;\n  };\n  return [{\n    onDoubleTap,\n    reset,\n    init,\n    release,\n    onLongPress,\n    isDoubleTaped: isDoubleTaped.current,\n    isLongPressed: isLongPressed.current\n  }, animations.current];\n};","map":{"version":3,"names":["useRef","Dimensions","Animated","now","Date","width","height","get","INIT_POSITION","x","y","useGesture","doubleTapGapTimer","doubleTapAnimationDuration","doubleTapZoomEnabled","doubleTapCallback","doubleTapZoomToCenter","doubleTapMaxZoom","doubleTapInitialScale","doubleTapZoomStep","UNSAFE_INNER_WIDTH__cropWidth","UNSAFE_INNER_WIDTH__cropHeight","longPressGapTimer","longPressCallback","useNativeDriver","lastTapTimer","longPressTimer","isDoubleTaped","isLongPressed","coordinates","doubleTapScale","animatedScale","Value","animatedPositionX","animatedPositionY","animations","init","current","release","clearTimeout","onDoubleTap","e","gestureState","numberActiveTouches","nowTapTimer","nativeEvent","changedTouches","pageX","pageY","parallel","timing","toValue","duration","start","transform","scale","translateX","translateY","onLongPress","setTimeout","reset","setValue"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-lightbox-v2/dist/hooks/use-gesture.js"],"sourcesContent":["import { useRef } from \"react\";\nimport { Dimensions, Animated, } from \"react-native\";\n// -------------------------  default vars  ------------------------\nconst now = () => +new Date();\nconst { width, height } = Dimensions.get(\"window\");\nconst INIT_POSITION = { x: 0, y: 0 };\n// -------------------------  hooks  -------------------------\nexport const useGesture = ({ doubleTapGapTimer = 500, doubleTapAnimationDuration = 100, doubleTapZoomEnabled = true, doubleTapCallback, doubleTapZoomToCenter, doubleTapMaxZoom = 2, doubleTapInitialScale = 1, doubleTapZoomStep = 0.5, UNSAFE_INNER_WIDTH__cropWidth = width, UNSAFE_INNER_WIDTH__cropHeight = height, longPressGapTimer = 2000, longPressCallback, \n// longPressToSaveEnable = false,\nuseNativeDriver, }) => {\n    // last tap timer\n    const lastTapTimer = useRef(0);\n    // long press timer\n    const longPressTimer = useRef();\n    // if double taped\n    const isDoubleTaped = useRef(false);\n    // if long pressed\n    const isLongPressed = useRef(false);\n    // double tap coordinates\n    const coordinates = useRef(INIT_POSITION);\n    // double tap scale\n    const doubleTapScale = useRef(doubleTapInitialScale);\n    // animated\n    const animatedScale = useRef(new Animated.Value(1));\n    const animatedPositionX = useRef(new Animated.Value(INIT_POSITION.x));\n    const animatedPositionY = useRef(new Animated.Value(INIT_POSITION.y));\n    // animation style to export\n    const animations = useRef();\n    // init the status\n    const init = () => {\n        isDoubleTaped.current = false;\n        isLongPressed.current = false;\n    };\n    const release = () => {\n        if (longPressTimer.current)\n            clearTimeout(longPressTimer.current);\n    };\n    const onDoubleTap = (e, gestureState) => {\n        if (gestureState.numberActiveTouches > 1)\n            return;\n        const nowTapTimer = now();\n        // double tap\n        if ((nowTapTimer - lastTapTimer.current) < doubleTapGapTimer) {\n            isDoubleTaped.current = true;\n            lastTapTimer.current = 0;\n            // double tap callback\n            if (doubleTapCallback)\n                doubleTapCallback(e, gestureState);\n            // double tap zoom\n            if (!doubleTapZoomEnabled)\n                return;\n            // cancel long press\n            longPressTimer.current && clearTimeout(longPressTimer.current);\n            // next scale\n            doubleTapScale.current = doubleTapScale.current + doubleTapInitialScale * doubleTapZoomStep;\n            if (doubleTapScale.current > doubleTapMaxZoom) {\n                doubleTapScale.current = doubleTapInitialScale;\n            }\n            coordinates.current = {\n                x: e.nativeEvent.changedTouches[0].pageX,\n                y: e.nativeEvent.changedTouches[0].pageY,\n            };\n            if (doubleTapZoomToCenter) {\n                coordinates.current = {\n                    x: UNSAFE_INNER_WIDTH__cropWidth / 2,\n                    y: UNSAFE_INNER_WIDTH__cropHeight / 2,\n                };\n            }\n            Animated.parallel([\n                Animated.timing(animatedScale.current, {\n                    toValue: doubleTapScale.current,\n                    duration: doubleTapAnimationDuration,\n                    useNativeDriver,\n                }),\n                Animated.timing(animatedPositionX.current, {\n                    toValue: ((UNSAFE_INNER_WIDTH__cropWidth / 2 - coordinates.current.x) *\n                        (doubleTapScale.current - doubleTapInitialScale)) /\n                        doubleTapScale.current,\n                    duration: doubleTapAnimationDuration,\n                    useNativeDriver,\n                }),\n                Animated.timing(animatedPositionY.current, {\n                    toValue: ((UNSAFE_INNER_WIDTH__cropHeight / 2 - coordinates.current.y) *\n                        (doubleTapScale.current - doubleTapInitialScale)) /\n                        doubleTapScale.current,\n                    duration: doubleTapAnimationDuration,\n                    useNativeDriver,\n                }),\n            ]).start();\n            animations.current = {\n                transform: [\n                    {\n                        scale: animatedScale.current,\n                    },\n                    {\n                        translateX: animatedPositionX.current,\n                    },\n                    {\n                        translateY: animatedPositionY.current,\n                    },\n                ],\n            };\n        }\n        else {\n            lastTapTimer.current = nowTapTimer;\n        }\n    };\n    const onLongPress = (e, gestureState) => {\n        if (longPressTimer.current) {\n            clearTimeout(longPressTimer.current);\n            longPressTimer.current = null;\n        }\n        longPressTimer.current = setTimeout(() => {\n            isLongPressed.current = true;\n            if (longPressCallback) {\n                longPressCallback(e, gestureState);\n            }\n        }, longPressGapTimer);\n    };\n    // reset\n    const reset = () => {\n        // double tap animations reset\n        animatedScale.current.setValue(doubleTapInitialScale);\n        animatedPositionX.current.setValue(INIT_POSITION.x);\n        animatedPositionY.current.setValue(INIT_POSITION.y);\n        animations.current = void 0;\n    };\n    // todo pinch to zoom\n    return [\n        {\n            onDoubleTap,\n            reset,\n            init,\n            release,\n            onLongPress,\n            isDoubleTaped: isDoubleTaped.current,\n            isLongPressed: isLongPressed.current\n        },\n        animations.current,\n    ];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}