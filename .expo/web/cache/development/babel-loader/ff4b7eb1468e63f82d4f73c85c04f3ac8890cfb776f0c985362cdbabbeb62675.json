{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-lightbox-v2\\\\dist\\\\LightboxOverlay.js\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useGesture, useNextTick } from \"./hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  width: WINDOW_WIDTH,\n  height: WINDOW_HEIGHT\n} = Dimensions.get(\"window\");\nconst isIOS = Platform.OS === \"ios\";\nconst getDefaultTarget = () => ({\n  x: 0,\n  y: 0,\n  opacity: 1\n});\nconst styles = StyleSheet.create({\n  background: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    height: WINDOW_HEIGHT\n  },\n  open: {\n    position: \"absolute\",\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"transparent\"\n  },\n  header: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: WINDOW_WIDTH,\n    backgroundColor: \"transparent\"\n  },\n  closeButton: {\n    fontSize: 35,\n    color: \"white\",\n    lineHeight: 60,\n    width: 70,\n    textAlign: \"center\",\n    shadowOffset: {\n      width: 0,\n      height: 0\n    },\n    shadowRadius: 1.5,\n    shadowColor: \"black\",\n    shadowOpacity: 0.8\n  }\n});\nconst LightboxOverlay = ({\n  useNativeDriver,\n  dragDismissThreshold,\n  springConfig,\n  isOpen,\n  onClose,\n  willClose,\n  didOpen,\n  swipeToDismiss,\n  origin,\n  backgroundColor,\n  renderHeader,\n  modalProps,\n  children,\n  doubleTapZoomEnabled,\n  doubleTapGapTimer,\n  doubleTapCallback,\n  doubleTapZoomToCenter,\n  doubleTapMaxZoom,\n  doubleTapZoomStep,\n  doubleTapInitialScale,\n  doubleTapAnimationDuration,\n  longPressGapTimer,\n  longPressCallback\n}) => {\n  const _panResponder = useRef();\n  const pan = useRef(new Animated.Value(0));\n  const openVal = useRef(new Animated.Value(0));\n  const handlers = useRef();\n  const [gesture, animations] = useGesture({\n    useNativeDriver,\n    doubleTapZoomEnabled,\n    doubleTapGapTimer,\n    doubleTapCallback,\n    doubleTapZoomToCenter,\n    doubleTapMaxZoom,\n    doubleTapZoomStep,\n    doubleTapInitialScale,\n    doubleTapAnimationDuration,\n    longPressGapTimer,\n    longPressCallback\n  });\n  const [{\n    isAnimating,\n    isPanning,\n    target\n  }, setState] = useState({\n    isAnimating: false,\n    isPanning: false,\n    target: getDefaultTarget()\n  });\n  const handleCloseNextTick = useNextTick(onClose);\n  const close = () => {\n    willClose();\n    if (isIOS) {\n      StatusBar.setHidden(false, \"fade\");\n    }\n    gesture.reset();\n    setState(s => Object.assign({}, s, {\n      isAnimating: true\n    }));\n    Animated.spring(openVal.current, Object.assign({\n      toValue: 0\n    }, springConfig, {\n      useNativeDriver\n    })).start(({\n      finished\n    }) => {\n      if (finished) {\n        setState(s => Object.assign({}, s, {\n          isAnimating: false\n        }));\n        handleCloseNextTick();\n      }\n    });\n  };\n  const open = () => {\n    if (isIOS) {\n      StatusBar.setHidden(true, \"fade\");\n    }\n    pan.current.setValue(0);\n    setState(s => Object.assign({}, s, {\n      isAnimating: true,\n      target: getDefaultTarget()\n    }));\n    Animated.spring(openVal.current, Object.assign({\n      toValue: 1\n    }, springConfig, {\n      useNativeDriver\n    })).start(({\n      finished\n    }) => {\n      if (finished) {\n        setState(s => Object.assign({}, s, {\n          isAnimating: false\n        }));\n        didOpen();\n      }\n    });\n  };\n  const initPanResponder = () => {\n    _panResponder.current = PanResponder.create({\n      onStartShouldSetPanResponder: () => !isAnimating,\n      onStartShouldSetPanResponderCapture: () => !isAnimating,\n      onMoveShouldSetPanResponder: () => !isAnimating,\n      onMoveShouldSetPanResponderCapture: () => !isAnimating,\n      onPanResponderGrant: (e, gestureState) => {\n        gesture.init();\n        pan.current.setValue(0);\n        setState(s => Object.assign({}, s, {\n          isPanning: true\n        }));\n        gesture.onLongPress(e, gestureState);\n        gesture.onDoubleTap(e, gestureState);\n      },\n      onPanResponderMove: Animated.event([null, {\n        dy: pan.current\n      }], {\n        useNativeDriver\n      }),\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderRelease: (evt, gestureState) => {\n        gesture.release();\n        if (gesture.isDoubleTaped) return;\n        if (gesture.isLongPressed) return;\n        if (Math.abs(gestureState.dy) > dragDismissThreshold) {\n          setState(s => Object.assign({}, s, {\n            isPanning: false,\n            target: {\n              y: gestureState.dy,\n              x: gestureState.dx,\n              opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT)\n            }\n          }));\n          close();\n        } else {\n          Animated.spring(pan.current, Object.assign({\n            toValue: 0\n          }, springConfig, {\n            useNativeDriver\n          })).start(({\n            finished\n          }) => {\n            finished && setState(s => Object.assign({}, s, {\n              isPanning: false\n            }));\n          });\n        }\n      }\n    });\n  };\n  useEffect(() => {\n    initPanResponder();\n  }, [useNativeDriver, isAnimating]);\n  useEffect(() => {\n    isOpen && open();\n  }, [isOpen]);\n  useEffect(() => {\n    if (_panResponder.current && swipeToDismiss) {\n      handlers.current = _panResponder.current.panHandlers;\n    }\n  }, [swipeToDismiss, _panResponder.current]);\n  const lightboxOpacityStyle = {\n    opacity: openVal.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, target.opacity]\n    })\n  };\n  let dragStyle;\n  if (isPanning) {\n    dragStyle = {\n      top: pan.current\n    };\n    lightboxOpacityStyle.opacity = pan.current.interpolate({\n      inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT],\n      outputRange: [0, 1, 0]\n    });\n  }\n  const openStyle = [styles.open, {\n    left: openVal.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: [origin.x, target.x]\n    }),\n    top: openVal.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: [origin.y, target.y]\n    }),\n    width: openVal.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: [origin.width, WINDOW_WIDTH]\n    }),\n    height: openVal.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: [origin.height, WINDOW_HEIGHT]\n    })\n  }];\n  const background = _jsxDEV(Animated.View, {\n    style: [styles.background, {\n      backgroundColor\n    }, lightboxOpacityStyle]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 25\n  }, this);\n  const header = _jsxDEV(Animated.View, {\n    style: [styles.header, lightboxOpacityStyle],\n    children: renderHeader ? renderHeader(close) : _jsxDEV(TouchableOpacity, {\n      onPress: close,\n      children: _jsxDEV(Text, {\n        style: styles.closeButton,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 21\n  }, this);\n  const content = _jsxDEV(Animated.View, Object.assign({\n    style: [openStyle, dragStyle, animations]\n  }, handlers.current, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 22\n  }, this);\n  return _jsxDEV(Modal, Object.assign({\n    visible: isOpen,\n    transparent: true,\n    onRequestClose: close\n  }, modalProps, {\n    children: [background, content, header]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 13\n  }, this);\n};\nexport default LightboxOverlay;","map":{"version":3,"names":["React","useRef","useEffect","useState","Animated","Dimensions","PanResponder","Platform","StyleSheet","StatusBar","TouchableOpacity","Text","Modal","useGesture","useNextTick","jsxDEV","_jsxDEV","width","WINDOW_WIDTH","height","WINDOW_HEIGHT","get","isIOS","OS","getDefaultTarget","x","y","opacity","styles","create","background","position","top","left","open","flex","justifyContent","backgroundColor","header","closeButton","fontSize","color","lineHeight","textAlign","shadowOffset","shadowRadius","shadowColor","shadowOpacity","LightboxOverlay","useNativeDriver","dragDismissThreshold","springConfig","isOpen","onClose","willClose","didOpen","swipeToDismiss","origin","renderHeader","modalProps","children","doubleTapZoomEnabled","doubleTapGapTimer","doubleTapCallback","doubleTapZoomToCenter","doubleTapMaxZoom","doubleTapZoomStep","doubleTapInitialScale","doubleTapAnimationDuration","longPressGapTimer","longPressCallback","_panResponder","pan","Value","openVal","handlers","gesture","animations","isAnimating","isPanning","target","setState","handleCloseNextTick","close","setHidden","reset","s","Object","assign","spring","current","toValue","start","finished","setValue","initPanResponder","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","e","gestureState","init","onLongPress","onDoubleTap","onPanResponderMove","event","dy","onPanResponderTerminationRequest","onPanResponderRelease","evt","release","isDoubleTaped","isLongPressed","Math","abs","dx","panHandlers","lightboxOpacityStyle","interpolate","inputRange","outputRange","dragStyle","openStyle","View","style","fileName","_jsxFileName","lineNumber","columnNumber","onPress","content","visible","transparent","onRequestClose"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-lightbox-v2/dist/LightboxOverlay.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { Animated, Dimensions, PanResponder, Platform, StyleSheet, StatusBar, TouchableOpacity, Text, Modal, } from \"react-native\";\nimport { useGesture, useNextTick } from \"./hooks\";\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get(\"window\");\nconst isIOS = Platform.OS === \"ios\";\nconst getDefaultTarget = () => ({ x: 0, y: 0, opacity: 1 });\nconst styles = StyleSheet.create({\n    background: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: WINDOW_WIDTH,\n        height: WINDOW_HEIGHT,\n    },\n    open: {\n        position: \"absolute\",\n        flex: 1,\n        justifyContent: \"center\",\n        // Android pan handlers crash without this declaration:\n        backgroundColor: \"transparent\",\n    },\n    header: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: WINDOW_WIDTH,\n        backgroundColor: \"transparent\",\n    },\n    closeButton: {\n        fontSize: 35,\n        color: \"white\",\n        lineHeight: 60,\n        width: 70,\n        textAlign: \"center\",\n        shadowOffset: {\n            width: 0,\n            height: 0,\n        },\n        shadowRadius: 1.5,\n        shadowColor: \"black\",\n        shadowOpacity: 0.8,\n    },\n});\nconst LightboxOverlay = ({ useNativeDriver, dragDismissThreshold, springConfig, isOpen, onClose, willClose, didOpen, swipeToDismiss, origin, backgroundColor, renderHeader, modalProps, children, doubleTapZoomEnabled, doubleTapGapTimer, doubleTapCallback, doubleTapZoomToCenter, doubleTapMaxZoom, doubleTapZoomStep, doubleTapInitialScale, doubleTapAnimationDuration, longPressGapTimer, longPressCallback }) => {\n    const _panResponder = useRef();\n    const pan = useRef(new Animated.Value(0));\n    const openVal = useRef(new Animated.Value(0));\n    const handlers = useRef();\n    const [gesture, animations] = useGesture({\n        useNativeDriver,\n        doubleTapZoomEnabled,\n        doubleTapGapTimer,\n        doubleTapCallback,\n        doubleTapZoomToCenter,\n        doubleTapMaxZoom,\n        doubleTapZoomStep,\n        doubleTapInitialScale,\n        doubleTapAnimationDuration,\n        longPressGapTimer,\n        longPressCallback\n    });\n    const [{ isAnimating, isPanning, target }, setState] = useState({\n        isAnimating: false,\n        isPanning: false,\n        target: getDefaultTarget(),\n    });\n    const handleCloseNextTick = useNextTick(onClose);\n    const close = () => {\n        willClose();\n        if (isIOS) {\n            StatusBar.setHidden(false, \"fade\");\n        }\n        gesture.reset();\n        setState((s) => ({\n            ...s,\n            isAnimating: true,\n        }));\n        Animated.spring(openVal.current, {\n            toValue: 0,\n            ...springConfig,\n            useNativeDriver,\n        }).start(({ finished }) => {\n            if (finished) {\n                setState((s) => ({ ...s, isAnimating: false }));\n                handleCloseNextTick();\n            }\n        });\n    };\n    const open = () => {\n        if (isIOS) {\n            StatusBar.setHidden(true, \"fade\");\n        }\n        pan.current.setValue(0);\n        setState((s) => ({\n            ...s,\n            isAnimating: true,\n            target: getDefaultTarget(),\n        }));\n        Animated.spring(openVal.current, {\n            toValue: 1,\n            ...springConfig,\n            useNativeDriver,\n        }).start(({ finished }) => {\n            if (finished) {\n                setState((s) => ({ ...s, isAnimating: false }));\n                didOpen();\n            }\n        });\n    };\n    const initPanResponder = () => {\n        _panResponder.current = PanResponder.create({\n            // Ask to be the responder:\n            onStartShouldSetPanResponder: () => !isAnimating,\n            onStartShouldSetPanResponderCapture: () => !isAnimating,\n            onMoveShouldSetPanResponder: () => !isAnimating,\n            onMoveShouldSetPanResponderCapture: () => !isAnimating,\n            onPanResponderGrant: (e, gestureState) => {\n                gesture.init();\n                pan.current.setValue(0);\n                setState((s) => ({ ...s, isPanning: true }));\n                gesture.onLongPress(e, gestureState);\n                gesture.onDoubleTap(e, gestureState);\n            },\n            onPanResponderMove: Animated.event([null, { dy: pan.current }], {\n                useNativeDriver,\n            }),\n            onPanResponderTerminationRequest: () => true,\n            onPanResponderRelease: (evt, gestureState) => {\n                gesture.release();\n                if (gesture.isDoubleTaped)\n                    return;\n                if (gesture.isLongPressed)\n                    return;\n                if (Math.abs(gestureState.dy) > dragDismissThreshold) {\n                    setState((s) => ({\n                        ...s,\n                        isPanning: false,\n                        target: {\n                            y: gestureState.dy,\n                            x: gestureState.dx,\n                            opacity: 1 - Math.abs(gestureState.dy / WINDOW_HEIGHT),\n                        },\n                    }));\n                    close();\n                }\n                else {\n                    Animated.spring(pan.current, {\n                        toValue: 0,\n                        ...springConfig,\n                        useNativeDriver,\n                    }).start(({ finished }) => {\n                        finished && setState((s) => ({ ...s, isPanning: false }));\n                    });\n                }\n            },\n        });\n    };\n    useEffect(() => {\n        initPanResponder();\n    }, [useNativeDriver, isAnimating]);\n    useEffect(() => {\n        isOpen && open();\n    }, [isOpen]);\n    useEffect(() => {\n        if (_panResponder.current && swipeToDismiss) {\n            handlers.current = _panResponder.current.panHandlers;\n        }\n    }, [swipeToDismiss, _panResponder.current]);\n    const lightboxOpacityStyle = {\n        opacity: openVal.current.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, target.opacity],\n        }),\n    };\n    let dragStyle;\n    if (isPanning) {\n        dragStyle = {\n            top: pan.current,\n        };\n        lightboxOpacityStyle.opacity = pan.current.interpolate({\n            inputRange: [-WINDOW_HEIGHT, 0, WINDOW_HEIGHT],\n            outputRange: [0, 1, 0],\n        });\n    }\n    const openStyle = [\n        styles.open,\n        {\n            left: openVal.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [origin.x, target.x],\n            }),\n            top: openVal.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [origin.y, target.y],\n            }),\n            width: openVal.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [origin.width, WINDOW_WIDTH],\n            }),\n            height: openVal.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [origin.height, WINDOW_HEIGHT],\n            }),\n        },\n    ];\n    const background = (<Animated.View style={[styles.background, { backgroundColor }, lightboxOpacityStyle]}></Animated.View>);\n    const header = (<Animated.View style={[styles.header, lightboxOpacityStyle]}>\n      {renderHeader ? (renderHeader(close)) : (<TouchableOpacity onPress={close}>\n          <Text style={styles.closeButton}>×</Text>\n        </TouchableOpacity>)}\n    </Animated.View>);\n    const content = (<Animated.View style={[openStyle, dragStyle, animations]} {...handlers.current}>\n      {children}\n    </Animated.View>);\n    return (<Modal visible={isOpen} transparent={true} onRequestClose={close} {...modalProps}>\n      {background}\n      {content}\n      {header}\n    </Modal>);\n};\nexport default LightboxOverlay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}