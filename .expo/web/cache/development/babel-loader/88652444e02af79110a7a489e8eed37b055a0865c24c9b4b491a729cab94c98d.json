{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport VelocityTracker from './VelocityTracker';\nconst MAX_POINTERS = 20;\nexport default class PointerTracker {\n  constructor() {\n    _defineProperty(this, \"velocityTracker\", new VelocityTracker());\n    _defineProperty(this, \"trackedPointers\", new Map());\n    _defineProperty(this, \"touchEventsIds\", new Map());\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n    _defineProperty(this, \"cachedAbsoluteAverages\", {\n      x: 0,\n      y: 0\n    });\n    _defineProperty(this, \"cachedRelativeAverages\", {\n      x: 0,\n      y: 0\n    });\n    this.lastMovedPointerId = NaN;\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  addToTracker(event) {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n    this.lastMovedPointerId = event.pointerId;\n    const newElement = {\n      abosoluteCoords: {\n        x: event.x,\n        y: event.y\n      },\n      relativeCoords: {\n        x: event.offsetX,\n        y: event.offsetY\n      },\n      timestamp: event.time,\n      velocityX: 0,\n      velocityY: 0\n    };\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n  removeFromTracker(pointerId) {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n  track(event) {\n    const element = this.trackedPointers.get(event.pointerId);\n    if (!element) {\n      return;\n    }\n    this.lastMovedPointerId = event.pointerId;\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n    element.abosoluteCoords = {\n      x: event.x,\n      y: event.y\n    };\n    element.relativeCoords = {\n      x: event.offsetX,\n      y: event.offsetY\n    };\n    this.trackedPointers.set(event.pointerId, element);\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n  mapTouchEventId(id) {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n  removeMappedTouchId(id) {\n    const mappedId = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n  getMappedTouchEventId(touchEventId) {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n    return NaN;\n  }\n  getVelocity(pointerId) {\n    var _this$trackedPointers, _this$trackedPointers2;\n    return {\n      x: (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX,\n      y: (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY\n    };\n  }\n  getLastAbsoluteCoords(pointerId) {\n    if (pointerId !== undefined) {\n      var _this$trackedPointers3, _this$trackedPointers4;\n      return {\n        x: (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.abosoluteCoords.x,\n        y: (_this$trackedPointers4 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.abosoluteCoords.y\n      };\n    } else {\n      var _this$trackedPointers5, _this$trackedPointers6;\n      return {\n        x: (_this$trackedPointers5 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.abosoluteCoords.x,\n        y: (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.abosoluteCoords.y\n      };\n    }\n  }\n  getLastRelativeCoords(pointerId) {\n    if (pointerId !== undefined) {\n      var _this$trackedPointers7, _this$trackedPointers8;\n      return {\n        x: (_this$trackedPointers7 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers7 === void 0 ? void 0 : _this$trackedPointers7.relativeCoords.x,\n        y: (_this$trackedPointers8 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers8 === void 0 ? void 0 : _this$trackedPointers8.relativeCoords.y\n      };\n    } else {\n      var _this$trackedPointers9, _this$trackedPointers10;\n      return {\n        x: (_this$trackedPointers9 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers9 === void 0 ? void 0 : _this$trackedPointers9.relativeCoords.x,\n        y: (_this$trackedPointers10 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers10 === void 0 ? void 0 : _this$trackedPointers10.relativeCoords.y\n      };\n    }\n  }\n  getAbsoluteCoordsAverage() {\n    const coordsSum = this.getAbsoluteCoordsSum();\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n    const averages = {\n      x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY\n    };\n    return averages;\n  }\n  getRelativeCoordsAverage() {\n    const coordsSum = this.getRelativeCoordsSum();\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n    const averages = {\n      x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY\n    };\n    return averages;\n  }\n  getAbsoluteCoordsSum(ignoredPointer) {\n    const sum = {\n      x: 0,\n      y: 0\n    };\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.abosoluteCoords.x;\n        sum.y += value.abosoluteCoords.y;\n      }\n    });\n    return sum;\n  }\n  getRelativeCoordsSum(ignoredPointer) {\n    const sum = {\n      x: 0,\n      y: 0\n    };\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.relativeCoords.x;\n        sum.y += value.relativeCoords.y;\n      }\n    });\n    return sum;\n  }\n  getTrackedPointersCount() {\n    return this.trackedPointers.size;\n  }\n  getTrackedPointersID() {\n    const keys = [];\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n    return keys;\n  }\n  getData() {\n    return this.trackedPointers;\n  }\n  resetTracker() {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  static shareCommonPointers(stPointers, ndPointers) {\n    return stPointers.some(pointerId => ndPointers.includes(pointerId));\n  }\n}","map":{"version":3,"names":["VelocityTracker","MAX_POINTERS","PointerTracker","constructor","_defineProperty","Map","x","y","lastMovedPointerId","NaN","i","touchEventsIds","set","addToTracker","event","trackedPointers","has","pointerId","newElement","abosoluteCoords","relativeCoords","offsetX","offsetY","timestamp","time","velocityX","velocityY","mapTouchEventId","cachedAbsoluteAverages","getAbsoluteCoordsAverage","cachedRelativeAverages","getRelativeCoordsAverage","removeFromTracker","delete","removeMappedTouchId","track","element","get","velocityTracker","add","getVelocity","id","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","key","value","entries","_this$trackedPointers","_this$trackedPointers2","getLastAbsoluteCoords","undefined","_this$trackedPointers3","_this$trackedPointers4","_this$trackedPointers5","_this$trackedPointers6","getLastRelativeCoords","_this$trackedPointers7","_this$trackedPointers8","_this$trackedPointers9","_this$trackedPointers10","coordsSum","getAbsoluteCoordsSum","avgX","size","avgY","averages","getRelativeCoordsSum","ignoredPointer","sum","forEach","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent, Point } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  abosoluteCoords: Point;\n  relativeCoords: Point;\n  timestamp: number;\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAbsoluteAverages: { x: number; y: number } = { x: 0, y: 0 };\n  private cachedRelativeAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      abosoluteCoords: { x: event.x, y: event.y },\n      relativeCoords: { x: event.offsetX, y: event.offsetY },\n      timestamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.abosoluteCoords = { x: event.x, y: event.y };\n    element.relativeCoords = { x: event.offsetX, y: event.offsetY };\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  // Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocity(pointerId: number) {\n    return {\n      x: this.trackedPointers.get(pointerId)?.velocityX as number,\n      y: this.trackedPointers.get(pointerId)?.velocityY as number,\n    };\n  }\n\n  public getLastAbsoluteCoords(pointerId?: number) {\n    if (pointerId !== undefined) {\n      return {\n        x: this.trackedPointers.get(pointerId)?.abosoluteCoords.x as number,\n        y: this.trackedPointers.get(pointerId)?.abosoluteCoords.y as number,\n      };\n    } else {\n      return {\n        x: this.trackedPointers.get(this.lastMovedPointerId)?.abosoluteCoords\n          .x as number,\n        y: this.trackedPointers.get(this.lastMovedPointerId)?.abosoluteCoords\n          .y as number,\n      };\n    }\n  }\n\n  public getLastRelativeCoords(pointerId?: number) {\n    if (pointerId !== undefined) {\n      return {\n        x: this.trackedPointers.get(pointerId)?.relativeCoords.x as number,\n        y: this.trackedPointers.get(pointerId)?.relativeCoords.y as number,\n      };\n    } else {\n      return {\n        x: this.trackedPointers.get(this.lastMovedPointerId)?.relativeCoords\n          .x as number,\n        y: this.trackedPointers.get(this.lastMovedPointerId)?.relativeCoords\n          .y as number,\n      };\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n\n  public getAbsoluteCoordsAverage() {\n    const coordsSum = this.getAbsoluteCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getRelativeCoordsAverage() {\n    const coordsSum = this.getRelativeCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getAbsoluteCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.abosoluteCoords.x;\n        sum.y += value.abosoluteCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getRelativeCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.relativeCoords.x;\n        sum.y += value.relativeCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}