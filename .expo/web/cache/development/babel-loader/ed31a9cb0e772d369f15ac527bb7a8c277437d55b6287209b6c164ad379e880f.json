{"ast":null,"code":"import { ContinousBaseGesture } from './gesture';\nconst _worklet_495088703249_init_data = {\n  code: \"function changeEventCalculator_rotationGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\",\n  location: \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\rotationGesture.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"changeEventCalculator_rotationGestureJs1\\\",\\\"current\\\",\\\"previous\\\",\\\"changePayload\\\",\\\"undefined\\\",\\\"rotationChange\\\",\\\"rotation\\\"],\\\"sources\\\":[\\\"C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/rotationGesture.js\\\"],\\\"mappings\\\":\\\"AAEA,SAAAA,wCAAgDA,CAAAC,OAAE,CAAAC,QAAA,EAGhD,GAAI,CAAAC,aAAa,CAEjB,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAC1B,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAAQ,CAAGJ,QAAQ,CAACI,QAC9C,CAAC,CACH,CAEA,MAAO,CAAE,GAAGL,OAAO,CACjB,GAAGE,aACL,CAAC,CACH\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.15.1\"\n};\nconst changeEventCalculator = function () {\n  const _e = [new global.Error(), 1, -27];\n  const changeEventCalculator = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        rotationChange: current.rotation\n      };\n    } else {\n      changePayload = {\n        rotationChange: current.rotation - previous.rotation\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  changeEventCalculator.__closure = {};\n  changeEventCalculator.__workletHash = 495088703249;\n  changeEventCalculator.__initData = _worklet_495088703249_init_data;\n  changeEventCalculator.__stackDetails = _e;\n  return changeEventCalculator;\n}();\nexport class RotationGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'RotationGestureHandler';\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_495088703249_init_data","code","location","sourceMap","version","changeEventCalculator","_e","global","Error","current","previous","changePayload","undefined","rotationChange","rotation","Object","assign","__closure","__workletHash","__initData","__stackDetails","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport type { RotationGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,WAArC;AAAA,MAAAC,+BAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;EAAAC,OAAA;AAAA;AAAA,MAAAC,qBAAA,GAQA;EAAA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,MAAAH,qBAAA,YAAAA,CACEI,OADF,EAEEC,QAFF,EAGE;IAEA,IAAIC,aAAJ;IACA,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MADV,CAAhB;IAGD,CAJD,MAIO;MACLH,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;MAD9B,CAAhB;IAGD;IAED,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAL,EAAiBE,aAAA;EACzB;EAAAN,qBAAA,CAAAY,SAAA;EAAAZ,qBAAA,CAAAa,aAAA;EAAAb,qBAAA,CAAAc,UAAA,GAAAnB,+BAAA;EAAAK,qBAAA,CAAAe,cAAA,GAAAd,EAAA;EAAA,OAAAD,qBAAA;AAAA,CAjBD;AAmBA,OAAO,MAAMgB,eAAN,SAA8BtB,oBAA9B,CAGL;EACAuB,WAAWA,CAAA,EAAG;IACZ;IAEA,KAAKC,WAAL,GAAmB,wBAAnB;EACD;EAEDC,QAAQA,CACNC,QADM,EAMN;IAEA,KAAKC,QAAL,CAAcrB,qBAAd,GAAsCA,qBAAtC;IACA,OAAO,MAAMmB,QAAN,CAAeC,QAAf,CAAP;EACD;AAjBD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}