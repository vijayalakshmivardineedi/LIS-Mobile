{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { State } from '../../State';\nimport GestureHandler from './GestureHandler';\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\nexport default class LongPressGestureHandler extends GestureHandler {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"minDurationMs\", DEFAULT_MIN_DURATION_MS);\n    _defineProperty(this, \"defaultMaxDistSq\", DEFAULT_MAX_DIST_DP * SCALING_FACTOR);\n    _defineProperty(this, \"maxDistSq\", this.defaultMaxDistSq);\n    _defineProperty(this, \"numberOfPointers\", 1);\n    _defineProperty(this, \"startX\", 0);\n    _defineProperty(this, \"startY\", 0);\n    _defineProperty(this, \"startTime\", 0);\n    _defineProperty(this, \"previousTime\", 0);\n    _defineProperty(this, \"activationTimeout\", void 0);\n  }\n  init(ref, propsRef) {\n    if (this.config.enableContextMenu === undefined) {\n      this.config.enableContextMenu = false;\n    }\n    super.init(ref, propsRef);\n  }\n  transformNativeEvent() {\n    return Object.assign({}, super.transformNativeEvent(), {\n      duration: Date.now() - this.startTime\n    });\n  }\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    super.updateGestureConfig(Object.assign({\n      enabled: enabled\n    }, props));\n    if (this.config.minDurationMs !== undefined) {\n      this.minDurationMs = this.config.minDurationMs;\n    }\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n    if (this.config.numberOfPointers !== undefined) {\n      this.numberOfPointers = this.config.numberOfPointers;\n    }\n  }\n  resetConfig() {\n    super.resetConfig();\n    this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n    this.maxDistSq = this.defaultMaxDistSq;\n  }\n  onStateChange(_newState, _oldState) {\n    clearTimeout(this.activationTimeout);\n  }\n  onPointerDown(event) {\n    if (!this.isButtonInConfig(event.button)) {\n      return;\n    }\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.startX = event.x;\n    this.startY = event.y;\n    this.tryBegin();\n    this.tryActivate();\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerAdd(event) {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n    if (this.tracker.getTrackedPointersCount() > this.numberOfPointers) {\n      this.fail();\n      return;\n    }\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n    this.startX = absoluteCoordsAverage.x;\n    this.startY = absoluteCoordsAverage.y;\n    this.tryActivate();\n  }\n  onPointerMove(event) {\n    super.onPointerMove(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n  onPointerUp(event) {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.currentState === State.ACTIVE) {\n      this.end();\n    } else {\n      this.fail();\n    }\n  }\n  onPointerRemove(event) {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.tracker.getTrackedPointersCount() < this.numberOfPointers && this.getState() !== State.ACTIVE) {\n      this.fail();\n    }\n  }\n  tryBegin() {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n    this.previousTime = Date.now();\n    this.startTime = this.previousTime;\n    this.begin();\n  }\n  tryActivate() {\n    if (this.tracker.getTrackedPointersCount() !== this.numberOfPointers) {\n      return;\n    }\n    if (this.minDurationMs > 0) {\n      this.activationTimeout = setTimeout(() => {\n        this.activate();\n      }, this.minDurationMs);\n    } else if (this.minDurationMs === 0) {\n      this.activate();\n    }\n  }\n  checkDistanceFail() {\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n    const dx = absoluteCoordsAverage.x - this.startX;\n    const dy = absoluteCoordsAverage.y - this.startY;\n    const distSq = dx * dx + dy * dy;\n    if (distSq <= this.maxDistSq) {\n      return;\n    }\n    if (this.currentState === State.ACTIVE) {\n      this.cancel();\n    } else {\n      this.fail();\n    }\n  }\n}","map":{"version":3,"names":["State","GestureHandler","DEFAULT_MIN_DURATION_MS","DEFAULT_MAX_DIST_DP","SCALING_FACTOR","LongPressGestureHandler","constructor","args","_defineProperty","defaultMaxDistSq","init","ref","propsRef","config","enableContextMenu","undefined","transformNativeEvent","Object","assign","duration","Date","now","startTime","updateGestureConfig","_ref","enabled","props","_objectWithoutPropertiesLoose","_excluded","minDurationMs","maxDist","maxDistSq","numberOfPointers","resetConfig","onStateChange","_newState","_oldState","clearTimeout","activationTimeout","onPointerDown","event","isButtonInConfig","button","tracker","addToTracker","startX","x","startY","y","tryBegin","tryActivate","tryToSendTouchEvent","onPointerAdd","getTrackedPointersCount","fail","absoluteCoordsAverage","getAbsoluteCoordsAverage","onPointerMove","track","checkDistanceFail","onPointerUp","removeFromTracker","pointerId","currentState","ACTIVE","end","onPointerRemove","getState","UNDETERMINED","previousTime","begin","setTimeout","activate","dx","dy","distSq","cancel"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\handlers\\LongPressGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\n\nexport default class LongPressGestureHandler extends GestureHandler {\n  private minDurationMs = DEFAULT_MIN_DURATION_MS;\n  private defaultMaxDistSq = DEFAULT_MAX_DIST_DP * SCALING_FACTOR;\n\n  private maxDistSq = this.defaultMaxDistSq;\n  private numberOfPointers = 1;\n  private startX = 0;\n  private startY = 0;\n\n  private startTime = 0;\n  private previousTime = 0;\n\n  private activationTimeout: number | undefined;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    if (this.config.enableContextMenu === undefined) {\n      this.config.enableContextMenu = false;\n    }\n\n    super.init(ref, propsRef);\n  }\n\n  protected transformNativeEvent() {\n    return {\n      ...super.transformNativeEvent(),\n      duration: Date.now() - this.startTime,\n    };\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.minDurationMs !== undefined) {\n      this.minDurationMs = this.config.minDurationMs;\n    }\n\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n\n    if (this.config.numberOfPointers !== undefined) {\n      this.numberOfPointers = this.config.numberOfPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n    this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n    this.maxDistSq = this.defaultMaxDistSq;\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {\n    clearTimeout(this.activationTimeout);\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    if (!this.isButtonInConfig(event.button)) {\n      return;\n    }\n\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n\n    this.startX = event.x;\n    this.startY = event.y;\n\n    this.tryBegin();\n    this.tryActivate();\n\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerAdd(event: AdaptedEvent): void {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n\n    if (this.tracker.getTrackedPointersCount() > this.numberOfPointers) {\n      this.fail();\n      return;\n    }\n\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n\n    this.startX = absoluteCoordsAverage.x;\n    this.startY = absoluteCoordsAverage.y;\n\n    this.tryActivate();\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    super.onPointerMove(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (this.currentState === State.ACTIVE) {\n      this.end();\n    } else {\n      this.fail();\n    }\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (\n      this.tracker.getTrackedPointersCount() < this.numberOfPointers &&\n      this.getState() !== State.ACTIVE\n    ) {\n      this.fail();\n    }\n  }\n\n  private tryBegin(): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.previousTime = Date.now();\n    this.startTime = this.previousTime;\n\n    this.begin();\n  }\n\n  private tryActivate(): void {\n    if (this.tracker.getTrackedPointersCount() !== this.numberOfPointers) {\n      return;\n    }\n\n    if (this.minDurationMs > 0) {\n      this.activationTimeout = setTimeout(() => {\n        this.activate();\n      }, this.minDurationMs);\n    } else if (this.minDurationMs === 0) {\n      this.activate();\n    }\n  }\n\n  private checkDistanceFail(): void {\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n\n    const dx = absoluteCoordsAverage.x - this.startX;\n    const dy = absoluteCoordsAverage.y - this.startY;\n    const distSq = dx * dx + dy * dy;\n\n    if (distSq <= this.maxDistSq) {\n      return;\n    }\n\n    if (this.currentState === State.ACTIVE) {\n      this.cancel();\n    } else {\n      this.fail();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}