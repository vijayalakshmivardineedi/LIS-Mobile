{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-calendars\\\\src\\\\expandableCalendar\\\\Context\\\\Provider.js\";\nimport XDate from 'xdate';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { sameMonth } from '../../dateutils';\nimport { xdateToData } from '../../interface';\nimport { useDidUpdate } from '../../hooks';\nimport { UpdateSources } from '../commons';\nimport styleConstructor from '../style';\nimport CalendarContext from './index';\nimport TodayButton from './todayButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarProvider = props => {\n  const {\n    theme,\n    date,\n    onDateChanged,\n    onMonthChange,\n    showTodayButton = false,\n    disabledOpacity,\n    todayBottomMargin,\n    todayButtonStyle,\n    style: propsStyle,\n    numberOfDays,\n    timelineLeftInset = 72,\n    children\n  } = props;\n  const style = useRef(styleConstructor(theme));\n  const todayButton = useRef();\n  const prevDate = useRef(date);\n  const currDate = useRef(date);\n  const [currentDate, setCurrentDate] = useState(date);\n  const [updateSource, setUpdateSource] = useState(UpdateSources.CALENDAR_INIT);\n  const wrapperStyle = useMemo(() => {\n    return [style.current.contextWrapper, propsStyle];\n  }, [style, propsStyle]);\n  useDidUpdate(() => {\n    if (date && date !== currentDate) {\n      _setDate(date, UpdateSources.PROP_UPDATE);\n    }\n  }, [date]);\n  const _setDate = useCallback((date, updateSource) => {\n    prevDate.current = currDate.current;\n    currDate.current = date;\n    setCurrentDate(date);\n    setUpdateSource(updateSource);\n    onDateChanged?.(date, updateSource);\n    if (!sameMonth(new XDate(date), new XDate(prevDate.current))) {\n      onMonthChange?.(xdateToData(new XDate(date)), updateSource);\n    }\n  }, [onDateChanged, onMonthChange]);\n  const _setDisabled = useCallback(disabled => {\n    if (showTodayButton) {\n      todayButton.current?.disable(disabled);\n    }\n  }, [showTodayButton]);\n  const contextValue = useMemo(() => {\n    return {\n      date: currentDate,\n      prevDate: prevDate.current,\n      updateSource: updateSource,\n      setDate: _setDate,\n      setDisabled: _setDisabled,\n      numberOfDays,\n      timelineLeftInset\n    };\n  }, [currentDate, updateSource, numberOfDays, _setDisabled]);\n  const renderTodayButton = () => {\n    return _jsxDEV(TodayButton, {\n      ref: todayButton,\n      disabledOpacity: disabledOpacity,\n      margin: todayBottomMargin,\n      style: todayButtonStyle,\n      theme: theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this);\n  };\n  return _jsxDEV(CalendarContext.Provider, {\n    value: contextValue,\n    children: [_jsxDEV(View, {\n      style: wrapperStyle,\n      children: children\n    }, numberOfDays, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), showTodayButton && renderTodayButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 13\n  }, this);\n};\nexport default CalendarProvider;\nCalendarProvider.displayName = 'CalendarProvider';","map":{"version":3,"names":["XDate","React","useRef","useState","useCallback","useMemo","View","sameMonth","xdateToData","useDidUpdate","UpdateSources","styleConstructor","CalendarContext","TodayButton","jsxDEV","_jsxDEV","CalendarProvider","props","theme","date","onDateChanged","onMonthChange","showTodayButton","disabledOpacity","todayBottomMargin","todayButtonStyle","style","propsStyle","numberOfDays","timelineLeftInset","children","todayButton","prevDate","currDate","currentDate","setCurrentDate","updateSource","setUpdateSource","CALENDAR_INIT","wrapperStyle","current","contextWrapper","_setDate","PROP_UPDATE","_setDisabled","disabled","disable","contextValue","setDate","setDisabled","renderTodayButton","ref","margin","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","displayName"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-calendars/src/expandableCalendar/Context/Provider.js"],"sourcesContent":["import XDate from 'xdate';\nimport React, { useRef, useState, useCallback, useMemo } from 'react';\nimport { View } from 'react-native';\nimport { sameMonth } from '../../dateutils';\nimport { xdateToData } from '../../interface';\nimport { useDidUpdate } from '../../hooks';\nimport { UpdateSources } from '../commons';\nimport styleConstructor from '../style';\nimport CalendarContext from './index';\nimport TodayButton from './todayButton';\n/**\n * @description: Calendar context provider component\n * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js\n */\nconst CalendarProvider = (props) => {\n    const { theme, date, onDateChanged, onMonthChange, showTodayButton = false, disabledOpacity, todayBottomMargin, todayButtonStyle, style: propsStyle, numberOfDays, timelineLeftInset = 72, children } = props;\n    const style = useRef(styleConstructor(theme));\n    const todayButton = useRef();\n    const prevDate = useRef(date);\n    const currDate = useRef(date); // for setDate only to keep prevDate up to date\n    const [currentDate, setCurrentDate] = useState(date);\n    const [updateSource, setUpdateSource] = useState(UpdateSources.CALENDAR_INIT);\n    const wrapperStyle = useMemo(() => {\n        return [style.current.contextWrapper, propsStyle];\n    }, [style, propsStyle]);\n    useDidUpdate(() => {\n        if (date && date !== currentDate) {\n            _setDate(date, UpdateSources.PROP_UPDATE);\n        }\n    }, [date]);\n    const _setDate = useCallback((date, updateSource) => {\n        prevDate.current = currDate.current;\n        currDate.current = date;\n        setCurrentDate(date);\n        setUpdateSource(updateSource);\n        onDateChanged?.(date, updateSource);\n        if (!sameMonth(new XDate(date), new XDate(prevDate.current))) {\n            onMonthChange?.(xdateToData(new XDate(date)), updateSource);\n        }\n    }, [onDateChanged, onMonthChange]);\n    const _setDisabled = useCallback((disabled) => {\n        if (showTodayButton) {\n            todayButton.current?.disable(disabled);\n        }\n    }, [showTodayButton]);\n    const contextValue = useMemo(() => {\n        return {\n            date: currentDate,\n            prevDate: prevDate.current,\n            updateSource: updateSource,\n            setDate: _setDate,\n            setDisabled: _setDisabled,\n            numberOfDays,\n            timelineLeftInset\n        };\n    }, [currentDate, updateSource, numberOfDays, _setDisabled]);\n    const renderTodayButton = () => {\n        return (<TodayButton ref={todayButton} disabledOpacity={disabledOpacity} margin={todayBottomMargin} style={todayButtonStyle} theme={theme}/>);\n    };\n    return (<CalendarContext.Provider value={contextValue}>\n      <View style={wrapperStyle} key={numberOfDays}>{children}</View>\n      {showTodayButton && renderTodayButton()}\n    </CalendarContext.Provider>);\n};\nexport default CalendarProvider;\nCalendarProvider.displayName = 'CalendarProvider';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}