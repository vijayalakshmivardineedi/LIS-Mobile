{"ast":null,"code":"\"use strict\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-swipe-gestures\\\\index.js\";\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const swipeDirections = {\n  SWIPE_UP: \"SWIPE_UP\",\n  SWIPE_DOWN: \"SWIPE_DOWN\",\n  SWIPE_LEFT: \"SWIPE_LEFT\",\n  SWIPE_RIGHT: \"SWIPE_RIGHT\"\n};\nconst swipeConfig = {\n  velocityThreshold: 0.3,\n  directionalOffsetThreshold: 80,\n  gestureIsClickThreshold: 5\n};\nfunction isValidSwipe(velocity, velocityThreshold, directionalOffset, directionalOffsetThreshold) {\n  return Math.abs(velocity) > velocityThreshold && Math.abs(directionalOffset) < directionalOffsetThreshold;\n}\nclass GestureRecognizer extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.swipeConfig = Object.assign(swipeConfig, props.config);\n    const responderEnd = this._handlePanResponderEnd.bind(this);\n    const shouldSetResponder = this._handleShouldSetPanResponder.bind(this);\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: shouldSetResponder,\n      onMoveShouldSetPanResponder: shouldSetResponder,\n      onPanResponderRelease: responderEnd,\n      onPanResponderTerminate: responderEnd\n    });\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.config !== prevProps.config) {\n      this.swipeConfig = Object.assign(swipeConfig, this.props.config);\n    }\n  }\n  _handleShouldSetPanResponder(evt, gestureState) {\n    return evt.nativeEvent.touches.length === 1 && !this._gestureIsClick(gestureState);\n  }\n  _gestureIsClick(gestureState) {\n    return Math.abs(gestureState.dx) < swipeConfig.gestureIsClickThreshold && Math.abs(gestureState.dy) < swipeConfig.gestureIsClickThreshold;\n  }\n  _handlePanResponderEnd(evt, gestureState) {\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    this._triggerSwipeHandlers(swipeDirection, gestureState);\n  }\n  _triggerSwipeHandlers(swipeDirection, gestureState) {\n    const {\n      onSwipe,\n      onSwipeUp,\n      onSwipeDown,\n      onSwipeLeft,\n      onSwipeRight\n    } = this.props;\n    const {\n      SWIPE_LEFT,\n      SWIPE_RIGHT,\n      SWIPE_UP,\n      SWIPE_DOWN\n    } = swipeDirections;\n    onSwipe && onSwipe(swipeDirection, gestureState);\n    switch (swipeDirection) {\n      case SWIPE_LEFT:\n        onSwipeLeft && onSwipeLeft(gestureState);\n        break;\n      case SWIPE_RIGHT:\n        onSwipeRight && onSwipeRight(gestureState);\n        break;\n      case SWIPE_UP:\n        onSwipeUp && onSwipeUp(gestureState);\n        break;\n      case SWIPE_DOWN:\n        onSwipeDown && onSwipeDown(gestureState);\n        break;\n    }\n  }\n  _getSwipeDirection(gestureState) {\n    const {\n      SWIPE_LEFT,\n      SWIPE_RIGHT,\n      SWIPE_UP,\n      SWIPE_DOWN\n    } = swipeDirections;\n    const {\n      dx,\n      dy\n    } = gestureState;\n    if (this._isValidHorizontalSwipe(gestureState)) {\n      return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n    } else if (this._isValidVerticalSwipe(gestureState)) {\n      return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n    }\n    return null;\n  }\n  _isValidHorizontalSwipe(gestureState) {\n    const {\n      vx,\n      dy\n    } = gestureState;\n    const {\n      velocityThreshold,\n      directionalOffsetThreshold\n    } = this.swipeConfig;\n    return isValidSwipe(vx, velocityThreshold, dy, directionalOffsetThreshold);\n  }\n  _isValidVerticalSwipe(gestureState) {\n    const {\n      vy,\n      dx\n    } = gestureState;\n    const {\n      velocityThreshold,\n      directionalOffsetThreshold\n    } = this.swipeConfig;\n    return isValidSwipe(vy, velocityThreshold, dx, directionalOffsetThreshold);\n  }\n  render() {\n    return _jsxDEV(View, Object.assign({}, this.props, this._panResponder.panHandlers), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default GestureRecognizer;","map":{"version":3,"names":["_jsxFileName","React","Component","View","PanResponder","jsxDEV","_jsxDEV","swipeDirections","SWIPE_UP","SWIPE_DOWN","SWIPE_LEFT","SWIPE_RIGHT","swipeConfig","velocityThreshold","directionalOffsetThreshold","gestureIsClickThreshold","isValidSwipe","velocity","directionalOffset","Math","abs","GestureRecognizer","constructor","props","context","Object","assign","config","responderEnd","_handlePanResponderEnd","bind","shouldSetResponder","_handleShouldSetPanResponder","_panResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onPanResponderRelease","onPanResponderTerminate","componentDidUpdate","prevProps","evt","gestureState","nativeEvent","touches","length","_gestureIsClick","dx","dy","swipeDirection","_getSwipeDirection","_triggerSwipeHandlers","onSwipe","onSwipeUp","onSwipeDown","onSwipeLeft","onSwipeRight","_isValidHorizontalSwipe","_isValidVerticalSwipe","vx","vy","render","panHandlers","fileName","lineNumber","columnNumber"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-swipe-gestures/index.js"],"sourcesContent":["\"use strict\";\n\nimport React, { Component } from \"react\";\nimport { View, PanResponder } from \"react-native\";\n\nexport const swipeDirections = {\n  SWIPE_UP: \"SWIPE_UP\",\n  SWIPE_DOWN: \"SWIPE_DOWN\",\n  SWIPE_LEFT: \"SWIPE_LEFT\",\n  SWIPE_RIGHT: \"SWIPE_RIGHT\"\n};\n\nconst swipeConfig = {\n  velocityThreshold: 0.3,\n  directionalOffsetThreshold: 80,\n  gestureIsClickThreshold: 5\n};\n\nfunction isValidSwipe(\n  velocity,\n  velocityThreshold,\n  directionalOffset,\n  directionalOffsetThreshold\n) {\n  return (\n    Math.abs(velocity) > velocityThreshold &&\n    Math.abs(directionalOffset) < directionalOffsetThreshold\n  );\n}\n\nclass GestureRecognizer extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.swipeConfig = Object.assign(swipeConfig, props.config);\n\n    const responderEnd = this._handlePanResponderEnd.bind(this);\n    const shouldSetResponder = this._handleShouldSetPanResponder.bind(this);\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: shouldSetResponder,\n      onMoveShouldSetPanResponder: shouldSetResponder,\n      onPanResponderRelease: responderEnd,\n      onPanResponderTerminate: responderEnd\n    });\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.config !== prevProps.config) {\n      this.swipeConfig = Object.assign(swipeConfig, this.props.config);\n    }\n  }\n  \n  _handleShouldSetPanResponder(evt, gestureState) {\n    return (\n      evt.nativeEvent.touches.length === 1 &&\n      !this._gestureIsClick(gestureState)\n    );\n  }\n\n  _gestureIsClick(gestureState) {\n    return (\n      Math.abs(gestureState.dx) < swipeConfig.gestureIsClickThreshold &&\n      Math.abs(gestureState.dy) < swipeConfig.gestureIsClickThreshold\n    );\n  }\n\n  _handlePanResponderEnd(evt, gestureState) {\n    const swipeDirection = this._getSwipeDirection(gestureState);\n    this._triggerSwipeHandlers(swipeDirection, gestureState);\n  }\n\n  _triggerSwipeHandlers(swipeDirection, gestureState) {\n    const {\n      onSwipe,\n      onSwipeUp,\n      onSwipeDown,\n      onSwipeLeft,\n      onSwipeRight\n    } = this.props;\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    onSwipe && onSwipe(swipeDirection, gestureState);\n    switch (swipeDirection) {\n      case SWIPE_LEFT:\n        onSwipeLeft && onSwipeLeft(gestureState);\n        break;\n      case SWIPE_RIGHT:\n        onSwipeRight && onSwipeRight(gestureState);\n        break;\n      case SWIPE_UP:\n        onSwipeUp && onSwipeUp(gestureState);\n        break;\n      case SWIPE_DOWN:\n        onSwipeDown && onSwipeDown(gestureState);\n        break;\n    }\n  }\n\n  _getSwipeDirection(gestureState) {\n    const { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP, SWIPE_DOWN } = swipeDirections;\n    const { dx, dy } = gestureState;\n    if (this._isValidHorizontalSwipe(gestureState)) {\n      return dx > 0 ? SWIPE_RIGHT : SWIPE_LEFT;\n    } else if (this._isValidVerticalSwipe(gestureState)) {\n      return dy > 0 ? SWIPE_DOWN : SWIPE_UP;\n    }\n    return null;\n  }\n\n  _isValidHorizontalSwipe(gestureState) {\n    const { vx, dy } = gestureState;\n    const { velocityThreshold, directionalOffsetThreshold } = this.swipeConfig;\n    return isValidSwipe(vx, velocityThreshold, dy, directionalOffsetThreshold);\n  }\n\n  _isValidVerticalSwipe(gestureState) {\n    const { vy, dx } = gestureState;\n    const { velocityThreshold, directionalOffsetThreshold } = this.swipeConfig;\n    return isValidSwipe(vy, velocityThreshold, dx, directionalOffsetThreshold);\n  }\n\n  render() {\n    return <View {...this.props} {...this._panResponder.panHandlers} />;\n  }\n}\n\nexport default GestureRecognizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}