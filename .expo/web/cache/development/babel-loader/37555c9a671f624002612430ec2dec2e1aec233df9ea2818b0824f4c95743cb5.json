{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axiosInstance from '../../../../Security/helpers/axios';\nexport const fetchVisitorVerify = createAsyncThunk(\"visitorVerify/fetchVisitorVerify\", async (payload, {\n  rejectWithValue\n}) => {\n  try {\n    const {\n      societyId,\n      id,\n      visitorType\n    } = payload;\n    let response;\n    const endpoint = visitorType === \"Guest\" ? \"checkInVisitor\" : \"checkInStaff\";\n    if (visitorType === \"Guest\") {\n      response = await axiosInstance.put(`/${endpoint}`, {\n        societyId,\n        visitorId: id\n      });\n    } else {\n      response = await axiosInstance.post(`/${endpoint}`, {\n        societyId,\n        userid: id\n      });\n    }\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response ? error.response.data : error.message);\n  }\n});\nconst visitorVerifySlice = createSlice({\n  name: \"visitorVerify\",\n  initialState: {\n    visitorVerify: [],\n    status: \"idle\",\n    error: null,\n    successMessage: null\n  },\n  reducers: {\n    resetState: state => {\n      state.loading = false;\n      state.error = null;\n      state.success = false;\n      state.successMessage = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchVisitorVerify.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchVisitorVerify.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.visitorVerify = action.payload.userProfiles;\n      state.successMessage = action.payload.message;\n    }).addCase(fetchVisitorVerify.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload.message;\n    });\n  }\n});\nexport const {\n  resetState\n} = visitorVerifySlice.actions;\nexport default visitorVerifySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","fetchVisitorVerify","payload","rejectWithValue","societyId","id","visitorType","response","endpoint","put","visitorId","post","userid","data","error","message","visitorVerifySlice","name","initialState","visitorVerify","status","successMessage","reducers","resetState","state","loading","success","extraReducers","builder","addCase","pending","fulfilled","action","userProfiles","rejected","actions","reducer"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/src/panel/User/Redux/Slice/Security_Panel/HomeScreenSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axiosInstance from '../../../../Security/helpers/axios';\n\nexport const fetchVisitorVerify = createAsyncThunk(\n  \"visitorVerify/fetchVisitorVerify\",\n  async (payload, {rejectWithValue }) => {\n    try {\n      const { societyId, id, visitorType } = payload;\n      let response;\n      const endpoint = visitorType === \"Guest\" ? \"checkInVisitor\" : \"checkInStaff\";\n      if (visitorType === \"Guest\") {\n        response = await axiosInstance.put(`/${endpoint}`, {\n          societyId,\n          visitorId : id,\n        });\n      } else {\n        response = await axiosInstance.post(`/${endpoint}`, {\n          societyId,\n          userid: id,\n        });\n      }\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response ? error.response.data : error.message);\n    }\n  }\n);\n\n\nconst visitorVerifySlice = createSlice({\n  name: \"visitorVerify\",\n  initialState: {\n    visitorVerify: [],\n    status: \"idle\",\n    error: null,\n    successMessage: null,\n\n  },\n  reducers: {\n    resetState: (state) => {\n      state.loading = false;\n      state.error = null;\n      state.success = false;\n      state.successMessage = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchVisitorVerify.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchVisitorVerify.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.visitorVerify = action.payload.userProfiles;\n        state.successMessage = action.payload.message;\n      })\n      .addCase(fetchVisitorVerify.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload.message;\n      });\n  },\n});\nexport const { resetState } = visitorVerifySlice.actions;\nexport default visitorVerifySlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,aAAa,MAAM,oCAAoC;AAE9D,OAAO,MAAMC,kBAAkB,GAAGF,gBAAgB,CAChD,kCAAkC,EAClC,OAAOG,OAAO,EAAE;EAACC;AAAgB,CAAC,KAAK;EACrC,IAAI;IACF,MAAM;MAAEC,SAAS;MAAEC,EAAE;MAAEC;IAAY,CAAC,GAAGJ,OAAO;IAC9C,IAAIK,QAAQ;IACZ,MAAMC,QAAQ,GAAGF,WAAW,KAAK,OAAO,GAAG,gBAAgB,GAAG,cAAc;IAC5E,IAAIA,WAAW,KAAK,OAAO,EAAE;MAC3BC,QAAQ,GAAG,MAAMP,aAAa,CAACS,GAAG,CAAC,IAAID,QAAQ,EAAE,EAAE;QACjDJ,SAAS;QACTM,SAAS,EAAGL;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACLE,QAAQ,GAAG,MAAMP,aAAa,CAACW,IAAI,CAAC,IAAIH,QAAQ,EAAE,EAAE;QAClDJ,SAAS;QACTQ,MAAM,EAAEP;MACV,CAAC,CAAC;IACJ;IACA,OAAOE,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOX,eAAe,CAACW,KAAK,CAACP,QAAQ,GAAGO,KAAK,CAACP,QAAQ,CAACM,IAAI,GAAGC,KAAK,CAACC,OAAO,CAAC;EAC9E;AACF,CACF,CAAC;AAGD,MAAMC,kBAAkB,GAAGlB,WAAW,CAAC;EACrCmB,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;IACZC,aAAa,EAAE,EAAE;IACjBC,MAAM,EAAE,MAAM;IACdN,KAAK,EAAE,IAAI;IACXO,cAAc,EAAE;EAElB,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACC,OAAO,GAAG,KAAK;MACrBD,KAAK,CAACV,KAAK,GAAG,IAAI;MAClBU,KAAK,CAACE,OAAO,GAAG,KAAK;MACrBF,KAAK,CAACH,cAAc,GAAG,IAAI;IAC7B;EACF,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC5B,kBAAkB,CAAC6B,OAAO,EAAGN,KAAK,IAAK;MAC9CA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDS,OAAO,CAAC5B,kBAAkB,CAAC8B,SAAS,EAAE,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACxDR,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACL,aAAa,GAAGa,MAAM,CAAC9B,OAAO,CAAC+B,YAAY;MACjDT,KAAK,CAACH,cAAc,GAAGW,MAAM,CAAC9B,OAAO,CAACa,OAAO;IAC/C,CAAC,CAAC,CACDc,OAAO,CAAC5B,kBAAkB,CAACiC,QAAQ,EAAE,CAACV,KAAK,EAAEQ,MAAM,KAAK;MACvDR,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACV,KAAK,GAAGkB,MAAM,CAAC9B,OAAO,CAACa,OAAO;IACtC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAEQ;AAAW,CAAC,GAAGP,kBAAkB,CAACmB,OAAO;AACxD,eAAenB,kBAAkB,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}