{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport PointerEventManager from './PointerEventManager';\nimport TouchEventManager from './TouchEventManager';\nimport { State } from '../../State';\nimport { isPointerInBounds } from '../utils';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport KeyboardEventManager from './KeyboardEventManager';\nexport class GestureHandlerWebDelegate {\n  constructor() {\n    _defineProperty(this, \"isInitialized\", false);\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"gestureHandler\", void 0);\n    _defineProperty(this, \"eventManagers\", []);\n    _defineProperty(this, \"defaultViewStyles\", {\n      userSelect: '',\n      touchAction: ''\n    });\n  }\n  getView() {\n    return this.view;\n  }\n  init(viewRef, handler) {\n    if (!viewRef) {\n      throw new Error(`Cannot find HTML Element for handler ${handler.getTag()}`);\n    }\n    this.isInitialized = true;\n    this.gestureHandler = handler;\n    this.view = findNodeHandle(viewRef);\n    this.defaultViewStyles = {\n      userSelect: this.view.style.userSelect,\n      touchAction: this.view.style.touchAction\n    };\n    const config = handler.getConfig();\n    this.setUserSelect(config.enabled);\n    this.setTouchAction(config.enabled);\n    this.setContextMenu(config.enabled);\n    this.eventManagers.push(new PointerEventManager(this.view));\n    this.eventManagers.push(new TouchEventManager(this.view));\n    this.eventManagers.push(new KeyboardEventManager(this.view));\n    this.eventManagers.forEach(manager => this.gestureHandler.attachEventManager(manager));\n  }\n  isPointerInBounds({\n    x,\n    y\n  }) {\n    return isPointerInBounds(this.view, {\n      x,\n      y\n    });\n  }\n  measureView() {\n    const rect = this.view.getBoundingClientRect();\n    return {\n      pageX: rect.left,\n      pageY: rect.top,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n  reset() {\n    this.eventManagers.forEach(manager => manager.resetManager());\n  }\n  tryResetCursor() {\n    const config = this.gestureHandler.getConfig();\n    if (config.activeCursor && config.activeCursor !== 'auto' && this.gestureHandler.getState() === State.ACTIVE) {\n      this.view.style.cursor = 'auto';\n    }\n  }\n  shouldDisableContextMenu(config) {\n    return config.enableContextMenu === undefined && this.gestureHandler.isButtonInConfig(MouseButton.RIGHT) || config.enableContextMenu === false;\n  }\n  addContextMenuListeners(config) {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.addEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.addEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n  removeContextMenuListeners(config) {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.removeEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.removeEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n  disableContextMenu(e) {\n    e.preventDefault();\n  }\n  enableContextMenu(e) {\n    e.stopPropagation();\n  }\n  setUserSelect(isHandlerEnabled) {\n    const {\n      userSelect\n    } = this.gestureHandler.getConfig();\n    this.view.style['userSelect'] = isHandlerEnabled ? userSelect !== null && userSelect !== void 0 ? userSelect : 'none' : this.defaultViewStyles.userSelect;\n    this.view.style['webkitUserSelect'] = isHandlerEnabled ? userSelect !== null && userSelect !== void 0 ? userSelect : 'none' : this.defaultViewStyles.userSelect;\n  }\n  setTouchAction(isHandlerEnabled) {\n    const {\n      touchAction\n    } = this.gestureHandler.getConfig();\n    this.view.style['touchAction'] = isHandlerEnabled ? touchAction !== null && touchAction !== void 0 ? touchAction : 'none' : this.defaultViewStyles.touchAction;\n    this.view.style['WebkitTouchCallout'] = isHandlerEnabled ? touchAction !== null && touchAction !== void 0 ? touchAction : 'none' : this.defaultViewStyles.touchAction;\n  }\n  setContextMenu(isHandlerEnabled) {\n    const config = this.gestureHandler.getConfig();\n    if (isHandlerEnabled) {\n      this.addContextMenuListeners(config);\n    } else {\n      this.removeContextMenuListeners(config);\n    }\n  }\n  onEnabledChange(enabled) {\n    if (!this.isInitialized) {\n      return;\n    }\n    this.setUserSelect(enabled);\n    this.setTouchAction(enabled);\n    this.setContextMenu(enabled);\n  }\n  onBegin() {}\n  onActivate() {\n    const config = this.gestureHandler.getConfig();\n    if ((!this.view.style.cursor || this.view.style.cursor === 'auto') && config.activeCursor) {\n      this.view.style.cursor = config.activeCursor;\n    }\n  }\n  onEnd() {\n    this.tryResetCursor();\n  }\n  onCancel() {\n    this.tryResetCursor();\n  }\n  onFail() {\n    this.tryResetCursor();\n  }\n  destroy(config) {\n    this.removeContextMenuListeners(config);\n    this.eventManagers.forEach(manager => {\n      manager.unregisterListeners();\n    });\n  }\n}","map":{"version":3,"names":["PointerEventManager","TouchEventManager","State","isPointerInBounds","MouseButton","KeyboardEventManager","GestureHandlerWebDelegate","constructor","_defineProperty","userSelect","touchAction","getView","view","init","viewRef","handler","Error","getTag","isInitialized","gestureHandler","findNodeHandle","defaultViewStyles","style","config","getConfig","setUserSelect","enabled","setTouchAction","setContextMenu","eventManagers","push","forEach","manager","attachEventManager","x","y","measureView","rect","getBoundingClientRect","pageX","left","pageY","top","width","height","reset","resetManager","tryResetCursor","activeCursor","getState","ACTIVE","cursor","shouldDisableContextMenu","enableContextMenu","undefined","isButtonInConfig","RIGHT","addContextMenuListeners","addEventListener","disableContextMenu","removeContextMenuListeners","removeEventListener","e","preventDefault","stopPropagation","isHandlerEnabled","onEnabledChange","onBegin","onActivate","onEnd","onCancel","onFail","destroy","unregisterListeners"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\GestureHandlerWebDelegate.ts"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport {\n  GestureHandlerDelegate,\n  MeasureResult,\n} from './GestureHandlerDelegate';\nimport PointerEventManager from './PointerEventManager';\nimport TouchEventManager from './TouchEventManager';\nimport { State } from '../../State';\nimport { isPointerInBounds } from '../utils';\nimport EventManager from './EventManager';\nimport { Config } from '../interfaces';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport KeyboardEventManager from './KeyboardEventManager';\n\ninterface DefaultViewStyles {\n  userSelect: string;\n  touchAction: string;\n}\n\nexport class GestureHandlerWebDelegate\n  implements GestureHandlerDelegate<HTMLElement, IGestureHandler>\n{\n  private isInitialized = false;\n  private view!: HTMLElement;\n  private gestureHandler!: IGestureHandler;\n  private eventManagers: EventManager<unknown>[] = [];\n  private defaultViewStyles: DefaultViewStyles = {\n    userSelect: '',\n    touchAction: '',\n  };\n\n  getView(): HTMLElement {\n    return this.view;\n  }\n\n  init(viewRef: number, handler: IGestureHandler): void {\n    if (!viewRef) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${handler.getTag()}`\n      );\n    }\n\n    this.isInitialized = true;\n\n    this.gestureHandler = handler;\n    this.view = findNodeHandle(viewRef) as unknown as HTMLElement;\n\n    this.defaultViewStyles = {\n      userSelect: this.view.style.userSelect,\n      touchAction: this.view.style.touchAction,\n    };\n\n    const config = handler.getConfig();\n\n    this.setUserSelect(config.enabled);\n    this.setTouchAction(config.enabled);\n    this.setContextMenu(config.enabled);\n\n    this.eventManagers.push(new PointerEventManager(this.view));\n    this.eventManagers.push(new TouchEventManager(this.view));\n    this.eventManagers.push(new KeyboardEventManager(this.view));\n\n    this.eventManagers.forEach((manager) =>\n      this.gestureHandler.attachEventManager(manager)\n    );\n  }\n\n  isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    return isPointerInBounds(this.view, { x, y });\n  }\n\n  measureView(): MeasureResult {\n    const rect = this.view.getBoundingClientRect();\n\n    return {\n      pageX: rect.left,\n      pageY: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n  }\n\n  reset(): void {\n    this.eventManagers.forEach((manager: EventManager<unknown>) =>\n      manager.resetManager()\n    );\n  }\n\n  tryResetCursor() {\n    const config = this.gestureHandler.getConfig();\n\n    if (\n      config.activeCursor &&\n      config.activeCursor !== 'auto' &&\n      this.gestureHandler.getState() === State.ACTIVE\n    ) {\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  private shouldDisableContextMenu(config: Config) {\n    return (\n      (config.enableContextMenu === undefined &&\n        this.gestureHandler.isButtonInConfig(MouseButton.RIGHT)) ||\n      config.enableContextMenu === false\n    );\n  }\n\n  private addContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.addEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.addEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private removeContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.removeEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.removeEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private disableContextMenu(this: void, e: MouseEvent): void {\n    e.preventDefault();\n  }\n\n  private enableContextMenu(this: void, e: MouseEvent): void {\n    e.stopPropagation();\n  }\n\n  private setUserSelect(isHandlerEnabled: boolean) {\n    const { userSelect } = this.gestureHandler.getConfig();\n\n    this.view.style['userSelect'] = isHandlerEnabled\n      ? userSelect ?? 'none'\n      : this.defaultViewStyles.userSelect;\n\n    this.view.style['webkitUserSelect'] = isHandlerEnabled\n      ? userSelect ?? 'none'\n      : this.defaultViewStyles.userSelect;\n  }\n\n  private setTouchAction(isHandlerEnabled: boolean) {\n    const { touchAction } = this.gestureHandler.getConfig();\n\n    this.view.style['touchAction'] = isHandlerEnabled\n      ? touchAction ?? 'none'\n      : this.defaultViewStyles.touchAction;\n\n    // @ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = isHandlerEnabled\n      ? touchAction ?? 'none'\n      : this.defaultViewStyles.touchAction;\n  }\n\n  private setContextMenu(isHandlerEnabled: boolean) {\n    const config = this.gestureHandler.getConfig();\n\n    if (isHandlerEnabled) {\n      this.addContextMenuListeners(config);\n    } else {\n      this.removeContextMenuListeners(config);\n    }\n  }\n\n  onEnabledChange(enabled: boolean): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    this.setUserSelect(enabled);\n    this.setTouchAction(enabled);\n    this.setContextMenu(enabled);\n  }\n\n  onBegin(): void {\n    // no-op for now\n  }\n\n  onActivate(): void {\n    const config = this.gestureHandler.getConfig();\n\n    if (\n      (!this.view.style.cursor || this.view.style.cursor === 'auto') &&\n      config.activeCursor\n    ) {\n      this.view.style.cursor = config.activeCursor;\n    }\n  }\n\n  onEnd(): void {\n    this.tryResetCursor();\n  }\n\n  onCancel(): void {\n    this.tryResetCursor();\n  }\n\n  onFail(): void {\n    this.tryResetCursor();\n  }\n\n  public destroy(config: Config): void {\n    this.removeContextMenuListeners(config);\n\n    this.eventManagers.forEach((manager) => {\n      manager.unregisterListeners();\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}