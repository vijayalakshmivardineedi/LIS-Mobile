{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\expo-barcode-scanner\\\\build\\\\BarCodeScanner.js\";\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  BarCodeType,\n  Type\n} = ExpoBarCodeScannerModule;\nconst EVENT_THROTTLE_MS = 500;\nlet warnedAboutDeprecation = false;\nexport class BarCodeScanner extends React.Component {\n  lastEvents = {};\n  lastEventsTimes = {};\n  static Constants = {\n    BarCodeType,\n    Type\n  };\n  static ConversionTables = {\n    type: Type\n  };\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType)\n  };\n  componentDidMount() {\n    if (!warnedAboutDeprecation) {\n      console.warn('BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate');\n      warnedAboutDeprecation = true;\n    }\n  }\n  static async getPermissionsAsync() {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n  static async requestPermissionsAsync() {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync\n  });\n  static async scanFromURLAsync(url, barCodeTypes = Object.values(BarCodeType)) {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const {\n      onBarCodeScanned\n    } = this.props;\n    return _jsxDEV(ExpoBarCodeScannerView, Object.assign({}, nativeProps, {\n      onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this);\n  }\n  onObjectDetected = callback => ({\n    nativeEvent\n  }) => {\n    const {\n      type\n    } = nativeEvent;\n    if (this.lastEvents[type] && this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === this.lastEvents[type] && Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n      return;\n    }\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n  convertNativeProps(props) {\n    const nativeProps = {};\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n    return nativeProps;\n  }\n}\nexport { PermissionStatus };\nexport const {\n  Constants,\n  getPermissionsAsync,\n  requestPermissionsAsync,\n  scanFromURLAsync\n} = BarCodeScanner;","map":{"version":3,"names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","Platform","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","jsxDEV","_jsxDEV","BarCodeType","Type","EVENT_THROTTLE_MS","warnedAboutDeprecation","BarCodeScanner","Component","lastEvents","lastEventsTimes","Constants","ConversionTables","type","defaultProps","back","barCodeTypes","Object","values","componentDidMount","console","warn","getPermissionsAsync","requestPermissionsAsync","usePermissions","getMethod","requestMethod","scanFromURLAsync","url","Array","isArray","length","Error","OS","includes","qr","render","nativeProps","convertNativeProps","props","onBarCodeScanned","assign","onObjectDetected","fileName","_jsxFileName","lineNumber","columnNumber","callback","nativeEvent","JSON","stringify","Date","now","key","value","entries"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\expo-barcode-scanner\\src\\BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nlet warnedAboutDeprecation = false;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The parsed information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The raw information encoded in the bar code.\n   * May be different from `data` depending on the barcode type.\n   * @platform android\n   * @hidden\n   */\n  raw?: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\n/**\n * @deprecated\n * BarCodeScanner has been deprecated and will be removed in a future SDK version. Use `expo-camera` instead.\n * See [How to migrate from `expo-barcode-scanner` to `expo-camera`](https://expo.fyi/barcode-scanner-to-expo-camera)\n * for more details.\n */\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  componentDidMount(): void {\n    if (!warnedAboutDeprecation) {\n      console.warn(\n        'BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate'\n      );\n      warnedAboutDeprecation = true;\n    }\n  }\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync, scanFromURLAsync } =\n  BarCodeScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}