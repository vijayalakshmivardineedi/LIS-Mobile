{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Pager } from './Pager';\nimport { SceneView } from './SceneView';\nimport { TabBar } from './TabBar';\nexport function TabView(_ref) {\n  let {\n    onIndexChange,\n    navigationState,\n    renderScene,\n    initialLayout,\n    keyboardDismissMode = 'auto',\n    lazy = false,\n    lazyPreloadDistance = 0,\n    onSwipeStart,\n    onSwipeEnd,\n    renderLazyPlaceholder = () => null,\n    renderTabBar = props => React.createElement(TabBar, props),\n    sceneContainerStyle,\n    pagerStyle,\n    style,\n    swipeEnabled = true,\n    tabBarPosition = 'top',\n    animationEnabled = true,\n    overScrollMode\n  } = _ref;\n  const [layout, setLayout] = React.useState(Object.assign({\n    width: 0,\n    height: 0\n  }, initialLayout));\n  const jumpToIndex = index => {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n  const handleLayout = e => {\n    const {\n      height,\n      width\n    } = e.nativeEvent.layout;\n    setLayout(prevLayout => {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n      return {\n        height,\n        width\n      };\n    });\n  };\n  return React.createElement(View, {\n    onLayout: handleLayout,\n    style: [styles.pager, style]\n  }, React.createElement(Pager, {\n    layout: layout,\n    navigationState: navigationState,\n    keyboardDismissMode: keyboardDismissMode,\n    swipeEnabled: swipeEnabled,\n    onSwipeStart: onSwipeStart,\n    onSwipeEnd: onSwipeEnd,\n    onIndexChange: jumpToIndex,\n    animationEnabled: animationEnabled,\n    overScrollMode: overScrollMode,\n    style: pagerStyle\n  }, _ref2 => {\n    let {\n      position,\n      render,\n      addEnterListener,\n      jumpTo\n    } = _ref2;\n    const sceneRendererProps = {\n      position,\n      layout,\n      jumpTo\n    };\n    return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar(Object.assign({}, sceneRendererProps, {\n      navigationState\n    })), render(navigationState.routes.map((route, i) => {\n      return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n        addEnterListener: addEnterListener,\n        key: route.key,\n        index: i,\n        lazy: typeof lazy === 'function' ? lazy({\n          route\n        }) : lazy,\n        lazyPreloadDistance: lazyPreloadDistance,\n        navigationState: navigationState,\n        style: sceneContainerStyle\n      }), _ref3 => {\n        let {\n          loading\n        } = _ref3;\n        return loading ? renderLazyPlaceholder({\n          route\n        }) : renderScene(Object.assign({}, sceneRendererProps, {\n          route\n        }));\n      });\n    })), tabBarPosition === 'bottom' && renderTabBar(Object.assign({}, sceneRendererProps, {\n      navigationState\n    })));\n  }));\n}\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","Pager","SceneView","TabBar","TabView","_ref","onIndexChange","navigationState","renderScene","initialLayout","keyboardDismissMode","lazy","lazyPreloadDistance","onSwipeStart","onSwipeEnd","renderLazyPlaceholder","renderTabBar","props","createElement","sceneContainerStyle","pagerStyle","style","swipeEnabled","tabBarPosition","animationEnabled","overScrollMode","layout","setLayout","useState","Object","assign","width","height","jumpToIndex","index","handleLayout","e","nativeEvent","prevLayout","onLayout","styles","pager","_ref2","position","render","addEnterListener","jumpTo","sceneRendererProps","Fragment","routes","map","route","i","_extends","key","_ref3","loading","create","flex","overflow"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-tab-view\\src\\TabView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { Pager } from './Pager';\nimport { SceneView } from './SceneView';\nimport { TabBar } from './TabBar';\nimport type {\n  Layout,\n  NavigationState,\n  PagerProps,\n  Route,\n  SceneRendererProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;\n  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;\n  renderTabBar?: (\n    props: SceneRendererProps & { navigationState: NavigationState<T> }\n  ) => React.ReactNode;\n  tabBarPosition?: 'top' | 'bottom';\n  initialLayout?: Partial<Layout>;\n  lazy?: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance?: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  pagerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport function TabView<T extends Route>({\n  onIndexChange,\n  navigationState,\n  renderScene,\n  initialLayout,\n  keyboardDismissMode = 'auto',\n  lazy = false,\n  lazyPreloadDistance = 0,\n  onSwipeStart,\n  onSwipeEnd,\n  renderLazyPlaceholder = () => null,\n  renderTabBar = (props) => <TabBar {...props} />,\n  sceneContainerStyle,\n  pagerStyle,\n  style,\n  swipeEnabled = true,\n  tabBarPosition = 'top',\n  animationEnabled = true,\n  overScrollMode,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState({\n    width: 0,\n    height: 0,\n    ...initialLayout,\n  });\n\n  const jumpToIndex = (index: number) => {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((prevLayout) => {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return { height, width };\n    });\n  };\n\n  return (\n    <View onLayout={handleLayout} style={[styles.pager, style]}>\n      <Pager\n        layout={layout}\n        navigationState={navigationState}\n        keyboardDismissMode={keyboardDismissMode}\n        swipeEnabled={swipeEnabled}\n        onSwipeStart={onSwipeStart}\n        onSwipeEnd={onSwipeEnd}\n        onIndexChange={jumpToIndex}\n        animationEnabled={animationEnabled}\n        overScrollMode={overScrollMode}\n        style={pagerStyle}\n      >\n        {({ position, render, addEnterListener, jumpTo }) => {\n          // All of the props here must not change between re-renders\n          // This is crucial to optimizing the routes with PureComponent\n          const sceneRendererProps = {\n            position,\n            layout,\n            jumpTo,\n          };\n\n          return (\n            <React.Fragment>\n              {tabBarPosition === 'top' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n              {render(\n                navigationState.routes.map((route, i) => {\n                  return (\n                    <SceneView\n                      {...sceneRendererProps}\n                      addEnterListener={addEnterListener}\n                      key={route.key}\n                      index={i}\n                      lazy={typeof lazy === 'function' ? lazy({ route }) : lazy}\n                      lazyPreloadDistance={lazyPreloadDistance}\n                      navigationState={navigationState}\n                      style={sceneContainerStyle}\n                    >\n                      {({ loading }) =>\n                        loading\n                          ? renderLazyPlaceholder({ route })\n                          : renderScene({\n                              ...sceneRendererProps,\n                              route,\n                            })\n                      }\n                    </SceneView>\n                  );\n                })\n              )}\n              {tabBarPosition === 'bottom' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n            </React.Fragment>\n          );\n        }}\n      </Pager>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}