{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n  constructor(_props) {\n    super(_props);\n    _defineProperty(this, \"onGestureEvent\", void 0);\n    _defineProperty(this, \"transX\", void 0);\n    _defineProperty(this, \"showLeftAction\", void 0);\n    _defineProperty(this, \"leftActionTranslate\", void 0);\n    _defineProperty(this, \"showRightAction\", void 0);\n    _defineProperty(this, \"rightActionTranslate\", void 0);\n    _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n      const {\n        friction,\n        overshootFriction\n      } = props;\n      const {\n        dragX,\n        rowTranslation,\n        leftWidth = 0,\n        rowWidth = 0\n      } = state;\n      const {\n        rightOffset = rowWidth\n      } = state;\n      const rightWidth = Math.max(0, rowWidth - rightOffset);\n      const {\n        overshootLeft = leftWidth > 0,\n        overshootRight = rightWidth > 0\n      } = props;\n      const transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      this.transX = transX;\n      this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      this.leftActionTranslate = this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      this.rightActionTranslate = this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n    _defineProperty(this, \"onTapHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    });\n    _defineProperty(this, \"onHandlerStateChange\", ev => {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        this.handleRelease(ev);\n      }\n      if (ev.nativeEvent.state === State.ACTIVE) {\n        const {\n          velocityX,\n          translationX: dragX\n        } = ev.nativeEvent;\n        const {\n          rowState\n        } = this.state;\n        const {\n          friction\n        } = this.props;\n        const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n        const direction = rowState === -1 ? 'right' : rowState === 1 ? 'left' : translationX > 0 ? 'left' : 'right';\n        if (rowState === 0) {\n          var _this$props$onSwipeab, _this$props;\n          (_this$props$onSwipeab = (_this$props = this.props).onSwipeableOpenStartDrag) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props, direction);\n        } else {\n          var _this$props$onSwipeab2, _this$props2;\n          (_this$props$onSwipeab2 = (_this$props2 = this.props).onSwipeableCloseStartDrag) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2, direction);\n        }\n      }\n    });\n    _defineProperty(this, \"handleRelease\", ev => {\n      const {\n        velocityX,\n        translationX: dragX\n      } = ev.nativeEvent;\n      const {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n      const {\n        friction,\n        leftThreshold = leftWidth / 2,\n        rightThreshold = rightWidth / 2\n      } = this.props;\n      const startOffsetX = this.currentOffset() + dragX / friction;\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      let toValue = 0;\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n    _defineProperty(this, \"animateRow\", (fromValue, toValue, velocityX) => {\n      const {\n        dragX,\n        rowTranslation\n      } = this.state;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, Object.assign({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations\n      }, this.props.animationOptions)).start(({\n        finished\n      }) => {\n        if (finished) {\n          if (toValue > 0) {\n            var _this$props$onSwipeab3, _this$props3, _this$props$onSwipeab4, _this$props4;\n            (_this$props$onSwipeab3 = (_this$props3 = this.props).onSwipeableLeftOpen) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n            (_this$props$onSwipeab4 = (_this$props4 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4, 'left', this);\n          } else if (toValue < 0) {\n            var _this$props$onSwipeab5, _this$props5, _this$props$onSwipeab6, _this$props6;\n            (_this$props$onSwipeab5 = (_this$props5 = this.props).onSwipeableRightOpen) === null || _this$props$onSwipeab5 === void 0 ? void 0 : _this$props$onSwipeab5.call(_this$props5);\n            (_this$props$onSwipeab6 = (_this$props6 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab6 === void 0 ? void 0 : _this$props$onSwipeab6.call(_this$props6, 'right', this);\n          } else {\n            var _this$props$onSwipeab7, _this$props7;\n            const closingDirection = fromValue > 0 ? 'left' : 'right';\n            (_this$props$onSwipeab7 = (_this$props7 = this.props).onSwipeableClose) === null || _this$props$onSwipeab7 === void 0 ? void 0 : _this$props$onSwipeab7.call(_this$props7, closingDirection, this);\n          }\n        }\n      });\n      if (toValue > 0) {\n        var _this$props$onSwipeab8, _this$props8, _this$props$onSwipeab9, _this$props9;\n        (_this$props$onSwipeab8 = (_this$props8 = this.props).onSwipeableLeftWillOpen) === null || _this$props$onSwipeab8 === void 0 ? void 0 : _this$props$onSwipeab8.call(_this$props8);\n        (_this$props$onSwipeab9 = (_this$props9 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab9 === void 0 ? void 0 : _this$props$onSwipeab9.call(_this$props9, 'left');\n      } else if (toValue < 0) {\n        var _this$props$onSwipeab10, _this$props10, _this$props$onSwipeab11, _this$props11;\n        (_this$props$onSwipeab10 = (_this$props10 = this.props).onSwipeableRightWillOpen) === null || _this$props$onSwipeab10 === void 0 ? void 0 : _this$props$onSwipeab10.call(_this$props10);\n        (_this$props$onSwipeab11 = (_this$props11 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab11 === void 0 ? void 0 : _this$props$onSwipeab11.call(_this$props11, 'right');\n      } else {\n        var _this$props$onSwipeab12, _this$props12;\n        const closingDirection = fromValue > 0 ? 'left' : 'right';\n        (_this$props$onSwipeab12 = (_this$props12 = this.props).onSwipeableWillClose) === null || _this$props$onSwipeab12 === void 0 ? void 0 : _this$props$onSwipeab12.call(_this$props12, closingDirection);\n      }\n    });\n    _defineProperty(this, \"onRowLayout\", ({\n      nativeEvent\n    }) => {\n      this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(this, \"currentOffset\", () => {\n      const {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    });\n    _defineProperty(this, \"close\", () => {\n      this.animateRow(this.currentOffset(), 0);\n    });\n    _defineProperty(this, \"openLeft\", () => {\n      const {\n        leftWidth = 0\n      } = this.state;\n      this.animateRow(this.currentOffset(), leftWidth);\n    });\n    _defineProperty(this, \"openRight\", () => {\n      const {\n        rowWidth = 0\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n      this.animateRow(this.currentOffset(), -rightWidth);\n    });\n    _defineProperty(this, \"reset\", () => {\n      const {\n        dragX,\n        rowTranslation\n      } = this.state;\n      dragX.setValue(0);\n      rowTranslation.setValue(0);\n      this.setState({\n        rowState: 0\n      });\n    });\n    const _dragX = new Animated.Value(0);\n    this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    this.updateAnimatedEvent(_props, this.state);\n    this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n  }\n  shouldComponentUpdate(props, state) {\n    if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n    return true;\n  }\n  render() {\n    const {\n      rowState\n    } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10\n    } = this.props;\n    const left = renderLeftActions && React.createElement(Animated.View, {\n      style: [styles.leftActions, {\n        transform: [{\n          translateX: this.leftActionTranslate\n        }]\n      }]\n    }, renderLeftActions(this.showLeftAction, this.transX, this), React.createElement(View, {\n      onLayout: ({\n        nativeEvent\n      }) => this.setState({\n        leftWidth: nativeEvent.layout.x\n      })\n    }));\n    const right = renderRightActions && React.createElement(Animated.View, {\n      style: [styles.rightActions, {\n        transform: [{\n          translateX: this.rightActionTranslate\n        }]\n      }]\n    }, renderRightActions(this.showRightAction, this.transX, this), React.createElement(View, {\n      onLayout: ({\n        nativeEvent\n      }) => this.setState({\n        rightOffset: nativeEvent.layout.x\n      })\n    }));\n    return React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-dragOffsetFromRightEdge, dragOffsetFromLeftEdge],\n      touchAction: \"pan-y\"\n    }, this.props, {\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.onHandlerStateChange\n    }), React.createElement(Animated.View, {\n      onLayout: this.onRowLayout,\n      style: [styles.container, this.props.containerStyle]\n    }, left, right, React.createElement(TapGestureHandler, {\n      enabled: rowState !== 0,\n      touchAction: \"pan-y\",\n      onHandlerStateChange: this.onTapHandlerStateChange\n    }, React.createElement(Animated.View, {\n      pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n      style: [{\n        transform: [{\n          translateX: this.transX\n        }]\n      }, this.props.childrenContainerStyle]\n    }, children))));\n  }\n}\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: Object.assign({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: Object.assign({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","_props","_defineProperty","props","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","direction","_this$props$onSwipeab","_this$props","onSwipeableOpenStartDrag","call","_this$props$onSwipeab2","_this$props2","onSwipeableCloseStartDrag","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","Object","assign","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","_this$props$onSwipeab3","_this$props3","_this$props$onSwipeab4","_this$props4","onSwipeableLeftOpen","onSwipeableOpen","_this$props$onSwipeab5","_this$props5","_this$props$onSwipeab6","_this$props6","onSwipeableRightOpen","_this$props$onSwipeab7","_this$props7","closingDirection","onSwipeableClose","_this$props$onSwipeab8","_this$props8","_this$props$onSwipeab9","_this$props9","onSwipeableLeftWillOpen","onSwipeableWillOpen","_this$props$onSwipeab10","_this$props10","_this$props$onSwipeab11","_this$props11","onSwipeableRightWillOpen","_this$props$onSwipeab12","_this$props12","onSwipeableWillClose","layout","width","_dragX","undefined","updateAnimatedEvent","onGestureEvent","event","shouldComponentUpdate","render","children","renderLeftActions","renderRightActions","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","left","createElement","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","_extends","activeOffsetX","touchAction","onHandlerStateChange","onRowLayout","container","containerStyle","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\n/**\n * @deprecated use Reanimated version of Swipeable instead\n *\n * This component allows for implementing swipeable rows or similar interaction.\n */\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n\n    if (ev.nativeEvent.state === State.ACTIVE) {\n      const { velocityX, translationX: dragX } = ev.nativeEvent;\n      const { rowState } = this.state;\n      const { friction } = this.props;\n\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n      const direction =\n        rowState === -1\n          ? 'right'\n          : rowState === 1\n          ? 'left'\n          : translationX > 0\n          ? 'left'\n          : 'right';\n\n      if (rowState === 0) {\n        this.props.onSwipeableOpenStartDrag?.(direction);\n      } else {\n        this.props.onSwipeableCloseStartDrag?.(direction);\n      }\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // Swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // Swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // All those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        touchAction=\"pan-y\"\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            touchAction=\"pan-y\"\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}