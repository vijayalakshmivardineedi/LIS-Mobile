{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"buttonColor\", \"textColor\", \"rippleColor\", \"children\", \"accessibilityLabel\", \"accessibilityHint\", \"accessibilityRole\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"delayLongPress\", \"style\", \"theme\", \"uppercase\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\", \"background\", \"maxFontSizeMultiplier\", \"touchableRef\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { getButtonColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nconst Button = (_ref, ref) => {\n  var _StyleSheet$flatten;\n  let {\n      disabled,\n      compact,\n      mode = 'text',\n      dark,\n      loading,\n      icon,\n      buttonColor: customButtonColor,\n      textColor: customTextColor,\n      rippleColor: customRippleColor,\n      children,\n      accessibilityLabel,\n      accessibilityHint,\n      accessibilityRole = 'button',\n      onPress,\n      onPressIn,\n      onPressOut,\n      onLongPress,\n      delayLongPress,\n      style,\n      theme: themeOverrides,\n      uppercase: uppercaseProp,\n      contentStyle,\n      labelStyle,\n      testID = 'button',\n      accessible,\n      background,\n      maxFontSizeMultiplier,\n      touchableRef\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(modeToCompare => {\n    return mode === modeToCompare;\n  }, [mode]);\n  const {\n    roundness,\n    isV3,\n    animation\n  } = theme;\n  const uppercase = uppercaseProp ?? !theme.isV3;\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress\n  });\n  const isElevationEntitled = !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(isElevationEntitled ? initialElevation : 0));\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n  const handlePressIn = e => {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const {\n        scale\n      } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n      }).start();\n    }\n  };\n  const handlePressOut = e => {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const {\n        scale\n      } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n      }).start();\n    }\n  };\n  const flattenedStyles = StyleSheet.flatten(style) || {};\n  const [, borderRadiusStyles] = splitStyles(flattenedStyles, style => style.startsWith('border') && style.endsWith('Radius'));\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n  const {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth\n  } = getButtonColors({\n    customButtonColor,\n    customTextColor,\n    theme,\n    mode,\n    disabled,\n    dark\n  });\n  const rippleColor = customRippleColor || color(textColor).alpha(0.12).rgb().string();\n  const touchableStyle = Object.assign({}, borderRadiusStyles, {\n    borderRadius: borderRadiusStyles.borderRadius ?? borderRadius\n  });\n  const buttonStyle = Object.assign({\n    backgroundColor,\n    borderColor,\n    borderWidth\n  }, touchableStyle);\n  const {\n    color: customLabelColor,\n    fontSize: customLabelSize\n  } = StyleSheet.flatten(labelStyle) || {};\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  const textStyle = Object.assign({\n    color: textColor\n  }, font);\n  const iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? [styles.iconReverse, isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`]] : [styles.icon, isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`], isV3 && isMode('text') && styles[`md3IconTextMode${compact ? 'Compact' : ''}`]];\n  return React.createElement(Surface, _extends({}, rest, {\n    ref: ref,\n    testID: `${testID}-container`,\n    style: [styles.button, compact && styles.compact, buttonStyle, style, !isV3 && !disabled && {\n      elevation\n    }]\n  }, isV3 && {\n    elevation: elevation\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    background: background,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,\n    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,\n    delayLongPress: delayLongPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: {\n      disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID,\n    theme: theme,\n    ref: touchableRef\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle,\n    testID: `${testID}-icon-container`\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize ?? iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize ?? iconSize,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    testID: `${testID}-text`,\n    style: [styles.label, !isV3 && styles.md2Label, isV3 && (isMode('text') ? icon || loading ? styles.md3LabelTextAddons : styles.md3LabelText : styles.md3Label), compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, labelStyle],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, children))));\n};\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16\n  },\n  md3IconCompact: {\n    marginLeft: 8,\n    marginRight: 0\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16\n  },\n  md3IconReverseCompact: {\n    marginLeft: 0,\n    marginRight: 8\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8\n  },\n  md3IconTextModeCompact: {\n    marginLeft: 6,\n    marginRight: 0\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12\n  },\n  md3IconReverseTextModeCompact: {\n    marginLeft: 0,\n    marginRight: 6\n  },\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  md2Label: {\n    letterSpacing: 1\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24\n  },\n  md3LabelText: {\n    marginHorizontal: 12\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16\n  }\n});\nexport default forwardRef(Button);","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","View","color","getButtonColors","useInternalTheme","forwardRef","hasTouchHandler","splitStyles","ActivityIndicator","Icon","Surface","TouchableRipple","Text","Button","_ref","ref","_StyleSheet$flatten","disabled","compact","mode","dark","loading","icon","buttonColor","customButtonColor","textColor","customTextColor","rippleColor","customRippleColor","children","accessibilityLabel","accessibilityHint","accessibilityRole","onPress","onPressIn","onPressOut","onLongPress","delayLongPress","style","theme","themeOverrides","uppercase","uppercaseProp","contentStyle","labelStyle","testID","accessible","background","maxFontSizeMultiplier","touchableRef","rest","_objectWithoutPropertiesLoose","_excluded","isMode","useCallback","modeToCompare","roundness","isV3","animation","hasPassedTouchHandler","isElevationEntitled","initialElevation","activeElevation","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","e","scale","timing","toValue","duration","useNativeDriver","OS","constants","reactNativeVersion","minor","start","handlePressOut","flattenedStyles","flatten","borderRadiusStyles","startsWith","endsWith","borderRadius","iconSize","backgroundColor","borderColor","borderWidth","alpha","rgb","string","touchableStyle","Object","assign","buttonStyle","customLabelColor","fontSize","customLabelSize","font","fonts","labelLarge","medium","textStyle","iconStyle","flexDirection","styles","iconReverse","createElement","_extends","button","borderless","undefined","accessibilityState","content","source","size","variant","selectable","numberOfLines","label","md2Label","md3LabelTextAddons","md3LabelText","md3Label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","md3Icon","md3IconCompact","md3IconReverse","md3IconReverseCompact","md3IconTextMode","md3IconTextModeCompact","md3IconReverseTextMode","md3IconReverseTextModeCompact","textAlign","marginVertical","marginHorizontal","letterSpacing","textTransform"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-paper\\src\\components\\Button\\Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityRole,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ButtonMode, getButtonColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action – represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Accessibility role for the button. The \"button\" role is set by default.\n   */\n  accessibilityRole?: AccessibilityRole;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Reference for the touchable\n   */\n  touchableRef?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = (\n  {\n    disabled,\n    compact,\n    mode = 'text',\n    dark,\n    loading,\n    icon,\n    buttonColor: customButtonColor,\n    textColor: customTextColor,\n    rippleColor: customRippleColor,\n    children,\n    accessibilityLabel,\n    accessibilityHint,\n    accessibilityRole = 'button',\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    delayLongPress,\n    style,\n    theme: themeOverrides,\n    uppercase: uppercaseProp,\n    contentStyle,\n    labelStyle,\n    testID = 'button',\n    accessible,\n    background,\n    maxFontSizeMultiplier,\n    touchableRef,\n    ...rest\n  }: Props,\n  ref: React.ForwardedRef<View>\n) => {\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n  const uppercase = uppercaseProp ?? !theme.isV3;\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n  });\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor =\n    customRippleColor || color(textColor).alpha(0.12).rgb().string();\n\n  const touchableStyle = {\n    ...borderRadiusStyles,\n    borderRadius: borderRadiusStyles.borderRadius ?? borderRadius,\n  };\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    ...touchableStyle,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: textColor,\n    ...font,\n  };\n\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`],\n        ]\n      : [\n          styles.icon,\n          isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconTextMode${compact ? 'Compact' : ''}`],\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      ref={ref}\n      testID={`${testID}-container`}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && !disabled && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        background={background}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n        theme={theme}\n        ref={touchableRef}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle} testID={`${testID}-icon-container`}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            testID={`${testID}-text`}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  /* eslint-disable react-native/no-unused-styles */\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconCompact: {\n    marginLeft: 8,\n    marginRight: 0,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconReverseCompact: {\n    marginLeft: 0,\n    marginRight: 8,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconTextModeCompact: {\n    marginLeft: 6,\n    marginRight: 0,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  md3IconReverseTextModeCompact: {\n    marginLeft: 0,\n    marginRight: 6,\n  },\n  /* eslint-enable react-native/no-unused-styles */\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default forwardRef(Button);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}