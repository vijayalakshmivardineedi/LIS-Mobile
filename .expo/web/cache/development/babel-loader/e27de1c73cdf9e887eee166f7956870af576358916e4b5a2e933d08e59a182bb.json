{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"numberOfPointers\", \"direction\"];\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n  onGestureActivated(event) {\n    this.sendEvent(Object.assign({}, event, {\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true\n    }));\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent(Object.assign({}, event, {\n      eventType: Hammer.INPUT_END,\n      isFinal: true\n    }));\n  }\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n  getHammerConfig() {\n    return {\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection()\n    };\n  }\n  getTargetDirections(direction) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    return directions;\n  }\n  getDirection() {\n    const {\n      direction\n    } = this.getConfig();\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n  isGestureEnabledForEvent({\n    numberOfPointers\n  }, _recognizer, {\n    maxPointers: pointerLength\n  }) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return {\n        failed: true\n      };\n    }\n    return {\n      success: validPointerCount\n    };\n  }\n  updateGestureConfig(_ref) {\n    let {\n        numberOfPointers = 1,\n        direction\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig(Object.assign({\n      numberOfPointers,\n      direction\n    }, props));\n  }\n}\nexport default FlingGestureHandler;","map":{"version":3,"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","name","NativeGestureClass","Swipe","onGestureActivated","event","sendEvent","Object","assign","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","onRawEvent","ev","setTimeout","cancelEvent","gesture","hammer","get","options","enable","onStart","getHammerConfig","pointers","config","numberOfPointers","direction","getDirection","getTargetDirections","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","isGestureEnabledForEvent","_recognizer","maxPointers","pointerLength","validPointerCount","failed","success","updateGestureConfig","_ref","props","_objectWithoutPropertiesLoose","_excluded"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\FlingGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}