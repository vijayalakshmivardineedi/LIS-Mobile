{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-gifted-chat\\\\lib\\\\Send.js\";\nimport React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Color from './Color';\nimport { StylePropType } from './utils';\nimport { TEST_ID } from './Constant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = StyleSheet.create({\n  container: {\n    height: 44,\n    justifyContent: 'flex-end'\n  },\n  text: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17,\n    backgroundColor: Color.backgroundTransparent,\n    marginBottom: 12,\n    marginLeft: 10,\n    marginRight: 10\n  }\n});\nexport const Send = ({\n  text,\n  containerStyle,\n  children,\n  textStyle,\n  label = 'Send',\n  alwaysShowSend = false,\n  disabled = false,\n  sendButtonProps,\n  onSend\n}) => {\n  const handleOnPress = useCallback(() => {\n    if (text && onSend) onSend({\n      text: text.trim()\n    }, true);\n  }, [text, onSend]);\n  const showSend = useMemo(() => alwaysShowSend || text && text.trim().length > 0, [alwaysShowSend, text]);\n  if (!showSend) return null;\n  return _jsxDEV(TouchableOpacity, Object.assign({\n    testID: TEST_ID.SEND_TOUCHABLE,\n    accessible: true,\n    accessibilityLabel: \"send\",\n    style: [styles.container, containerStyle],\n    onPress: handleOnPress,\n    accessibilityRole: \"button\",\n    disabled: disabled\n  }, sendButtonProps, {\n    children: _jsxDEV(View, {\n      children: children || _jsxDEV(Text, {\n        style: [styles.text, textStyle],\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this);\n};\nSend.propTypes = {\n  text: PropTypes.string,\n  onSend: PropTypes.func,\n  label: PropTypes.string,\n  containerStyle: StylePropType,\n  textStyle: StylePropType,\n  children: PropTypes.element,\n  alwaysShowSend: PropTypes.bool,\n  disabled: PropTypes.bool,\n  sendButtonProps: PropTypes.object\n};","map":{"version":3,"names":["React","useMemo","useCallback","PropTypes","StyleSheet","Text","TouchableOpacity","View","Color","StylePropType","TEST_ID","jsxDEV","_jsxDEV","styles","create","container","height","justifyContent","text","color","defaultBlue","fontWeight","fontSize","backgroundColor","backgroundTransparent","marginBottom","marginLeft","marginRight","Send","containerStyle","children","textStyle","label","alwaysShowSend","disabled","sendButtonProps","onSend","handleOnPress","trim","showSend","length","Object","assign","testID","SEND_TOUCHABLE","accessible","accessibilityLabel","style","onPress","accessibilityRole","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","string","func","element","bool","object"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gifted-chat\\src\\Send.tsx"],"sourcesContent":["import React, { useMemo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  TouchableOpacityProps,\n} from 'react-native'\n\nimport Color from './Color'\nimport { IMessage } from './Models'\nimport { StylePropType } from './utils'\nimport { TEST_ID } from './Constant'\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 44,\n    justifyContent: 'flex-end',\n  },\n  text: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17,\n    backgroundColor: Color.backgroundTransparent,\n    marginBottom: 12,\n    marginLeft: 10,\n    marginRight: 10,\n  },\n})\n\nexport interface SendProps<TMessage extends IMessage> {\n  text?: string\n  label?: string\n  containerStyle?: StyleProp<ViewStyle>\n  textStyle?: StyleProp<TextStyle>\n  children?: React.ReactNode\n  alwaysShowSend?: boolean\n  disabled?: boolean\n  sendButtonProps?: Partial<TouchableOpacityProps>\n  onSend?(\n    messages: Partial<TMessage> | Partial<TMessage>[],\n    shouldResetInputToolbar: boolean,\n  ): void\n}\n\nexport const Send = <TMessage extends IMessage = IMessage>({\n  text,\n  containerStyle,\n  children,\n  textStyle,\n  label = 'Send',\n  alwaysShowSend = false,\n  disabled = false,\n  sendButtonProps,\n  onSend,\n}: SendProps<TMessage>) => {\n  const handleOnPress = useCallback(() => {\n    if (text && onSend)\n      onSend({ text: text.trim() } as Partial<TMessage>, true)\n  }, [text, onSend])\n\n  const showSend = useMemo(\n    () => alwaysShowSend || (text && text.trim().length > 0),\n    [alwaysShowSend, text]\n  )\n\n  if (!showSend)\n    return null\n\n  return (\n    <TouchableOpacity\n      testID={TEST_ID.SEND_TOUCHABLE}\n      accessible\n      accessibilityLabel='send'\n      style={[styles.container, containerStyle]}\n      onPress={handleOnPress}\n      accessibilityRole='button'\n      disabled={disabled}\n      {...sendButtonProps}\n    >\n      <View>\n        {children || <Text style={[styles.text, textStyle]}>{label}</Text>}\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nSend.propTypes = {\n  text: PropTypes.string,\n  onSend: PropTypes.func,\n  label: PropTypes.string,\n  containerStyle: StylePropType,\n  textStyle: StylePropType,\n  children: PropTypes.element,\n  alwaysShowSend: PropTypes.bool,\n  disabled: PropTypes.bool,\n  sendButtonProps: PropTypes.object,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}