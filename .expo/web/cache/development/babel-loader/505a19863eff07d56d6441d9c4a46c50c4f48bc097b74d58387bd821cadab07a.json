{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\src\\\\panel\\\\User\\\\Navigations\\\\Screens\\\\Community\\\\Events.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Card } from \"react-native-paper\";\nimport { fetchEvents } from \"../../../Redux/Slice/CommunitySlice/EventSlice\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Events = ({\n  navigation\n}) => {\n  const dispatch = useDispatch();\n  const events = useSelector(state => state.events.events);\n  const {\n    status,\n    error\n  } = useSelector(state => state.events);\n  const [societyId, setSocietyId] = useState(null);\n  useEffect(() => {\n    const getSocietyId = async () => {\n      try {\n        const user = await AsyncStorage.getItem('user');\n        const id = JSON.parse(user).societyId;\n        if (id !== null) {\n          setSocietyId(id);\n        } else {\n          console.error('No societyId found in AsyncStorage');\n        }\n      } catch (error) {\n        console.error('Error fetching societyId from AsyncStorage:', error);\n      }\n    };\n    getSocietyId();\n  }, []);\n  useEffect(() => {\n    if (societyId) {\n      dispatch(fetchEvents(societyId));\n    }\n  }, [dispatch, societyId]);\n  let content;\n  console.log(\"kjgo8iyfvvhki\", events);\n  if (status === \"loading\") {\n    content = _jsxDEV(Text, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }, this);\n  } else if (status === \"succeeded\") {\n    content = _jsxDEV(_Fragment, {\n      children: events.events.map(event => _jsxDEV(TouchableOpacity, {\n        onPress: () => navigation.navigate('EventDetails', {\n          event\n        }),\n        children: _jsxDEV(Card, {\n          style: styles.card,\n          children: [console.log(event.pictures[0]), _jsxDEV(Card.Content, {\n            children: [event.pictures[0] ? _jsxDEV(Image, {\n              source: {\n                uri: `http://192.168.29.226:2000${event.pictures[0].img}`\n              },\n              style: styles.pictures\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this) : _jsxDEV(Text, {\n              style: styles.errorText,\n              children: \"Image not available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), _jsxDEV(Text, {\n              style: styles.text,\n              children: [\"Name: \", event.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), _jsxDEV(Text, {\n              style: styles.text,\n              children: [\"Start Date: \", event.startDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), _jsxDEV(Text, {\n              style: styles.text,\n              children: [\"End Date: \", event.endDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, event._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  } else if (status === \"failed\") {\n    content = _jsxDEV(Text, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }, this);\n  }\n  return _jsxDEV(ScrollView, {\n    contentContainerStyle: styles.scrollView,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  scrollView: {\n    paddingVertical: 10,\n    backgroundColor: \"#f5f5f5\",\n    alignItems: 'center'\n  },\n  card: {\n    width: \"100%\",\n    borderRadius: 10,\n    marginTop: 20\n  },\n  pictures: {\n    width: \"100%\",\n    height: 150,\n    borderRadius: 10\n  },\n  text: {\n    fontSize: 16\n  }\n});\nexport default Events;","map":{"version":3,"names":["React","useEffect","useState","Text","Image","StyleSheet","ScrollView","TouchableOpacity","useDispatch","useSelector","Card","fetchEvents","AsyncStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","Events","navigation","dispatch","events","state","status","error","societyId","setSocietyId","getSocietyId","user","getItem","id","JSON","parse","console","content","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","onPress","navigate","style","styles","card","pictures","Content","source","uri","img","errorText","text","name","startDate","endDate","_id","contentContainerStyle","scrollView","create","paddingVertical","backgroundColor","alignItems","width","borderRadius","marginTop","height","fontSize"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/src/panel/User/Navigations/Screens/Community/Events.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Text, Image, StyleSheet, ScrollView } from \"react-native\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { Card } from \"react-native-paper\";\r\n// import { fetchEvents } from \"../../../Redux/Slice/CommunitySlice/EventSlice\";\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// const Events = () => {\r\n//   const dispatch = useDispatch();\r\n//   const events = useSelector((state) => state.events.events);\r\n//   const { status } = useSelector((state) => state.events);\r\n//   const { error } = useSelector((state) => state.events);\r\n//   const [societyId, setSocietyId] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const getSocietyId = async () => {\r\n//       try {\r\n//         const user = await AsyncStorage.getItem('user');\r\n//         const id = JSON.parse(user).societyId;\r\n//         if (id !== null) {\r\n//           setSocietyId(id);\r\n//         } else {\r\n//           console.error('No societyId found in AsyncStorage');\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error fetching societyId from AsyncStorage:', error);\r\n//       }\r\n//     };\r\n//     getSocietyId();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (societyId) {\r\n//       dispatch(fetchEvents(societyId));\r\n//     }\r\n//   }, [dispatch, societyId]);\r\n\r\n//   let content;\r\n//   const formatDate = (dateString) => {\r\n//     const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n//     return new Date(dateString).toLocaleDateString(undefined, options);\r\n//   };\r\n//   const formatTime = (dateString) => {\r\n//     const options = { hour: \"2-digit\", minute: \"2-digit\", hour12: true };\r\n//     return new Date(dateString).toLocaleTimeString(undefined, options);\r\n//   };\r\n//   const ensureStartAM = (dateString) => {\r\n//     const date = new Date(dateString);\r\n//     const randomHour = 9 + Math.floor(Math.random() * 3);\r\n//     date.setHours(randomHour);\r\n//     date.setMinutes(Math.floor(Math.random() * 60));\r\n//     date.setSeconds(0);\r\n//     return date;\r\n//   };\r\n\r\n//   const ensurePM = (dateString) => {\r\n//     const date = new Date(dateString);\r\n//     const hours = date.getHours();\r\n//     if (hours < 12) {\r\n//       date.setHours(12 + Math.floor(Math.random() * 9));\r\n//       date.setMinutes(Math.floor(Math.random() * 60));\r\n//       date.setSeconds(0);\r\n//     }\r\n//     return date;\r\n//   };\r\n\r\n//   if (status === \"loading\") {\r\n//     content = <Text>Loading...</Text>;\r\n//   } else if (status === \"succeeded\") {\r\n//     content = <>\r\n//       {\r\n//         events.events.map((event) => (\r\n//           <Card style={styles.card} key={event._id}>\r\n//             {console.log(event.pictures[0])}\r\n//             <Card.Content>\r\n//             {event.pictures[0]  ? (\r\n//                 <Image\r\n//                   source={{ uri: `http://192.168.29.226:2000${event.pictures[0].img}` }}\r\n//                   style={styles.pictures}\r\n//                 />\r\n//               ) : (\r\n//                 <Text style={styles.errorText}>Image not available</Text>\r\n//               )}\r\n//               <Text style={styles.text}>Name: {event.name}</Text>\r\n//               <Text style={styles.text}>Event Date: {event.startDate}</Text>\r\n//               <Text style={styles.text}>\r\n//                 Event Start: {event.startDate}\r\n//               </Text>\r\n//               <Text style={styles.text}>Event End: {event.endDate}</Text>\r\n//             </Card.Content>\r\n//           </Card>\r\n\r\n//         ))\r\n//       }\r\n//     </>\r\n//   } else if (status === \"failed\") {\r\n//     content = <Text>{error}</Text>;\r\n//   }\r\n\r\n//   return (\r\n//     <ScrollView contentContainerStyle={styles.scrollView}>{content}</ScrollView>\r\n//   );\r\n// };\r\n\r\n// const styles = StyleSheet.create({\r\n//   scrollView: {\r\n//     alignItems: \"center\",\r\n//     paddingVertical: 10,\r\n//     backgroundColor: \"#f5f5f5\",\r\n//   },\r\n//   card: {\r\n//     width: \"90%\",\r\n//     borderRadius: 10,\r\n//     marginTop: 10,\r\n//   },\r\n//   pictures: {\r\n//     width: \"100%\",\r\n//     height: 150,\r\n//     borderRadius: 10,\r\n//   },\r\n//   text: {\r\n//     fontSize: 16,\r\n//   },\r\n// });\r\n\r\n// export default Events;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Text, Image, StyleSheet, ScrollView,TouchableOpacity } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Card } from \"react-native-paper\";\r\nimport { fetchEvents } from \"../../../Redux/Slice/CommunitySlice/EventSlice\";\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nconst Events = ({ navigation }) => {\r\n  const dispatch = useDispatch();\r\n  const events = useSelector((state) => state.events.events);\r\n  const { status,error } = useSelector((state) => state.events);\r\n  const [societyId, setSocietyId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getSocietyId = async () => {\r\n      try {\r\n        const user = await AsyncStorage.getItem('user');\r\n        const id = JSON.parse(user).societyId;\r\n        if (id !== null) {\r\n          setSocietyId(id);\r\n        } else {\r\n          console.error('No societyId found in AsyncStorage');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching societyId from AsyncStorage:', error);\r\n      }\r\n    };\r\n    getSocietyId();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (societyId) {\r\n      dispatch(fetchEvents(societyId));\r\n    }\r\n  }, [dispatch, societyId]);\r\n\r\n  let content;\r\n\r\nconsole.log(\"kjgo8iyfvvhki\", events)\r\n\r\n  if (status === \"loading\") {\r\n    content = <Text>Loading...</Text>;\r\n  } else if (status === \"succeeded\") {\r\n    content = (<>\r\n      {\r\n        events.events.map((event) => (\r\n          <TouchableOpacity key={event._id}\r\n          onPress={() => navigation.navigate('EventDetails', {  event})}\r\n          > \r\n          <Card style={styles.card}>\r\n            {console.log(event.pictures[0])}\r\n            <Card.Content>\r\n       \r\n            {event.pictures[0]  ? (\r\n                <Image\r\n                  source={{ uri: `http://192.168.29.226:2000${event.pictures[0].img}` }}\r\n                  style={styles.pictures}\r\n                />\r\n              ) : (\r\n                <Text style={styles.errorText}>Image not available</Text>\r\n              )}\r\n              <Text style={styles.text}>Name: {event.name}</Text>\r\n              <Text style={styles.text}>Start Date: {event.startDate}</Text>\r\n              <Text style={styles.text}>End Date: {event.endDate}</Text>\r\n         \r\n            </Card.Content>\r\n          \r\n          </Card>\r\n          </TouchableOpacity>\r\n\r\n       ))\r\n      }\r\n    </>\r\n  )} else if (status === \"failed\") {\r\n    content = <Text>{error}</Text>;\r\n  }\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={styles.scrollView}>{content}</ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  scrollView: {\r\n     paddingVertical: 10,\r\n    backgroundColor: \"#f5f5f5\",\r\n    alignItems:'center',\r\n  },\r\n  card: {\r\n    width: \"100%\",\r\n    borderRadius: 10,\r\n    marginTop: 20,\r\n  },\r\n  pictures: {\r\n    width: \"100%\",\r\n    height: 150,\r\n    borderRadius: 10,\r\n  },\r\n  text: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default Events;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}