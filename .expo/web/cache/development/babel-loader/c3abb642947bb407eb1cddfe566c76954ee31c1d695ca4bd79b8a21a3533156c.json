{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport Sharing from './ExpoSharing';\nexport async function isAvailableAsync() {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n  return false;\n}\nexport async function shareAsync(url, options = {}) {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}","map":{"version":3,"names":["UnavailabilityError","Sharing","isAvailableAsync","shareAsync","url","options"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\expo-sharing\\src\\Sharing.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent`.\n   * @platform android\n   */\n  mimeType?: string;\n  /**\n   * [Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)\n   *  - the type of the target file.\n   * @platform ios\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title.\n   * @platform android\n   * @platform web\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<void> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,OAAO,MAAM,eAAe;AA4BnC,OAAO,eAAeC,gBAAgBA,CAAA;EACpC,IAAID,OAAO,EAAE;IACX,IAAIA,OAAO,CAACC,gBAAgB,EAAE;MAC5B,OAAO,MAAMD,OAAO,CAACC,gBAAgB,EAAE;;IAEzC,OAAO,IAAI;;EAGb,OAAO,KAAK;AACd;AAQA,OAAO,eAAeC,UAAUA,CAACC,GAAW,EAAEC,OAAA,GAA0B,EAAE;EACxE,IAAI,CAACJ,OAAO,IAAI,CAACA,OAAO,CAACE,UAAU,EAAE;IACnC,MAAM,IAAIH,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC;;EAExD,OAAO,MAAMC,OAAO,CAACE,UAAU,CAACC,GAAG,EAAEC,OAAO,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}