{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"cursorColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"outlineStyle\", \"textColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLabelTextLayout\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"onInputLayout\", \"onLayout\", \"left\", \"right\", \"placeholderTextColor\", \"testID\", \"contentStyle\", \"scaledLabel\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Outline } from './Addons/Outline';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nconst TextInputOutlined = _ref => {\n  let {\n      disabled = false,\n      editable = true,\n      label,\n      error = false,\n      selectionColor: customSelectionColor,\n      cursorColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      outlineStyle,\n      textColor,\n      dense,\n      style,\n      theme,\n      render = props => React.createElement(NativeTextInput, props),\n      multiline = false,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLabelTextLayout,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      onInputLayout,\n      onLayout,\n      left,\n      right,\n      placeholderTextColor,\n      testID = 'text-input-outlined',\n      contentStyle,\n      scaledLabel\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  const {\n    colors,\n    isV3,\n    roundness\n  } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    INPUT_PADDING_HORIZONTAL,\n    MIN_HEIGHT,\n    ADORNMENT_OFFSET,\n    MIN_WIDTH\n  } = getConstants(isV3);\n  const _ref4 = StyleSheet.flatten(style) || {},\n    {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight: lineHeightStyle,\n      height,\n      backgroundColor = colors === null || colors === void 0 ? void 0 : colors.background,\n      textAlign\n    } = _ref4,\n    viewStyle = _objectWithoutPropertiesLoose(_ref4, _excluded2);\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const lineHeight = lineHeightStyle || (Platform.OS === 'web' ? fontSize * 1.2 : undefined);\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n    selectionColor\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme\n  });\n  const densePaddingTop = label ? LABEL_PADDING_TOP_DENSE : 0;\n  const paddingTop = label ? LABEL_PADDING_TOP : 0;\n  const yOffset = label ? OUTLINE_MINIMIZED_LABEL_Y_OFFSET : 0;\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(_ref2 => {\n    let {\n      side,\n      type\n    } = _ref2;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  const isAdornmentRightIcon = adornmentConfig.some(_ref3 => {\n    let {\n      side,\n      type\n    } = _ref3;\n    return side === AdornmentSide.Right && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n  const minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - paddingTop;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, paddingTop);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: paddingTop,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingOut = adjustPaddingOut(Object.assign({}, paddingSettings, {\n    pad\n  }));\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + yOffset);\n  const {\n    current: placeholderOpacityAnims\n  } = React.useRef([new Animated.Value(0), new Animated.Value(1)]);\n  const placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  const labelBackgroundColor = backgroundColor === 'transparent' ? theme.colors.background : backgroundColor;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    onLabelTextLayout,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: labelBackgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    inputContainerLayout: {\n      width: parentState.inputContainerLayout.width + (isAdornmentRightIcon || isAdornmentLeftIcon ? INPUT_PADDING_HORIZONTAL : 0)\n    },\n    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,\n    isV3\n  };\n  const onLayoutChange = React.useCallback(e => {\n    onInputLayout(e);\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n  }, [onLayout, onInputLayout]);\n  const minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  const outlinedHeight = inputHeight + (dense ? densePaddingTop / 2 : paddingTop);\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -yOffset\n  });\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -yOffset\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -yOffset\n  });\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    mode: 'outlined',\n    isV3\n  });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left,\n      right,\n      textStyle: Object.assign({}, font, {\n        fontSize,\n        lineHeight,\n        fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    style: outlineStyle,\n    label: label,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop,\n      minHeight\n    }]\n  }, label ? React.createElement(InputLabel, _extends({\n    labeled: parentState.labeled,\n    error: parentState.error,\n    focused: parentState.focused,\n    scaledLabel: scaledLabel,\n    wiggle: Boolean(parentState.value && labelProps.labelError),\n    labelLayoutMeasured: parentState.labelLayout.measured,\n    labelLayoutWidth: parentState.labelLayout.width,\n    labelLayoutHeight: parentState.labelLayout.height\n  }, labelProps, {\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  })) : null, render === null || render === void 0 ? void 0 : render(Object.assign({}, rest, {\n    ref: innerRef,\n    onLayout: onLayoutChange,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    editable: !disabled && editable,\n    selectionColor,\n    cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize,\n      lineHeight,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n      minWidth: Math.min(parentState.labelTextLayout.width + 2 * INPUT_PADDING_HORIZONTAL, MIN_WIDTH)\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle],\n    testID\n  }))), React.createElement(TextInputAdornment, adornmentProps));\n};\nexport default TextInputOutlined;\nconst styles = StyleSheet.create({\n  labelContainer: {\n    paddingBottom: 0,\n    flexGrow: 1\n  },\n  input: {\n    margin: 0,\n    flexGrow: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"names":["React","Animated","View","NativeTextInput","StyleSheet","I18nManager","Platform","Outline","AdornmentType","AdornmentSide","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","InputLabel","LabelBackground","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","customSelectionColor","cursorColor","outlineColor","customOutlineColor","activeOutlineColor","outlineStyle","textColor","dense","style","theme","render","props","createElement","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLabelTextLayout","onLeftAffixLayoutChange","onRightAffixLayoutChange","onInputLayout","onLayout","left","right","placeholderTextColor","testID","contentStyle","scaledLabel","rest","_objectWithoutPropertiesLoose","_excluded","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","MIN_WIDTH","_ref4","flatten","fontSize","fontSizeStyle","fontWeight","lineHeight","lineHeightStyle","height","backgroundColor","background","textAlign","viewStyle","_excluded2","OS","undefined","inputTextColor","activeColor","placeholderColor","errorColor","densePaddingTop","paddingTop","yOffset","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","_ref2","side","type","Left","Icon","isAdornmentRightIcon","_ref3","Right","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","Object","assign","baseLabelTranslateY","current","placeholderOpacityAnims","useRef","Value","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelBackgroundColor","labelProps","labelError","wiggleOffsetX","maxFontSizeMultiplier","inputContainerLayout","opacity","value","onLayoutChange","useCallback","e","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","labelContainer","_extends","wiggle","Boolean","labelLayoutMeasured","labelLayoutWidth","labelLayoutHeight","labelBackground","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","minWidth","Math","min","labelTextLayout","outline","create","paddingBottom","flexGrow","margin"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-paper\\src\\components\\TextInput\\TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport { Outline } from './Addons/Outline';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor: customSelectionColor,\n  cursorColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  outlineStyle,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLabelTextLayout,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  onInputLayout,\n  onLayout,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-outlined',\n  contentStyle,\n  scaledLabel,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET, MIN_WIDTH } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight: lineHeightStyle,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const lineHeight =\n    lineHeightStyle || (Platform.OS === 'web' ? fontSize * 1.2 : undefined);\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n    selectionColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    customSelectionColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const densePaddingTop = label ? LABEL_PADDING_TOP_DENSE : 0;\n  const paddingTop = label ? LABEL_PADDING_TOP : 0;\n  const yOffset = label ? OUTLINE_MINIMIZED_LABEL_Y_OFFSET : 0;\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  const isAdornmentRightIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Right && type === AdornmentType.Icon\n  );\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - paddingTop;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    paddingTop\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: paddingTop,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + yOffset);\n\n  const { current: placeholderOpacityAnims } = React.useRef([\n    new Animated.Value(0),\n    new Animated.Value(1),\n  ]);\n\n  const placeholderOpacity = hasActiveOutline\n    ? parentState.labeled\n    : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelBackgroundColor: ColorValue =\n    backgroundColor === 'transparent'\n      ? theme.colors.background\n      : backgroundColor;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    onLabelTextLayout,\n    placeholderOpacity,\n    labelError: error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: labelBackgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    inputContainerLayout: {\n      width:\n        parentState.inputContainerLayout.width +\n        (isAdornmentRightIcon || isAdornmentLeftIcon\n          ? INPUT_PADDING_HORIZONTAL\n          : 0),\n    },\n    opacity:\n      parentState.value || parentState.focused\n        ? parentState.labelLayout.measured\n          ? 1\n          : 0\n        : 1,\n    isV3,\n  };\n\n  const onLayoutChange = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      onInputLayout(e);\n      onLayout?.(e);\n    },\n    [onLayout, onInputLayout]\n  );\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight + (dense ? densePaddingTop / 2 : paddingTop);\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -yOffset,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -yOffset,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -yOffset,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    disabled,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        style={outlineStyle}\n        label={label}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            paddingTop,\n            minHeight,\n          },\n        ]}\n      >\n        {label ? (\n          <InputLabel\n            labeled={parentState.labeled}\n            error={parentState.error}\n            focused={parentState.focused}\n            scaledLabel={scaledLabel}\n            wiggle={Boolean(parentState.value && labelProps.labelError)}\n            labelLayoutMeasured={parentState.labelLayout.measured}\n            labelLayoutWidth={parentState.labelLayout.width}\n            labelLayoutHeight={parentState.labelLayout.height}\n            {...labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n        ) : null}\n        {render?.({\n          ...rest,\n          ref: innerRef,\n          onLayout: onLayoutChange,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          editable: !disabled && editable,\n          selectionColor,\n          cursorColor:\n            typeof cursorColor === 'undefined' ? activeColor : cursorColor,\n          placeholderTextColor: placeholderTextColor || placeholderColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            !multiline || (multiline && height) ? { height: inputHeight } : {},\n            paddingOut,\n            {\n              ...font,\n              fontSize,\n              lineHeight,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.getConstants().isRTL\n                ? 'right'\n                : 'left',\n              paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              minWidth: Math.min(\n                parentState.labelTextLayout.width +\n                  2 * INPUT_PADDING_HORIZONTAL,\n                MIN_WIDTH\n              ),\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n            contentStyle,\n          ],\n          testID,\n        } as RenderProps)}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    paddingBottom: 0,\n    flexGrow: 1,\n  },\n  input: {\n    margin: 0,\n    flexGrow: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}