{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\rn\\\\l\\\\node_modules\\\\react-native-calendars\\\\src\\\\Profiler.js\";\nimport React, { Profiler as RProfiler } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cumulativeDuration = {};\nexport default class Profiler extends React.Component {\n  onRender = (...profileData) => {\n    logProfileData(getProfileData(profileData));\n  };\n  render() {\n    const {\n      children,\n      id\n    } = this.props;\n    return _jsxDEV(RProfiler, {\n      id: id,\n      onRender: this.onRender,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this);\n  }\n}\nexport const getProfileData = ([id, phase, actualDuration, baseDuration, startTime, commitTime, interactions]) => {\n  cumulativeDuration[id] = Number(((cumulativeDuration[id] ?? 0) + actualDuration).toFixed(2));\n  return {\n    id,\n    interactions,\n    phase,\n    actualDuration: Number(actualDuration.toFixed(2)),\n    baseDuration: Number(baseDuration.toFixed(2)),\n    commitTime: Number(commitTime.toFixed(2)),\n    cumulativeDuration: cumulativeDuration[id],\n    startTime: Number(startTime.toFixed(2))\n  };\n};\nexport const logProfileData = ({\n  id,\n  actualDuration,\n  cumulativeDuration,\n  phase\n}) => {\n  console.group(phase);\n  console.log(id, ':', actualDuration, cumulativeDuration);\n  console.groupEnd();\n};","map":{"version":3,"names":["React","Profiler","RProfiler","jsxDEV","_jsxDEV","cumulativeDuration","Component","onRender","profileData","logProfileData","getProfileData","render","children","id","props","fileName","_jsxFileName","lineNumber","columnNumber","phase","actualDuration","baseDuration","startTime","commitTime","interactions","Number","toFixed","console","group","log","groupEnd"],"sources":["C:/Users/user/OneDrive/Documents/rn/l/node_modules/react-native-calendars/src/Profiler.js"],"sourcesContent":["// @ts-nocheck\n// Taken from\n// https://medium.com/life-at-paperless/how-to-use-the-react-profiler-component-to-measure-performance-improvements-from-hooks-d43b7092d7a8\n// Profiler callback\n// https://reactjs.org/docs/profiler.html#onrender-callback\nimport React, { Profiler as RProfiler } from 'react';\n// The entire render time since execution of this file (likely on page load)\nconst cumulativeDuration = {};\nexport default class Profiler extends React.Component {\n    onRender = (...profileData) => {\n        logProfileData(getProfileData(profileData));\n    };\n    render() {\n        const { children, id } = this.props;\n        return (<RProfiler id={id} onRender={this.onRender}>\n        {children}\n      </RProfiler>);\n    }\n}\n// TODO: fix typescript...\nexport const getProfileData = ([id, // the \"id\" prop of the Profiler tree that has just committed\nphase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\nactualDuration, // time spent rendering the committed update\nbaseDuration, // estimated time to render the entire subtree without memoization\nstartTime, // when React began rendering this update\ncommitTime, // when React committed this update\ninteractions // the Set of interactions belonging to this update\n]) => {\n    cumulativeDuration[id] = Number(((cumulativeDuration[id] ?? 0) + actualDuration).toFixed(2));\n    return {\n        id,\n        interactions,\n        phase,\n        actualDuration: Number(actualDuration.toFixed(2)),\n        baseDuration: Number(baseDuration.toFixed(2)),\n        commitTime: Number(commitTime.toFixed(2)),\n        cumulativeDuration: cumulativeDuration[id],\n        startTime: Number(startTime.toFixed(2))\n    };\n};\nexport const logProfileData = ({ id, actualDuration, cumulativeDuration, phase }) => {\n    console.group(phase);\n    // table did not work for me so I used log instead\n    console.log(id, ':', actualDuration, cumulativeDuration);\n    // console.table({\n    //   actualDuration,\n    //   baseDuration,\n    //   cumulativeDuration\n    // });\n    console.groupEnd();\n};\n"],"mappings":";AAKA,OAAOA,KAAK,IAAIC,QAAQ,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,kBAAkB,GAAG,CAAC,CAAC;AAC7B,eAAe,MAAMJ,QAAQ,SAASD,KAAK,CAACM,SAAS,CAAC;EAClDC,QAAQ,GAAGA,CAAC,GAAGC,WAAW,KAAK;IAC3BC,cAAc,CAACC,cAAc,CAACF,WAAW,CAAC,CAAC;EAC/C,CAAC;EACDG,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC,QAAQ;MAAEC;IAAG,CAAC,GAAG,IAAI,CAACC,KAAK;IACnC,OAAQV,OAAA,CAACF,SAAS;MAACW,EAAE,EAAEA,EAAG;MAACN,QAAQ,EAAE,IAAI,CAACA,QAAS;MAAAK,QAAA,EAClDA;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EACd;AACJ;AAEA,OAAO,MAAMR,cAAc,GAAGA,CAAC,CAACG,EAAE,EAClCM,KAAK,EACLC,cAAc,EACdC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,YAAY,CACX,KAAK;EACFnB,kBAAkB,CAACQ,EAAE,CAAC,GAAGY,MAAM,CAAC,CAAC,CAACpB,kBAAkB,CAACQ,EAAE,CAAC,IAAI,CAAC,IAAIO,cAAc,EAAEM,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5F,OAAO;IACHb,EAAE;IACFW,YAAY;IACZL,KAAK;IACLC,cAAc,EAAEK,MAAM,CAACL,cAAc,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC;IACjDL,YAAY,EAAEI,MAAM,CAACJ,YAAY,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7CH,UAAU,EAAEE,MAAM,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;IACzCrB,kBAAkB,EAAEA,kBAAkB,CAACQ,EAAE,CAAC;IAC1CS,SAAS,EAAEG,MAAM,CAACH,SAAS,CAACI,OAAO,CAAC,CAAC,CAAC;EAC1C,CAAC;AACL,CAAC;AACD,OAAO,MAAMjB,cAAc,GAAGA,CAAC;EAAEI,EAAE;EAAEO,cAAc;EAAEf,kBAAkB;EAAEc;AAAM,CAAC,KAAK;EACjFQ,OAAO,CAACC,KAAK,CAACT,KAAK,CAAC;EAEpBQ,OAAO,CAACE,GAAG,CAAChB,EAAE,EAAE,GAAG,EAAEO,cAAc,EAAEf,kBAAkB,CAAC;EAMxDsB,OAAO,CAACG,QAAQ,CAAC,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}