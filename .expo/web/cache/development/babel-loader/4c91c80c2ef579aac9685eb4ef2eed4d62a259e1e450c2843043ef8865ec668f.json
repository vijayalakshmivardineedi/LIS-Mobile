{"ast":null,"code":"import { useCallback } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { attachHandlers } from './attachHandlers';\nimport { updateHandlers } from './updateHandlers';\nimport { needsToReattach } from './needsToReattach';\nimport { dropHandlers } from './dropHandlers';\nimport { useForceRender, validateDetectorChildren } from './utils';\nexport function useDetectorUpdater(state, preparedGesture, gesturesToAttach, gestureConfig, webEventHandlersRef) {\n  const forceRender = useForceRender();\n  const updateAttachedGestures = useCallback(skipConfigUpdate => {\n    const viewTag = findNodeHandle(state.viewRef);\n    const didUnderlyingViewChange = viewTag !== state.previousViewTag;\n    if (didUnderlyingViewChange || needsToReattach(preparedGesture, gesturesToAttach)) {\n      validateDetectorChildren(state.viewRef);\n      dropHandlers(preparedGesture);\n      attachHandlers({\n        preparedGesture,\n        gestureConfig,\n        gesturesToAttach,\n        webEventHandlersRef,\n        viewTag\n      });\n      if (didUnderlyingViewChange) {\n        state.previousViewTag = viewTag;\n        state.forceRebuildReanimatedEvent = true;\n        forceRender();\n      }\n    } else if (!skipConfigUpdate) {\n      updateHandlers(preparedGesture, gestureConfig, gesturesToAttach);\n    }\n  }, [forceRender, gestureConfig, gesturesToAttach, preparedGesture, state, webEventHandlersRef]);\n  return updateAttachedGestures;\n}","map":{"version":3,"names":["useCallback","findNodeHandle","attachHandlers","updateHandlers","needsToReattach","dropHandlers","useForceRender","validateDetectorChildren","useDetectorUpdater","state","preparedGesture","gesturesToAttach","gestureConfig","webEventHandlersRef","forceRender","updateAttachedGestures","skipConfigUpdate","viewTag","viewRef","didUnderlyingViewChange","previousViewTag","forceRebuildReanimatedEvent"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector\\useDetectorUpdater.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { GestureType } from '../gesture';\nimport { ComposedGesture } from '../gestureComposition';\n\nimport {\n  AttachedGestureState,\n  GestureDetectorState,\n  WebEventHandler,\n} from './types';\nimport { attachHandlers } from './attachHandlers';\nimport { updateHandlers } from './updateHandlers';\nimport { needsToReattach } from './needsToReattach';\nimport { dropHandlers } from './dropHandlers';\nimport { useForceRender, validateDetectorChildren } from './utils';\n\n// Returns a function that's responsible for updating the attached gestures\n// If the view has changed, it will reattach the handlers to the new view\n// If the view remains the same, it will update the handlers with the new config\nexport function useDetectorUpdater(\n  state: GestureDetectorState,\n  preparedGesture: AttachedGestureState,\n  gesturesToAttach: GestureType[],\n  gestureConfig: ComposedGesture | GestureType,\n  webEventHandlersRef: React.RefObject<WebEventHandler>\n) {\n  const forceRender = useForceRender();\n  const updateAttachedGestures = useCallback(\n    // skipConfigUpdate is used to prevent unnecessary updates when only checking if the view has changed\n    (skipConfigUpdate?: boolean) => {\n      // If the underlying view has changed we need to reattach handlers to the new view\n      const viewTag = findNodeHandle(state.viewRef) as number;\n      const didUnderlyingViewChange = viewTag !== state.previousViewTag;\n\n      if (\n        didUnderlyingViewChange ||\n        needsToReattach(preparedGesture, gesturesToAttach)\n      ) {\n        validateDetectorChildren(state.viewRef);\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesturesToAttach,\n          webEventHandlersRef,\n          viewTag,\n        });\n\n        if (didUnderlyingViewChange) {\n          state.previousViewTag = viewTag;\n          state.forceRebuildReanimatedEvent = true;\n          forceRender();\n        }\n      } else if (!skipConfigUpdate) {\n        updateHandlers(preparedGesture, gestureConfig, gesturesToAttach);\n      }\n    },\n    [\n      forceRender,\n      gestureConfig,\n      gesturesToAttach,\n      preparedGesture,\n      state,\n      webEventHandlersRef,\n    ]\n  );\n\n  return updateAttachedGestures;\n}\n"],"mappings":"AAAA,SAAgBA,WAAhB,QAAmC,OAAnC;AAAA,OAAAC,cAAA;AAUA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,EAAyBC,wBAAzB,QAAyD,SAAzD;AAKA,OAAO,SAASC,kBAATA,CACLC,KADK,EAELC,eAFK,EAGLC,gBAHK,EAILC,aAJK,EAKLC,mBALK,EAML;EACA,MAAMC,WAAW,GAAGR,cAAc,EAAlC;EACA,MAAMS,sBAAsB,GAAGf,WAAW,CAEvCgB,gBAAD,IAAgC;IAE9B,MAAMC,OAAO,GAAGhB,cAAc,CAACQ,KAAK,CAACS,OAAP,CAA9B;IACA,MAAMC,uBAAuB,GAAGF,OAAO,KAAKR,KAAK,CAACW,eAAlD;IAEA,IACED,uBAAuB,IACvBf,eAAe,CAACM,eAAD,EAAkBC,gBAAlB,CAFjB,EAGE;MACAJ,wBAAwB,CAACE,KAAK,CAACS,OAAP,CAAxB;MACAb,YAAY,CAACK,eAAD,CAAZ;MACAR,cAAc,CAAC;QACbQ,eADa;QAEbE,aAFa;QAGbD,gBAHa;QAIbE,mBAJa;QAKbI;MALa,CAAD,CAAd;MAQA,IAAIE,uBAAJ,EAA6B;QAC3BV,KAAK,CAACW,eAAN,GAAwBH,OAAxB;QACAR,KAAK,CAACY,2BAAN,GAAoC,IAApC;QACAP,WAAW;MACZ;IACF,CAnBD,MAmBO,IAAI,CAACE,gBAAL,EAAuB;MAC5Bb,cAAc,CAACO,eAAD,EAAkBE,aAAlB,EAAiCD,gBAAjC,CAAd;IACD;EACF,CA7BuC,EA8BxC,CACEG,WADF,EAEEF,aAFF,EAGED,gBAHF,EAIED,eAJF,EAKED,KALF,EAMEI,mBANF,CA9BwC,CAA1C;EAwCA,OAAOE,sBAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}