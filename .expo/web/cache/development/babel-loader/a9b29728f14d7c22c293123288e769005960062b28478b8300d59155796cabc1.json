{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\nexport function filterConfig(props, validProps, defaults = {}) {\n  const filteredConfig = Object.assign({}, defaults);\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = {\n          top: value,\n          left: value,\n          bottom: value,\n          right: value\n        };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n  handlerIDs = toArray(handlerIDs);\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(({\n      current\n    }) => current).filter(handle => handle);\n  }\n  return handlerIDs.map(handlerID => {\n    var _handlerID$current;\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(handlerTag => handlerTag > 0);\n}\nexport function findNodeHandle(node) {\n  if (Platform.OS === 'web') {\n    return node;\n  }\n  return findNodeHandleRN(node);\n}\nlet flushOperationsScheduled = false;\nexport function scheduleFlushOperations() {\n  if (!flushOperationsScheduled) {\n    flushOperationsScheduled = true;\n    ghQueueMicrotask(() => {\n      RNGestureHandlerModule.flushOperations();\n      flushOperationsScheduled = false;\n    });\n  }\n}","map":{"version":3,"names":["handlerIDToTag","toArray","RNGestureHandlerModule","ghQueueMicrotask","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","filteredConfig","assign","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Platform","OS","map","current","filter","handle","handlerID","_handlerID$current","handlerTag","findNodeHandle","node","findNodeHandleRN","flushOperationsScheduled","scheduleFlushOperations","flushOperations"],"sources":["C:\\Users\\user\\OneDrive\\Documents\\rn\\l\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') {\n    return node;\n  }\n  return findNodeHandleRN(node);\n}\nlet flushOperationsScheduled = false;\n\nexport function scheduleFlushOperations() {\n  if (!flushOperationsScheduled) {\n    flushOperationsScheduled = true;\n    ghQueueMicrotask(() => {\n      RNGestureHandlerModule.flushOperations();\n\n      flushOperationsScheduled = false;\n    });\n  }\n}\n"],"mappings":";;AAEA,SAASA,cAAT,QAA+B,oBAA/B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,SAASC,aAATA,CAAuBC,KAAvB,EAAuCC,IAAvC,EAAqD;EAGnD,OACED,KAAK,KAAKE,SAAV,KACCF,KAAK,KAAKG,MAAM,CAACH,KAAD,CAAhB,IACC,EAAE,gBAAiBA,KAAnB,CAFF,KAGAC,IAAI,KAAK,sBAHT,IAIAA,IAAI,KAAK,gBALX;AAOD;AAED,OAAO,SAASG,YAATA,CACLC,KADK,EAELC,UAFK,EAGLC,QAAiC,GAAG,EAH/B,EAIL;EACA,MAAMC,cAAc,GAAAL,MAAA,CAAAM,MAAA,KAAQF,QAAA,CAA5B;EACA,KAAK,MAAMG,GAAX,IAAkBJ,UAAlB,EAA8B;IAC5B,IAAIK,KAAK,GAAGN,KAAK,CAACK,GAAD,CAAjB;IACA,IAAIX,aAAa,CAACY,KAAD,EAAQD,GAAR,CAAjB,EAA+B;MAC7B,IAAIA,GAAG,KAAK,sBAAR,IAAkCA,GAAG,KAAK,SAA9C,EAAyD;QACvDC,KAAK,GAAGC,wBAAwB,CAACP,KAAK,CAACK,GAAD,CAAN,CAAhC;MACD,CAFD,MAEO,IAAIA,GAAG,KAAK,SAAR,IAAqB,OAAOC,KAAP,KAAiB,QAA1C,EAAoD;QACzDA,KAAK,GAAG;UAAEE,GAAG,EAAEF,KAAP;UAAcG,IAAI,EAAEH,KAApB;UAA2BI,MAAM,EAAEJ,KAAnC;UAA0CK,KAAK,EAAEL;QAAjD,CAAR;MACD;MACDH,cAAc,CAACE,GAAD,CAAd,GAAsBC,KAAtB;IACD;EACF;EACD,OAAOH,cAAP;AACD;AACD,SAASI,wBAATA,CAAkCK,UAAlC,EAAmD;EACjDA,UAAU,GAAGrB,OAAO,CAACqB,UAAD,CAApB;EAEA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzB,OAAOF,UAAU,CACdG,GADI,CACA,CAAC;MAAEC;IAAF,CAAD,KAAmCA,OADnC,EAEJC,MAFI,CAEIC,MAAD,IAAiBA,MAFpB,CAAP;EAGD;EAED,OAAON,UAAU,CACdG,GADI,CAEFI,SAAD;IAAA,IAAAC,kBAAA;IAAA,OACE9B,cAAc,CAAC6B,SAAD,CAAd,MAAAC,kBAAA,GAA6BD,SAAS,CAACH,OAAvC,cAAAI,kBAAA,uBAA6BA,kBAAA,CAAmBC,UAAhD,KAA8D,CAAC,CADjE;EAAA,CAFG,EAKJJ,MALI,CAKII,UAAD,IAAwBA,UAAU,GAAG,CALxC,CAAP;AAMD;AAED,OAAO,SAASC,cAATA,CACLC,IADK,EAEkE;EACvE,IAAIV,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzB,OAAOS,IAAP;EACD;EACD,OAAOC,gBAAgB,CAACD,IAAD,CAAvB;AACD;AACD,IAAIE,wBAAwB,GAAG,KAA/B;AAEA,OAAO,SAASC,uBAATA,CAAA,EAAmC;EACxC,IAAI,CAACD,wBAAL,EAA+B;IAC7BA,wBAAwB,GAAG,IAA3B;IACAhC,gBAAgB,CAAC,MAAM;MACrBD,sBAAsB,CAACmC,eAAvB;MAEAF,wBAAwB,GAAG,KAA3B;IACD,CAJe,CAAhB;EAKD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}